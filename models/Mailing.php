<?php

namespace shopium\mod\telegram\models;


use Yii;
use Longman\TelegramBot\Request;
use panix\engine\CMS;
use core\components\ActiveRecord;
use yii\behaviors\TimestampBehavior;
use shopium\mod\telegram\models\query\MailingQuery;

/**
 * This is the model class for table "tbl_mailing".
 *
 * @property integer $user_id
 * @property boolean $disable_notification
 * @property boolean $send_to_groups
 * @property boolean $send_to_supergroups
 * @property boolean $send_to_channels
 * @property boolean $send_to_users
 * @property string $type
 * @property string $text
 * @property string performer
 * @property integer duration
 * @property string title
 */
class Mailing extends ActiveRecord
{
    const MODULE_ID = 'telegram';
    public $media;
    public $thumb;
    public static function find()
    {
        return new MailingQuery(get_called_class());
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%telegram__mailing}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['text'], 'required'],
            [['text', 'type', 'media','thumb'], 'safe'],
            [['disable_notification', 'send_to_groups', 'send_to_supergroups', 'send_to_channels', 'send_to_users'], 'boolean'],
            [['text'], 'string', 'max' => 4100],
        ];
    }


    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    self::EVENT_BEFORE_INSERT => ['created_at'],
                ]
            ]
        ];
    }

    public static function typeList()
    {
        return [
            'sendMessage' => 'sendMessage',
            'sendPhoto' => 'sendPhoto',
            'sendAudio' => 'sendAudio',
            'sendDocument' => 'sendDocument',
            'sendVideo' => 'sendVideo',
            'sendMediaGroup' => 'sendMediaGroup',
            'sendVoice' => 'sendVoice',
        ];
    }


    public function afterSave($insert, $changedAttributes)
    {


        $chatsQuery = Chat::find();
        $where = [];
        if ($this->send_to_users)
            $where[] = 'private';
        if ($this->send_to_groups)
            $where[] = 'group';
        if ($this->send_to_supergroups)
            $where[] = 'supergroup';
        if ($this->send_to_channels)
            $where[] = 'channel';


        $chatsQuery->where(['in', 'type', $where]);


        $chats = $chatsQuery->asArray()->all();

        $results = [];
        $data = [];
        if ($chats) {
            $api = Yii::$app->telegram;
            $text = 'text';

            if ($this->type == 'sendPhoto') {
                $text = 'caption';
                $data['photo'] = $this->media;
            } elseif ($this->type == 'sendDocument') {
                $text = 'caption';
                $data['document'] = $this->media;
            } elseif ($this->type == 'sendAudio') {
                $text = 'caption';
                $data['audio'] = $this->media;
                if ($this->title)
                    $data['title'] = $this->title;
                if ($this->duration)
                    $data['duration'] = $this->duration;
                if ($this->performer)
                    $data['performer'] = $this->performer;
               // var_dump($this->thumb);die;
                if ($this->thumb)
                    $data['thumb'] = $this->thumb;
            }
            $data[$text] = $this->text;
            $data['disable_notification'] = $this->disable_notification;
            foreach ($chats as $row) {
                $data['chat_id'] = $row['id'];

                $results[] = Request::send($this->type, $data);
            }
        }

        if ($this->media) {
            unlink($this->media);
        }
        if ($this->thumb) {
            unlink($this->thumb);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

}
