(function (modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/ 		// Check if module is in cache
        /******/
        if (installedModules[moduleId]) {
            /******/
            return installedModules[moduleId].exports;
            /******/
        }
        /******/ 		// Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/            i: moduleId,
            /******/            l: false,
            /******/            exports: {}
            /******/
        };
        /******/
        /******/ 		// Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Flag the module as loaded
        /******/
        module.l = true;
        /******/
        /******/ 		// Return the exports of the module
        /******/
        return module.exports;
        /******/
    }

    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ 	// identity function for calling harmony imports with the correct context
    /******/
    __webpack_require__.i = function (value) {
        return value;
    };
    /******/
    /******/ 	// define getter function for harmony exports
    /******/
    __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
            /******/
            Object.defineProperty(exports, name, {
                /******/                configurable: false,
                /******/                enumerable: true,
                /******/                get: getter
                /******/
            });
            /******/
        }
        /******/
    };
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
            /******/            function getDefault() {
                return module['default'];
            } :
            /******/            function getModuleExports() {
                return module;
            };
        /******/
        __webpack_require__.d(getter, 'a', getter);
        /******/
        return getter;
        /******/
    };
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ 	// __webpack_public_path__
    /******/
    __webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 2);
    /******/
})
/************************************************************************/
/******/([
    /* 0 */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _lodash = __webpack_require__(3);

        var _lodash2 = _interopRequireDefault(_lodash);

        var _emoji = __webpack_require__(1);

        var _emoji2 = _interopRequireDefault(_emoji);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        var plugin = function plugin(editor) {

            var add_space = true;
            if ("emoji_add_space" in editor.settings) {
                add_space = editor.settings.emoji_add_space;
            }

            var show_groups = true;
            if ("emoji_show_groups" in editor.settings) {
                show_groups = editor.settings.emoji_show_groups;
            }

            var show_subgroups = true;
            if ("emoji_show_subgroups" in editor.settings) {
                show_subgroups = editor.settings.emoji_show_subgroups;
            }

            var show_tab_icons = true;
            if ("emoji_show_tab_icons" in editor.settings) {
                show_tab_icons = editor.settings.emoji_show_tab_icons;
            }

            var getBody = new Promise(function (resolve, reject) {
                try {
                    var body = [];
                    var groupHtml = show_groups ? '' : '<div>';
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = _emoji2.default[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var group = _step.value;

                            groupHtml = show_groups ? '<div>' : groupHtml;
                            var tabIcon = '';
                            var _iteratorNormalCompletion2 = true;
                            var _didIteratorError2 = false;
                            var _iteratorError2 = undefined;

                            try {
                                for (var _iterator2 = group.subGroups[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                    var subgroup = _step2.value;

                                    groupHtml += show_subgroups ? '<p style="clear:both"><strong>' + tinymce.translate('tinymceEmoji.'+subgroup.name) + '</strong><br/>' : '';


                                    /*groupHtml += show_subgroups ? '<p style="clear:both"><strong>' + subgroup.name.split('-').join(' ').replace(/\b\w/g, function (l) {
                                            return l.toUpperCase();
                                        }) + '</strong><br/>' : '';*/

                                    var _iteratorNormalCompletion3 = true;
                                    var _didIteratorError3 = false;
                                    var _iteratorError3 = undefined;

                                    try {
                                        var codes;
                                        for (var _iterator3 = subgroup.emojis[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                            var emoji = _step3.value;

                                            if (tabIcon === '') {
                                                tabIcon = emoji.emoji;
                                            }
                                            codes = emoji.codes.join(',').replaceAll(',', '');
                                            groupHtml += '<span style="float:left; margin: 4px; cursor: pointer;" data-emoji="' + emoji.emoji + '" data-code="' + codes + '" class="emoji emoji' + codes.toLowerCase() + '"></span>';
                                        }
                                    } catch (err) {
                                        _didIteratorError3 = true;
                                        _iteratorError3 = err;
                                    } finally {
                                        try {
                                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                                _iterator3.return();
                                            }
                                        } finally {
                                            if (_didIteratorError3) {
                                                throw _iteratorError3;
                                            }
                                        }
                                    }

                                    groupHtml += '</p>';
                                }
                            } catch (err) {
                                _didIteratorError2 = true;
                                _iteratorError2 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                        _iterator2.return();
                                    }
                                } finally {
                                    if (_didIteratorError2) {
                                        throw _iteratorError2;
                                    }
                                }
                            }

                            groupHtml += show_groups ? '</div>' : '';
                            if (show_groups) {
                                body.push({
                                    type: 'container',
                                    title: (show_tab_icons ? tabIcon + ' ' : '') + group.name,
                                    html: groupHtml,
                                    onclick: function onclick(e) {
                                        var target = e.target;
                                        if (/^(SPAN)$/.test(target.nodeName)) {
                                            if (target.hasAttribute('data-emoji')) {
                                                var char = target.getAttribute('data-emoji');
                                                console.log(add_space, char);
                                                editor.execCommand('mceInsertContent', false, char + (add_space ? ' ' : ''));
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    if (!show_groups) {
                        groupHtml += '</div>';
                        body.push({
                            type: 'container',
                            html: groupHtml,
                            onclick: function onclick(e) {
                                var target = e.target;
                                if (/^(SPAN)$/.test(target.nodeName)) {
                                    if (target.hasAttribute('data-emoji')) {
                                        var char = target.getAttribute('data-emoji');
                                        console.log(add_space, char);
                                        editor.execCommand('mceInsertContent', false, char + (add_space ? ' ' : ''));
                                    }
                                }
                            }
                        });
                    }
                    resolve(body);
                } catch (error) {
                    reject(error);
                }
            });

            function getLoadingHtml() {
                return '<img src="' + LoaderGIF + '" alt="Loading" />';
            }


            function showDialog() {
                getBody.then(function (body) {
                    var win = editor.windowManager.open({
                        autoScroll: true,
                        width: show_tab_icons ? 1000 : 1000,
                        height: 600,
                        title: editor.translate('tinymceEmoji.title'),
                        bodyType: show_groups ? 'tabPanel' : 'container',
                        layout: 'fit',
                        body: body,
                        buttons: [{
                            text: 'Close',
                            onclick: function onclick() {
                                win.close();
                            }
                        }]
                    });
                }).catch(function (error) {
                    console.log(error);
                });
            }

            editor.addCommand('emojiShowDialog', showDialog);

            editor.addButton('tinymceEmoji', {
               // text: ' ',
                icon: 'emoticons',
                cmd: 'emojiShowDialog'
            });

            editor.addMenuItem('tinymceEmoji', {
                text: 'Emoji',
                icon: 'emoticons',
                context: 'insert',
                cmd: 'emojiShowDialog'
            });
        };





        exports.default = plugin;
    }),
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = [{"name":"Symbols","subGroups":[{"name":"sub-cat","emojis":[{"codes":["0023","fe0f","20e3"],"emoji":"#️⃣","name":"hash key"},{"codes":["002a","fe0f","20e3"],"emoji":"*️⃣","name":""},{"codes":["0030","fe0f","20e3"],"emoji":"0️⃣","name":"keycap 0"},{"codes":["0031","fe0f","20e3"],"emoji":"1️⃣","name":"keycap 1"},{"codes":["0032","fe0f","20e3"],"emoji":"2️⃣","name":"keycap 2"},{"codes":["0033","fe0f","20e3"],"emoji":"3️⃣","name":"keycap 3"},{"codes":["0034","fe0f","20e3"],"emoji":"4️⃣","name":"keycap 4"},{"codes":["0035","fe0f","20e3"],"emoji":"5️⃣","name":"keycap 5"},{"codes":["0036","fe0f","20e3"],"emoji":"6️⃣","name":"keycap 6"},{"codes":["0037","fe0f","20e3"],"emoji":"7️⃣","name":"keycap 7"},{"codes":["0038","fe0f","20e3"],"emoji":"8️⃣","name":"keycap 8"},{"codes":["0039","fe0f","20e3"],"emoji":"9️⃣","name":"keycap 9"},{"codes":["00a9","fe0f"],"emoji":"©️","name":"copyright sign"},{"codes":["00ae","fe0f"],"emoji":"®️","name":"registered sign"},{"codes":["1f170","fe0f"],"emoji":"🅰️","name":"negative squared latin capital letter a"},{"codes":["1f171","fe0f"],"emoji":"🅱️","name":"negative squared latin capital letter b"},{"codes":["1f17e","fe0f"],"emoji":"🅾️","name":"negative squared latin capital letter o"},{"codes":["1f17f","fe0f"],"emoji":"🅿️","name":"negative squared latin capital letter p"},{"codes":["1f18e"],"emoji":"🆎","name":"negative squared ab"},{"codes":["1f191"],"emoji":"🆑","name":"squared cl"},{"codes":["1f192"],"emoji":"🆒","name":"squared cool"},{"codes":["1f193"],"emoji":"🆓","name":"squared free"},{"codes":["1f194"],"emoji":"🆔","name":"squared id"},{"codes":["1f195"],"emoji":"🆕","name":"squared new"},{"codes":["1f196"],"emoji":"🆖","name":"squared ng"},{"codes":["1f197"],"emoji":"🆗","name":"squared ok"},{"codes":["1f198"],"emoji":"🆘","name":"squared sos"},{"codes":["1f199"],"emoji":"🆙","name":"squared up with exclamation mark"},{"codes":["1f19a"],"emoji":"🆚","name":"squared vs"},{"codes":["1f201"],"emoji":"🈁","name":"squared katakana koko"},{"codes":["1f202","fe0f"],"emoji":"🈂️","name":"squared katakana sa"},{"codes":["1f21a"],"emoji":"🈚","name":"squared cjk unified ideograph-7121"},{"codes":["1f22f"],"emoji":"🈯","name":"squared cjk unified ideograph-6307"},{"codes":["1f232"],"emoji":"🈲","name":"squared cjk unified ideograph-7981"},{"codes":["1f233"],"emoji":"🈳","name":"squared cjk unified ideograph-7a7a"},{"codes":["1f234"],"emoji":"🈴","name":"squared cjk unified ideograph-5408"},{"codes":["1f235"],"emoji":"🈵","name":"squared cjk unified ideograph-6e80"},{"codes":["1f236"],"emoji":"🈶","name":"squared cjk unified ideograph-6709"},{"codes":["1f237","fe0f"],"emoji":"🈷️","name":"squared cjk unified ideograph-6708"},{"codes":["1f238"],"emoji":"🈸","name":"squared cjk unified ideograph-7533"},{"codes":["1f239"],"emoji":"🈹","name":"squared cjk unified ideograph-5272"},{"codes":["1f23a"],"emoji":"🈺","name":"squared cjk unified ideograph-55b6"},{"codes":["1f250"],"emoji":"🉐","name":"circled ideograph advantage"},{"codes":["1f251"],"emoji":"🉑","name":"circled ideograph accept"},{"codes":["1f3a6"],"emoji":"🎦","name":"cinema"},{"codes":["1f3e7"],"emoji":"🏧","name":"automated teller machine"},{"codes":["1f4a0"],"emoji":"💠","name":"diamond shape with a dot inside"},{"codes":["1f4b1"],"emoji":"💱","name":"currency exchange"},{"codes":["1f4b2"],"emoji":"💲","name":"heavy dollar sign"},{"codes":["1f4db"],"emoji":"📛","name":"name badge"},{"codes":["1f4f3"],"emoji":"📳","name":"vibration mode"},{"codes":["1f4f4"],"emoji":"📴","name":"mobile phone off"},{"codes":["1f4f5"],"emoji":"📵","name":"no mobile phones"},{"codes":["1f4f6"],"emoji":"📶","name":"antenna with bars"},{"codes":["1f500"],"emoji":"🔀","name":"twisted rightwards arrows"},{"codes":["1f501"],"emoji":"🔁","name":"clockwise rightwards and leftwards open circle arrows"},{"codes":["1f502"],"emoji":"🔂","name":"clockwise rightwards and leftwards open circle arrows with circled one overlay"},{"codes":["1f503"],"emoji":"🔃","name":"clockwise downwards and upwards open circle arrows"},{"codes":["1f504"],"emoji":"🔄","name":"anticlockwise downwards and upwards open circle arrows"},{"codes":["1f505"],"emoji":"🔅","name":"low brightness symbol"},{"codes":["1f506"],"emoji":"🔆","name":"high brightness symbol"},{"codes":["1f518"],"emoji":"🔘","name":"radio button"},{"codes":["1f519"],"emoji":"🔙","name":"back with leftwards arrow above"},{"codes":["1f51a"],"emoji":"🔚","name":"end with leftwards arrow above"},{"codes":["1f51b"],"emoji":"🔛","name":"on with exclamation mark with left right arrow above"},{"codes":["1f51c"],"emoji":"🔜","name":"soon with rightwards arrow above"},{"codes":["1f51d"],"emoji":"🔝","name":"top with upwards arrow above"},{"codes":["1f51e"],"emoji":"🔞","name":"no one under eighteen symbol"},{"codes":["1f51f"],"emoji":"🔟","name":"keycap ten"},{"codes":["1f520"],"emoji":"🔠","name":"input symbol for latin capital letters"},{"codes":["1f521"],"emoji":"🔡","name":"input symbol for latin small letters"},{"codes":["1f522"],"emoji":"🔢","name":"input symbol for numbers"},{"codes":["1f523"],"emoji":"🔣","name":"input symbol for symbols"},{"codes":["1f524"],"emoji":"🔤","name":"input symbol for latin letters"},{"codes":["1f52f"],"emoji":"🔯","name":"six pointed star with middle dot"},{"codes":["1f530"],"emoji":"🔰","name":"japanese symbol for beginner"},{"codes":["1f531"],"emoji":"🔱","name":"trident emblem"},{"codes":["1f532"],"emoji":"🔲","name":"black square button"},{"codes":["1f533"],"emoji":"🔳","name":"white square button"},{"codes":["1f534"],"emoji":"🔴","name":"large red circle"},{"codes":["1f535"],"emoji":"🔵","name":"large blue circle"},{"codes":["1f536"],"emoji":"🔶","name":"large orange diamond"},{"codes":["1f537"],"emoji":"🔷","name":"large blue diamond"},{"codes":["1f538"],"emoji":"🔸","name":"small orange diamond"},{"codes":["1f539"],"emoji":"🔹","name":"small blue diamond"},{"codes":["1f53a"],"emoji":"🔺","name":"up-pointing red triangle"},{"codes":["1f53b"],"emoji":"🔻","name":"down-pointing red triangle"},{"codes":["1f53c"],"emoji":"🔼","name":"up-pointing small red triangle"},{"codes":["1f53d"],"emoji":"🔽","name":"down-pointing small red triangle"},{"codes":["1f549","fe0f"],"emoji":"🕉️","name":""},{"codes":["1f54e"],"emoji":"🕎","name":"menorah with nine branches"},{"codes":["1f6ab"],"emoji":"🚫","name":"no entry sign"},{"codes":["1f6ad"],"emoji":"🚭","name":"no smoking symbol"},{"codes":["1f6ae"],"emoji":"🚮","name":"put litter in its place symbol"},{"codes":["1f6af"],"emoji":"🚯","name":"do not litter symbol"},{"codes":["1f6b0"],"emoji":"🚰","name":"potable water symbol"},{"codes":["1f6b1"],"emoji":"🚱","name":"non-potable water symbol"},{"codes":["1f6b3"],"emoji":"🚳","name":"no bicycles"},{"codes":["1f6b7"],"emoji":"🚷","name":"no pedestrians"},{"codes":["1f6b8"],"emoji":"🚸","name":"children crossing"},{"codes":["1f6b9"],"emoji":"🚹","name":"mens symbol"},{"codes":["1f6ba"],"emoji":"🚺","name":"womens symbol"},{"codes":["1f6bb"],"emoji":"🚻","name":"restroom"},{"codes":["1f6bc"],"emoji":"🚼","name":"baby symbol"},{"codes":["1f6be"],"emoji":"🚾","name":"water closet"},{"codes":["1f6c2"],"emoji":"🛂","name":"passport control"},{"codes":["1f6c3"],"emoji":"🛃","name":"customs"},{"codes":["1f6c4"],"emoji":"🛄","name":"baggage claim"},{"codes":["1f6c5"],"emoji":"🛅","name":"left luggage"},{"codes":["1f6d0"],"emoji":"🛐","name":"place of worship"},{"codes":["1f7e0"],"emoji":"🟠","name":"large orange circle"},{"codes":["1f7e1"],"emoji":"🟡","name":"large yellow circle"},{"codes":["1f7e2"],"emoji":"🟢","name":"large green circle"},{"codes":["1f7e3"],"emoji":"🟣","name":"large purple circle"},{"codes":["1f7e4"],"emoji":"🟤","name":"large brown circle"},{"codes":["1f7e5"],"emoji":"🟥","name":"large red square"},{"codes":["1f7e6"],"emoji":"🟦","name":"large blue square"},{"codes":["1f7e7"],"emoji":"🟧","name":"large orange square"},{"codes":["1f7e8"],"emoji":"🟨","name":"large yellow square"},{"codes":["1f7e9"],"emoji":"🟩","name":"large green square"},{"codes":["1f7ea"],"emoji":"🟪","name":"large purple square"},{"codes":["1f7eb"],"emoji":"🟫","name":"large brown square"},{"codes":["203c","fe0f"],"emoji":"‼️","name":"double exclamation mark"},{"codes":["2049","fe0f"],"emoji":"⁉️","name":"exclamation question mark"},{"codes":["2122","fe0f"],"emoji":"™️","name":"trade mark sign"},{"codes":["2139","fe0f"],"emoji":"ℹ️","name":"information source"},{"codes":["2194","fe0f"],"emoji":"↔️","name":"left right arrow"},{"codes":["2195","fe0f"],"emoji":"↕️","name":"up down arrow"},{"codes":["2196","fe0f"],"emoji":"↖️","name":"north west arrow"},{"codes":["2197","fe0f"],"emoji":"↗️","name":"north east arrow"},{"codes":["2198","fe0f"],"emoji":"↘️","name":"south east arrow"},{"codes":["2199","fe0f"],"emoji":"↙️","name":"south west arrow"},{"codes":["21a9","fe0f"],"emoji":"↩️","name":"leftwards arrow with hook"},{"codes":["21aa","fe0f"],"emoji":"↪️","name":"rightwards arrow with hook"},{"codes":["23cf","fe0f"],"emoji":"⏏️","name":""},{"codes":["23e9"],"emoji":"⏩","name":"black right-pointing double triangle"},{"codes":["23ea"],"emoji":"⏪","name":"black left-pointing double triangle"},{"codes":["23eb"],"emoji":"⏫","name":"black up-pointing double triangle"},{"codes":["23ec"],"emoji":"⏬","name":"black down-pointing double triangle"},{"codes":["23ed","fe0f"],"emoji":"⏭️","name":""},{"codes":["23ee","fe0f"],"emoji":"⏮️","name":""},{"codes":["23ef","fe0f"],"emoji":"⏯️","name":""},{"codes":["23f8","fe0f"],"emoji":"⏸️","name":""},{"codes":["23f9","fe0f"],"emoji":"⏹️","name":""},{"codes":["23fa","fe0f"],"emoji":"⏺️","name":""},{"codes":["24c2","fe0f"],"emoji":"Ⓜ️","name":"circled latin capital letter m"},{"codes":["25aa","fe0f"],"emoji":"▪️","name":"black small square"},{"codes":["25ab","fe0f"],"emoji":"▫️","name":"white small square"},{"codes":["25b6","fe0f"],"emoji":"▶️","name":"black right-pointing triangle"},{"codes":["25c0","fe0f"],"emoji":"◀️","name":"black left-pointing triangle"},{"codes":["25fb","fe0f"],"emoji":"◻️","name":"white medium square"},{"codes":["25fc","fe0f"],"emoji":"◼️","name":"black medium square"},{"codes":["25fd"],"emoji":"◽","name":"white medium small square"},{"codes":["25fe"],"emoji":"◾","name":"black medium small square"},{"codes":["2611","fe0f"],"emoji":"☑️","name":"ballot box with check"},{"codes":["2622","fe0f"],"emoji":"☢️","name":""},{"codes":["2623","fe0f"],"emoji":"☣️","name":""},{"codes":["2626","fe0f"],"emoji":"☦️","name":""},{"codes":["262a","fe0f"],"emoji":"☪️","name":""},{"codes":["262e","fe0f"],"emoji":"☮️","name":""},{"codes":["262f","fe0f"],"emoji":"☯️","name":""},{"codes":["2638","fe0f"],"emoji":"☸️","name":""},{"codes":["2640","fe0f"],"emoji":"♀️","name":""},{"codes":["2642","fe0f"],"emoji":"♂️","name":""},{"codes":["2648"],"emoji":"♈","name":"aries"},{"codes":["2649"],"emoji":"♉","name":"taurus"},{"codes":["264a"],"emoji":"♊","name":"gemini"},{"codes":["264b"],"emoji":"♋","name":"cancer"},{"codes":["264c"],"emoji":"♌","name":"leo"},{"codes":["264d"],"emoji":"♍","name":"virgo"},{"codes":["264e"],"emoji":"♎","name":"libra"},{"codes":["264f"],"emoji":"♏","name":"scorpius"},{"codes":["2650"],"emoji":"♐","name":"sagittarius"},{"codes":["2651"],"emoji":"♑","name":"capricorn"},{"codes":["2652"],"emoji":"♒","name":"aquarius"},{"codes":["2653"],"emoji":"♓","name":"pisces"},{"codes":["267b","fe0f"],"emoji":"♻️","name":"black universal recycling symbol"},{"codes":["267e","fe0f"],"emoji":"♾️","name":""},{"codes":["267f"],"emoji":"♿","name":"wheelchair symbol"},{"codes":["2695","fe0f"],"emoji":"⚕️","name":""},{"codes":["269b","fe0f"],"emoji":"⚛️","name":""},{"codes":["269c","fe0f"],"emoji":"⚜️","name":""},{"codes":["26a0","fe0f"],"emoji":"⚠️","name":"warning sign"},{"codes":["26a7","fe0f"],"emoji":"⚧️","name":""},{"codes":["26aa"],"emoji":"⚪","name":"medium white circle"},{"codes":["26ab"],"emoji":"⚫","name":"medium black circle"},{"codes":["26ce"],"emoji":"⛎","name":"ophiuchus"},{"codes":["26d4"],"emoji":"⛔","name":"no entry"},{"codes":["2705"],"emoji":"✅","name":"white heavy check mark"},{"codes":["2714","fe0f"],"emoji":"✔️","name":"heavy check mark"},{"codes":["2716","fe0f"],"emoji":"✖️","name":"heavy multiplication x"},{"codes":["271d","fe0f"],"emoji":"✝️","name":""},{"codes":["2721","fe0f"],"emoji":"✡️","name":""},{"codes":["2733","fe0f"],"emoji":"✳️","name":"eight spoked asterisk"},{"codes":["2734","fe0f"],"emoji":"✴️","name":"eight pointed black star"},{"codes":["2747","fe0f"],"emoji":"❇️","name":"sparkle"},{"codes":["274c"],"emoji":"❌","name":"cross mark"},{"codes":["274e"],"emoji":"❎","name":"negative squared cross mark"},{"codes":["2753"],"emoji":"❓","name":"black question mark ornament"},{"codes":["2754"],"emoji":"❔","name":"white question mark ornament"},{"codes":["2755"],"emoji":"❕","name":"white exclamation mark ornament"},{"codes":["2757"],"emoji":"❗","name":"heavy exclamation mark symbol"},{"codes":["2795"],"emoji":"➕","name":"heavy plus sign"},{"codes":["2796"],"emoji":"➖","name":"heavy minus sign"},{"codes":["2797"],"emoji":"➗","name":"heavy division sign"},{"codes":["27a1","fe0f"],"emoji":"➡️","name":"black rightwards arrow"},{"codes":["27b0"],"emoji":"➰","name":"curly loop"},{"codes":["27bf"],"emoji":"➿","name":"double curly loop"},{"codes":["2934","fe0f"],"emoji":"⤴️","name":"arrow pointing rightwards then curving upwards"},{"codes":["2935","fe0f"],"emoji":"⤵️","name":"arrow pointing rightwards then curving downwards"},{"codes":["2b05","fe0f"],"emoji":"⬅️","name":"leftwards black arrow"},{"codes":["2b06","fe0f"],"emoji":"⬆️","name":"upwards black arrow"},{"codes":["2b07","fe0f"],"emoji":"⬇️","name":"downwards black arrow"},{"codes":["2b1b"],"emoji":"⬛","name":"black large square"},{"codes":["2b1c"],"emoji":"⬜","name":"white large square"},{"codes":["2b55"],"emoji":"⭕","name":"heavy large circle"},{"codes":["3030","fe0f"],"emoji":"〰️","name":"wavy dash"},{"codes":["303d","fe0f"],"emoji":"〽️","name":"part alternation mark"},{"codes":["3297","fe0f"],"emoji":"㊗️","name":"circled ideograph congratulation"},{"codes":["3299","fe0f"],"emoji":"㊙️","name":"circled ideograph secret"}]}]},{"name":"Activities","subGroups":[{"name":"sub-cat","emojis":[{"codes":["1f004"],"emoji":"🀄","name":"mahjong tile red dragon"},{"codes":["1f0cf"],"emoji":"🃏","name":"playing card black joker"},{"codes":["1f380"],"emoji":"🎀","name":"ribbon"},{"codes":["1f381"],"emoji":"🎁","name":"wrapped present"},{"codes":["1f383"],"emoji":"🎃","name":"jack-o-lantern"},{"codes":["1f384"],"emoji":"🎄","name":"christmas tree"},{"codes":["1f386"],"emoji":"🎆","name":"fireworks"},{"codes":["1f387"],"emoji":"🎇","name":"firework sparkler"},{"codes":["1f388"],"emoji":"🎈","name":"balloon"},{"codes":["1f389"],"emoji":"🎉","name":"party popper"},{"codes":["1f38a"],"emoji":"🎊","name":"confetti ball"},{"codes":["1f38b"],"emoji":"🎋","name":"tanabata tree"},{"codes":["1f38d"],"emoji":"🎍","name":"pine decoration"},{"codes":["1f38e"],"emoji":"🎎","name":"japanese dolls"},{"codes":["1f38f"],"emoji":"🎏","name":"carp streamer"},{"codes":["1f390"],"emoji":"🎐","name":"wind chime"},{"codes":["1f391"],"emoji":"🎑","name":"moon viewing ceremony"},{"codes":["1f396","fe0f"],"emoji":"🎖️","name":""},{"codes":["1f397","fe0f"],"emoji":"🎗️","name":""},{"codes":["1f39f","fe0f"],"emoji":"🎟️","name":""},{"codes":["1f3a3"],"emoji":"🎣","name":"fishing pole and fish"},{"codes":["1f3a8"],"emoji":"🎨","name":"artist palette"},{"codes":["1f3ab"],"emoji":"🎫","name":"ticket"},{"codes":["1f3ad"],"emoji":"🎭","name":"performing arts"},{"codes":["1f3ae"],"emoji":"🎮","name":"video game"},{"codes":["1f3af"],"emoji":"🎯","name":"direct hit"},{"codes":["1f3b0"],"emoji":"🎰","name":"slot machine"},{"codes":["1f3b1"],"emoji":"🎱","name":"billiards"},{"codes":["1f3b2"],"emoji":"🎲","name":"game die"},{"codes":["1f3b3"],"emoji":"🎳","name":"bowling"},{"codes":["1f3b4"],"emoji":"🎴","name":"flower playing cards"},{"codes":["1f3bd"],"emoji":"🎽","name":"running shirt with sash"},{"codes":["1f3be"],"emoji":"🎾","name":"tennis racquet and ball"},{"codes":["1f3bf"],"emoji":"🎿","name":"ski and ski boot"},{"codes":["1f3c0"],"emoji":"🏀","name":"basketball and hoop"},{"codes":["1f3c5"],"emoji":"🏅","name":"sports medal"},{"codes":["1f3c6"],"emoji":"🏆","name":"trophy"},{"codes":["1f3c8"],"emoji":"🏈","name":"american football"},{"codes":["1f3c9"],"emoji":"🏉","name":"rugby football"},{"codes":["1f3cf"],"emoji":"🏏","name":"cricket bat and ball"},{"codes":["1f3d0"],"emoji":"🏐","name":"volleyball"},{"codes":["1f3d1"],"emoji":"🏑","name":"field hockey stick and ball"},{"codes":["1f3d2"],"emoji":"🏒","name":"ice hockey stick and puck"},{"codes":["1f3d3"],"emoji":"🏓","name":"table tennis paddle and ball"},{"codes":["1f3f8"],"emoji":"🏸","name":"badminton racquet and shuttlecock"},{"codes":["1f52e"],"emoji":"🔮","name":"crystal ball"},{"codes":["1f579","fe0f"],"emoji":"🕹️","name":""},{"codes":["1f5bc","fe0f"],"emoji":"🖼️","name":""},{"codes":["1f6f7"],"emoji":"🛷","name":"sled"},{"codes":["1f93f"],"emoji":"🤿","name":"diving mask"},{"codes":["1f945"],"emoji":"🥅","name":"goal net"},{"codes":["1f947"],"emoji":"🥇","name":"first place medal"},{"codes":["1f948"],"emoji":"🥈","name":"second place medal"},{"codes":["1f949"],"emoji":"🥉","name":"third place medal"},{"codes":["1f94a"],"emoji":"🥊","name":"boxing glove"},{"codes":["1f94b"],"emoji":"🥋","name":"martial arts uniform"},{"codes":["1f94c"],"emoji":"🥌","name":"curling stone"},{"codes":["1f94d"],"emoji":"🥍","name":"lacrosse stick and ball"},{"codes":["1f94e"],"emoji":"🥎","name":"softball"},{"codes":["1f94f"],"emoji":"🥏","name":"flying disc"},{"codes":["1f9e7"],"emoji":"🧧","name":"red gift envelope"},{"codes":["1f9e8"],"emoji":"🧨","name":"firecracker"},{"codes":["1f9e9"],"emoji":"🧩","name":"jigsaw puzzle piece"},{"codes":["1f9f5"],"emoji":"🧵","name":"spool of thread"},{"codes":["1f9f6"],"emoji":"🧶","name":"ball of yarn"},{"codes":["1f9f8"],"emoji":"🧸","name":"teddy bear"},{"codes":["1f9ff"],"emoji":"🧿","name":"nazar amulet"},{"codes":["1fa80"],"emoji":"🪀","name":"yo-yo"},{"codes":["1fa81"],"emoji":"🪁","name":"kite"},{"codes":["1fa84"],"emoji":"🪄","name":"magic wand"},{"codes":["1fa85"],"emoji":"🪅","name":"pinata"},{"codes":["1fa86"],"emoji":"🪆","name":"nesting dolls"},{"codes":["1faa1"],"emoji":"🪡","name":"sewing needle"},{"codes":["1faa2"],"emoji":"🪢","name":"knot"},{"codes":["265f","fe0f"],"emoji":"♟️","name":""},{"codes":["2660","fe0f"],"emoji":"♠️","name":"black spade suit"},{"codes":["2663","fe0f"],"emoji":"♣️","name":"black club suit"},{"codes":["2665","fe0f"],"emoji":"♥️","name":"black heart suit"},{"codes":["2666","fe0f"],"emoji":"♦️","name":"black diamond suit"},{"codes":["26bd"],"emoji":"⚽","name":"soccer ball"},{"codes":["26be"],"emoji":"⚾","name":"baseball"},{"codes":["26f3"],"emoji":"⛳","name":"flag in hole"},{"codes":["26f8","fe0f"],"emoji":"⛸️","name":""},{"codes":["2728"],"emoji":"✨","name":"sparkles"}]}]},{"name":"Flags","subGroups":[{"name":"sub-cat","emojis":[{"codes":["1f1e6","1f1e8"],"emoji":"🇦🇨","name":"ascension island flag"},{"codes":["1f1e6","1f1e9"],"emoji":"🇦🇩","name":"andorra flag"},{"codes":["1f1e6","1f1ea"],"emoji":"🇦🇪","name":"united arab emirates flag"},{"codes":["1f1e6","1f1eb"],"emoji":"🇦🇫","name":"afghanistan flag"},{"codes":["1f1e6","1f1ec"],"emoji":"🇦🇬","name":"antigua &amp; barbuda flag"},{"codes":["1f1e6","1f1ee"],"emoji":"🇦🇮","name":"anguilla flag"},{"codes":["1f1e6","1f1f1"],"emoji":"🇦🇱","name":"albania flag"},{"codes":["1f1e6","1f1f2"],"emoji":"🇦🇲","name":"armenia flag"},{"codes":["1f1e6","1f1f4"],"emoji":"🇦🇴","name":"angola flag"},{"codes":["1f1e6","1f1f6"],"emoji":"🇦🇶","name":"antarctica flag"},{"codes":["1f1e6","1f1f7"],"emoji":"🇦🇷","name":"argentina flag"},{"codes":["1f1e6","1f1f8"],"emoji":"🇦🇸","name":"american samoa flag"},{"codes":["1f1e6","1f1f9"],"emoji":"🇦🇹","name":"austria flag"},{"codes":["1f1e6","1f1fa"],"emoji":"🇦🇺","name":"australia flag"},{"codes":["1f1e6","1f1fc"],"emoji":"🇦🇼","name":"aruba flag"},{"codes":["1f1e6","1f1fd"],"emoji":"🇦🇽","name":"åland islands flag"},{"codes":["1f1e6","1f1ff"],"emoji":"🇦🇿","name":"azerbaijan flag"},{"codes":["1f1e7","1f1e6"],"emoji":"🇧🇦","name":"bosnia &amp; herzegovina flag"},{"codes":["1f1e7","1f1e7"],"emoji":"🇧🇧","name":"barbados flag"},{"codes":["1f1e7","1f1e9"],"emoji":"🇧🇩","name":"bangladesh flag"},{"codes":["1f1e7","1f1ea"],"emoji":"🇧🇪","name":"belgium flag"},{"codes":["1f1e7","1f1eb"],"emoji":"🇧🇫","name":"burkina faso flag"},{"codes":["1f1e7","1f1ec"],"emoji":"🇧🇬","name":"bulgaria flag"},{"codes":["1f1e7","1f1ed"],"emoji":"🇧🇭","name":"bahrain flag"},{"codes":["1f1e7","1f1ee"],"emoji":"🇧🇮","name":"burundi flag"},{"codes":["1f1e7","1f1ef"],"emoji":"🇧🇯","name":"benin flag"},{"codes":["1f1e7","1f1f1"],"emoji":"🇧🇱","name":"st. barthélemy flag"},{"codes":["1f1e7","1f1f2"],"emoji":"🇧🇲","name":"bermuda flag"},{"codes":["1f1e7","1f1f3"],"emoji":"🇧🇳","name":"brunei flag"},{"codes":["1f1e7","1f1f4"],"emoji":"🇧🇴","name":"bolivia flag"},{"codes":["1f1e7","1f1f6"],"emoji":"🇧🇶","name":"caribbean netherlands flag"},{"codes":["1f1e7","1f1f7"],"emoji":"🇧🇷","name":"brazil flag"},{"codes":["1f1e7","1f1f8"],"emoji":"🇧🇸","name":"bahamas flag"},{"codes":["1f1e7","1f1f9"],"emoji":"🇧🇹","name":"bhutan flag"},{"codes":["1f1e7","1f1fb"],"emoji":"🇧🇻","name":"bouvet island flag"},{"codes":["1f1e7","1f1fc"],"emoji":"🇧🇼","name":"botswana flag"},{"codes":["1f1e7","1f1fe"],"emoji":"🇧🇾","name":"belarus flag"},{"codes":["1f1e7","1f1ff"],"emoji":"🇧🇿","name":"belize flag"},{"codes":["1f1e8","1f1e6"],"emoji":"🇨🇦","name":"canada flag"},{"codes":["1f1e8","1f1e8"],"emoji":"🇨🇨","name":"cocos (keeling) islands flag"},{"codes":["1f1e8","1f1e9"],"emoji":"🇨🇩","name":"congo - kinshasa flag"},{"codes":["1f1e8","1f1eb"],"emoji":"🇨🇫","name":"central african republic flag"},{"codes":["1f1e8","1f1ec"],"emoji":"🇨🇬","name":"congo - brazzaville flag"},{"codes":["1f1e8","1f1ed"],"emoji":"🇨🇭","name":"switzerland flag"},{"codes":["1f1e8","1f1ee"],"emoji":"🇨🇮","name":"côte d’ivoire flag"},{"codes":["1f1e8","1f1f0"],"emoji":"🇨🇰","name":"cook islands flag"},{"codes":["1f1e8","1f1f1"],"emoji":"🇨🇱","name":"chile flag"},{"codes":["1f1e8","1f1f2"],"emoji":"🇨🇲","name":"cameroon flag"},{"codes":["1f1e8","1f1f3"],"emoji":"🇨🇳","name":"china flag"},{"codes":["1f1e8","1f1f4"],"emoji":"🇨🇴","name":"colombia flag"},{"codes":["1f1e8","1f1f5"],"emoji":"🇨🇵","name":"clipperton island flag"},{"codes":["1f1e8","1f1f7"],"emoji":"🇨🇷","name":"costa rica flag"},{"codes":["1f1e8","1f1fa"],"emoji":"🇨🇺","name":"cuba flag"},{"codes":["1f1e8","1f1fb"],"emoji":"🇨🇻","name":"cape verde flag"},{"codes":["1f1e8","1f1fc"],"emoji":"🇨🇼","name":"curaçao flag"},{"codes":["1f1e8","1f1fd"],"emoji":"🇨🇽","name":"christmas island flag"},{"codes":["1f1e8","1f1fe"],"emoji":"🇨🇾","name":"cyprus flag"},{"codes":["1f1e8","1f1ff"],"emoji":"🇨🇿","name":"czechia flag"},{"codes":["1f1e9","1f1ea"],"emoji":"🇩🇪","name":"germany flag"},{"codes":["1f1e9","1f1ec"],"emoji":"🇩🇬","name":"diego garcia flag"},{"codes":["1f1e9","1f1ef"],"emoji":"🇩🇯","name":"djibouti flag"},{"codes":["1f1e9","1f1f0"],"emoji":"🇩🇰","name":"denmark flag"},{"codes":["1f1e9","1f1f2"],"emoji":"🇩🇲","name":"dominica flag"},{"codes":["1f1e9","1f1f4"],"emoji":"🇩🇴","name":"dominican republic flag"},{"codes":["1f1e9","1f1ff"],"emoji":"🇩🇿","name":"algeria flag"},{"codes":["1f1ea","1f1e6"],"emoji":"🇪🇦","name":"ceuta &amp; melilla flag"},{"codes":["1f1ea","1f1e8"],"emoji":"🇪🇨","name":"ecuador flag"},{"codes":["1f1ea","1f1ea"],"emoji":"🇪🇪","name":"estonia flag"},{"codes":["1f1ea","1f1ec"],"emoji":"🇪🇬","name":"egypt flag"},{"codes":["1f1ea","1f1ed"],"emoji":"🇪🇭","name":"western sahara flag"},{"codes":["1f1ea","1f1f7"],"emoji":"🇪🇷","name":"eritrea flag"},{"codes":["1f1ea","1f1f8"],"emoji":"🇪🇸","name":"spain flag"},{"codes":["1f1ea","1f1f9"],"emoji":"🇪🇹","name":"ethiopia flag"},{"codes":["1f1ea","1f1fa"],"emoji":"🇪🇺","name":"european union flag"},{"codes":["1f1eb","1f1ee"],"emoji":"🇫🇮","name":"finland flag"},{"codes":["1f1eb","1f1ef"],"emoji":"🇫🇯","name":"fiji flag"},{"codes":["1f1eb","1f1f0"],"emoji":"🇫🇰","name":"falkland islands flag"},{"codes":["1f1eb","1f1f2"],"emoji":"🇫🇲","name":"micronesia flag"},{"codes":["1f1eb","1f1f4"],"emoji":"🇫🇴","name":"faroe islands flag"},{"codes":["1f1eb","1f1f7"],"emoji":"🇫🇷","name":"france flag"},{"codes":["1f1ec","1f1e6"],"emoji":"🇬🇦","name":"gabon flag"},{"codes":["1f1ec","1f1e7"],"emoji":"🇬🇧","name":"united kingdom flag"},{"codes":["1f1ec","1f1e9"],"emoji":"🇬🇩","name":"grenada flag"},{"codes":["1f1ec","1f1ea"],"emoji":"🇬🇪","name":"georgia flag"},{"codes":["1f1ec","1f1eb"],"emoji":"🇬🇫","name":"french guiana flag"},{"codes":["1f1ec","1f1ec"],"emoji":"🇬🇬","name":"guernsey flag"},{"codes":["1f1ec","1f1ed"],"emoji":"🇬🇭","name":"ghana flag"},{"codes":["1f1ec","1f1ee"],"emoji":"🇬🇮","name":"gibraltar flag"},{"codes":["1f1ec","1f1f1"],"emoji":"🇬🇱","name":"greenland flag"},{"codes":["1f1ec","1f1f2"],"emoji":"🇬🇲","name":"gambia flag"},{"codes":["1f1ec","1f1f3"],"emoji":"🇬🇳","name":"guinea flag"},{"codes":["1f1ec","1f1f5"],"emoji":"🇬🇵","name":"guadeloupe flag"},{"codes":["1f1ec","1f1f6"],"emoji":"🇬🇶","name":"equatorial guinea flag"},{"codes":["1f1ec","1f1f7"],"emoji":"🇬🇷","name":"greece flag"},{"codes":["1f1ec","1f1f8"],"emoji":"🇬🇸","name":"south georgia &amp; south sandwich islands flag"},{"codes":["1f1ec","1f1f9"],"emoji":"🇬🇹","name":"guatemala flag"},{"codes":["1f1ec","1f1fa"],"emoji":"🇬🇺","name":"guam flag"},{"codes":["1f1ec","1f1fc"],"emoji":"🇬🇼","name":"guinea-bissau flag"},{"codes":["1f1ec","1f1fe"],"emoji":"🇬🇾","name":"guyana flag"},{"codes":["1f1ed","1f1f0"],"emoji":"🇭🇰","name":"hong kong sar china flag"},{"codes":["1f1ed","1f1f2"],"emoji":"🇭🇲","name":"heard &amp; mcdonald islands flag"},{"codes":["1f1ed","1f1f3"],"emoji":"🇭🇳","name":"honduras flag"},{"codes":["1f1ed","1f1f7"],"emoji":"🇭🇷","name":"croatia flag"},{"codes":["1f1ed","1f1f9"],"emoji":"🇭🇹","name":"haiti flag"},{"codes":["1f1ed","1f1fa"],"emoji":"🇭🇺","name":"hungary flag"},{"codes":["1f1ee","1f1e8"],"emoji":"🇮🇨","name":"canary islands flag"},{"codes":["1f1ee","1f1e9"],"emoji":"🇮🇩","name":"indonesia flag"},{"codes":["1f1ee","1f1ea"],"emoji":"🇮🇪","name":"ireland flag"},{"codes":["1f1ee","1f1f1"],"emoji":"🇮🇱","name":"israel flag"},{"codes":["1f1ee","1f1f2"],"emoji":"🇮🇲","name":"isle of man flag"},{"codes":["1f1ee","1f1f3"],"emoji":"🇮🇳","name":"india flag"},{"codes":["1f1ee","1f1f4"],"emoji":"🇮🇴","name":"british indian ocean territory flag"},{"codes":["1f1ee","1f1f6"],"emoji":"🇮🇶","name":"iraq flag"},{"codes":["1f1ee","1f1f7"],"emoji":"🇮🇷","name":"iran flag"},{"codes":["1f1ee","1f1f8"],"emoji":"🇮🇸","name":"iceland flag"},{"codes":["1f1ee","1f1f9"],"emoji":"🇮🇹","name":"italy flag"},{"codes":["1f1ef","1f1ea"],"emoji":"🇯🇪","name":"jersey flag"},{"codes":["1f1ef","1f1f2"],"emoji":"🇯🇲","name":"jamaica flag"},{"codes":["1f1ef","1f1f4"],"emoji":"🇯🇴","name":"jordan flag"},{"codes":["1f1ef","1f1f5"],"emoji":"🇯🇵","name":"japan flag"},{"codes":["1f1f0","1f1ea"],"emoji":"🇰🇪","name":"kenya flag"},{"codes":["1f1f0","1f1ec"],"emoji":"🇰🇬","name":"kyrgyzstan flag"},{"codes":["1f1f0","1f1ed"],"emoji":"🇰🇭","name":"cambodia flag"},{"codes":["1f1f0","1f1ee"],"emoji":"🇰🇮","name":"kiribati flag"},{"codes":["1f1f0","1f1f2"],"emoji":"🇰🇲","name":"comoros flag"},{"codes":["1f1f0","1f1f3"],"emoji":"🇰🇳","name":"st. kitts &amp; nevis flag"},{"codes":["1f1f0","1f1f5"],"emoji":"🇰🇵","name":"north korea flag"},{"codes":["1f1f0","1f1f7"],"emoji":"🇰🇷","name":"south korea flag"},{"codes":["1f1f0","1f1fc"],"emoji":"🇰🇼","name":"kuwait flag"},{"codes":["1f1f0","1f1fe"],"emoji":"🇰🇾","name":"cayman islands flag"},{"codes":["1f1f0","1f1ff"],"emoji":"🇰🇿","name":"kazakhstan flag"},{"codes":["1f1f1","1f1e6"],"emoji":"🇱🇦","name":"laos flag"},{"codes":["1f1f1","1f1e7"],"emoji":"🇱🇧","name":"lebanon flag"},{"codes":["1f1f1","1f1e8"],"emoji":"🇱🇨","name":"st. lucia flag"},{"codes":["1f1f1","1f1ee"],"emoji":"🇱🇮","name":"liechtenstein flag"},{"codes":["1f1f1","1f1f0"],"emoji":"🇱🇰","name":"sri lanka flag"},{"codes":["1f1f1","1f1f7"],"emoji":"🇱🇷","name":"liberia flag"},{"codes":["1f1f1","1f1f8"],"emoji":"🇱🇸","name":"lesotho flag"},{"codes":["1f1f1","1f1f9"],"emoji":"🇱🇹","name":"lithuania flag"},{"codes":["1f1f1","1f1fa"],"emoji":"🇱🇺","name":"luxembourg flag"},{"codes":["1f1f1","1f1fb"],"emoji":"🇱🇻","name":"latvia flag"},{"codes":["1f1f1","1f1fe"],"emoji":"🇱🇾","name":"libya flag"},{"codes":["1f1f2","1f1e6"],"emoji":"🇲🇦","name":"morocco flag"},{"codes":["1f1f2","1f1e8"],"emoji":"🇲🇨","name":"monaco flag"},{"codes":["1f1f2","1f1e9"],"emoji":"🇲🇩","name":"moldova flag"},{"codes":["1f1f2","1f1ea"],"emoji":"🇲🇪","name":"montenegro flag"},{"codes":["1f1f2","1f1eb"],"emoji":"🇲🇫","name":"st. martin flag"},{"codes":["1f1f2","1f1ec"],"emoji":"🇲🇬","name":"madagascar flag"},{"codes":["1f1f2","1f1ed"],"emoji":"🇲🇭","name":"marshall islands flag"},{"codes":["1f1f2","1f1f0"],"emoji":"🇲🇰","name":"north macedonia flag"},{"codes":["1f1f2","1f1f1"],"emoji":"🇲🇱","name":"mali flag"},{"codes":["1f1f2","1f1f2"],"emoji":"🇲🇲","name":"myanmar (burma) flag"},{"codes":["1f1f2","1f1f3"],"emoji":"🇲🇳","name":"mongolia flag"},{"codes":["1f1f2","1f1f4"],"emoji":"🇲🇴","name":"macao sar china flag"},{"codes":["1f1f2","1f1f5"],"emoji":"🇲🇵","name":"northern mariana islands flag"},{"codes":["1f1f2","1f1f6"],"emoji":"🇲🇶","name":"martinique flag"},{"codes":["1f1f2","1f1f7"],"emoji":"🇲🇷","name":"mauritania flag"},{"codes":["1f1f2","1f1f8"],"emoji":"🇲🇸","name":"montserrat flag"},{"codes":["1f1f2","1f1f9"],"emoji":"🇲🇹","name":"malta flag"},{"codes":["1f1f2","1f1fa"],"emoji":"🇲🇺","name":"mauritius flag"},{"codes":["1f1f2","1f1fb"],"emoji":"🇲🇻","name":"maldives flag"},{"codes":["1f1f2","1f1fc"],"emoji":"🇲🇼","name":"malawi flag"},{"codes":["1f1f2","1f1fd"],"emoji":"🇲🇽","name":"mexico flag"},{"codes":["1f1f2","1f1fe"],"emoji":"🇲🇾","name":"malaysia flag"},{"codes":["1f1f2","1f1ff"],"emoji":"🇲🇿","name":"mozambique flag"},{"codes":["1f1f3","1f1e6"],"emoji":"🇳🇦","name":"namibia flag"},{"codes":["1f1f3","1f1e8"],"emoji":"🇳🇨","name":"new caledonia flag"},{"codes":["1f1f3","1f1ea"],"emoji":"🇳🇪","name":"niger flag"},{"codes":["1f1f3","1f1eb"],"emoji":"🇳🇫","name":"norfolk island flag"},{"codes":["1f1f3","1f1ec"],"emoji":"🇳🇬","name":"nigeria flag"},{"codes":["1f1f3","1f1ee"],"emoji":"🇳🇮","name":"nicaragua flag"},{"codes":["1f1f3","1f1f1"],"emoji":"🇳🇱","name":"netherlands flag"},{"codes":["1f1f3","1f1f4"],"emoji":"🇳🇴","name":"norway flag"},{"codes":["1f1f3","1f1f5"],"emoji":"🇳🇵","name":"nepal flag"},{"codes":["1f1f3","1f1f7"],"emoji":"🇳🇷","name":"nauru flag"},{"codes":["1f1f3","1f1fa"],"emoji":"🇳🇺","name":"niue flag"},{"codes":["1f1f3","1f1ff"],"emoji":"🇳🇿","name":"new zealand flag"},{"codes":["1f1f4","1f1f2"],"emoji":"🇴🇲","name":"oman flag"},{"codes":["1f1f5","1f1e6"],"emoji":"🇵🇦","name":"panama flag"},{"codes":["1f1f5","1f1ea"],"emoji":"🇵🇪","name":"peru flag"},{"codes":["1f1f5","1f1eb"],"emoji":"🇵🇫","name":"french polynesia flag"},{"codes":["1f1f5","1f1ec"],"emoji":"🇵🇬","name":"papua new guinea flag"},{"codes":["1f1f5","1f1ed"],"emoji":"🇵🇭","name":"philippines flag"},{"codes":["1f1f5","1f1f0"],"emoji":"🇵🇰","name":"pakistan flag"},{"codes":["1f1f5","1f1f1"],"emoji":"🇵🇱","name":"poland flag"},{"codes":["1f1f5","1f1f2"],"emoji":"🇵🇲","name":"st. pierre &amp; miquelon flag"},{"codes":["1f1f5","1f1f3"],"emoji":"🇵🇳","name":"pitcairn islands flag"},{"codes":["1f1f5","1f1f7"],"emoji":"🇵🇷","name":"puerto rico flag"},{"codes":["1f1f5","1f1f8"],"emoji":"🇵🇸","name":"palestinian territories flag"},{"codes":["1f1f5","1f1f9"],"emoji":"🇵🇹","name":"portugal flag"},{"codes":["1f1f5","1f1fc"],"emoji":"🇵🇼","name":"palau flag"},{"codes":["1f1f5","1f1fe"],"emoji":"🇵🇾","name":"paraguay flag"},{"codes":["1f1f6","1f1e6"],"emoji":"🇶🇦","name":"qatar flag"},{"codes":["1f1f7","1f1ea"],"emoji":"🇷🇪","name":"réunion flag"},{"codes":["1f1f7","1f1f4"],"emoji":"🇷🇴","name":"romania flag"},{"codes":["1f1f7","1f1f8"],"emoji":"🇷🇸","name":"serbia flag"},{"codes":["1f1f7","1f1fa"],"emoji":"🇷🇺","name":"russia flag"},{"codes":["1f1f7","1f1fc"],"emoji":"🇷🇼","name":"rwanda flag"},{"codes":["1f1f8","1f1e6"],"emoji":"🇸🇦","name":"saudi arabia flag"},{"codes":["1f1f8","1f1e7"],"emoji":"🇸🇧","name":"solomon islands flag"},{"codes":["1f1f8","1f1e8"],"emoji":"🇸🇨","name":"seychelles flag"},{"codes":["1f1f8","1f1e9"],"emoji":"🇸🇩","name":"sudan flag"},{"codes":["1f1f8","1f1ea"],"emoji":"🇸🇪","name":"sweden flag"},{"codes":["1f1f8","1f1ec"],"emoji":"🇸🇬","name":"singapore flag"},{"codes":["1f1f8","1f1ed"],"emoji":"🇸🇭","name":"st. helena flag"},{"codes":["1f1f8","1f1ee"],"emoji":"🇸🇮","name":"slovenia flag"},{"codes":["1f1f8","1f1ef"],"emoji":"🇸🇯","name":"svalbard &amp; jan mayen flag"},{"codes":["1f1f8","1f1f0"],"emoji":"🇸🇰","name":"slovakia flag"},{"codes":["1f1f8","1f1f1"],"emoji":"🇸🇱","name":"sierra leone flag"},{"codes":["1f1f8","1f1f2"],"emoji":"🇸🇲","name":"san marino flag"},{"codes":["1f1f8","1f1f3"],"emoji":"🇸🇳","name":"senegal flag"},{"codes":["1f1f8","1f1f4"],"emoji":"🇸🇴","name":"somalia flag"},{"codes":["1f1f8","1f1f7"],"emoji":"🇸🇷","name":"suriname flag"},{"codes":["1f1f8","1f1f8"],"emoji":"🇸🇸","name":"south sudan flag"},{"codes":["1f1f8","1f1f9"],"emoji":"🇸🇹","name":"são tomé &amp; príncipe flag"},{"codes":["1f1f8","1f1fb"],"emoji":"🇸🇻","name":"el salvador flag"},{"codes":["1f1f8","1f1fd"],"emoji":"🇸🇽","name":"sint maarten flag"},{"codes":["1f1f8","1f1fe"],"emoji":"🇸🇾","name":"syria flag"},{"codes":["1f1f8","1f1ff"],"emoji":"🇸🇿","name":"eswatini flag"},{"codes":["1f1f9","1f1e6"],"emoji":"🇹🇦","name":"tristan da cunha flag"},{"codes":["1f1f9","1f1e8"],"emoji":"🇹🇨","name":"turks &amp; caicos islands flag"},{"codes":["1f1f9","1f1e9"],"emoji":"🇹🇩","name":"chad flag"},{"codes":["1f1f9","1f1eb"],"emoji":"🇹🇫","name":"french southern territories flag"},{"codes":["1f1f9","1f1ec"],"emoji":"🇹🇬","name":"togo flag"},{"codes":["1f1f9","1f1ed"],"emoji":"🇹🇭","name":"thailand flag"},{"codes":["1f1f9","1f1ef"],"emoji":"🇹🇯","name":"tajikistan flag"},{"codes":["1f1f9","1f1f0"],"emoji":"🇹🇰","name":"tokelau flag"},{"codes":["1f1f9","1f1f1"],"emoji":"🇹🇱","name":"timor-leste flag"},{"codes":["1f1f9","1f1f2"],"emoji":"🇹🇲","name":"turkmenistan flag"},{"codes":["1f1f9","1f1f3"],"emoji":"🇹🇳","name":"tunisia flag"},{"codes":["1f1f9","1f1f4"],"emoji":"🇹🇴","name":"tonga flag"},{"codes":["1f1f9","1f1f7"],"emoji":"🇹🇷","name":"turkey flag"},{"codes":["1f1f9","1f1f9"],"emoji":"🇹🇹","name":"trinidad &amp; tobago flag"},{"codes":["1f1f9","1f1fb"],"emoji":"🇹🇻","name":"tuvalu flag"},{"codes":["1f1f9","1f1fc"],"emoji":"🇹🇼","name":"taiwan flag"},{"codes":["1f1f9","1f1ff"],"emoji":"🇹🇿","name":"tanzania flag"},{"codes":["1f1fa","1f1e6"],"emoji":"🇺🇦","name":"ukraine flag"},{"codes":["1f1fa","1f1ec"],"emoji":"🇺🇬","name":"uganda flag"},{"codes":["1f1fa","1f1f2"],"emoji":"🇺🇲","name":"u.s. outlying islands flag"},{"codes":["1f1fa","1f1f3"],"emoji":"🇺🇳","name":"united nations flag"},{"codes":["1f1fa","1f1f8"],"emoji":"🇺🇸","name":"united states flag"},{"codes":["1f1fa","1f1fe"],"emoji":"🇺🇾","name":"uruguay flag"},{"codes":["1f1fa","1f1ff"],"emoji":"🇺🇿","name":"uzbekistan flag"},{"codes":["1f1fb","1f1e6"],"emoji":"🇻🇦","name":"vatican city flag"},{"codes":["1f1fb","1f1e8"],"emoji":"🇻🇨","name":"st. vincent &amp; grenadines flag"},{"codes":["1f1fb","1f1ea"],"emoji":"🇻🇪","name":"venezuela flag"},{"codes":["1f1fb","1f1ec"],"emoji":"🇻🇬","name":"british virgin islands flag"},{"codes":["1f1fb","1f1ee"],"emoji":"🇻🇮","name":"u.s. virgin islands flag"},{"codes":["1f1fb","1f1f3"],"emoji":"🇻🇳","name":"vietnam flag"},{"codes":["1f1fb","1f1fa"],"emoji":"🇻🇺","name":"vanuatu flag"},{"codes":["1f1fc","1f1eb"],"emoji":"🇼🇫","name":"wallis &amp; futuna flag"},{"codes":["1f1fc","1f1f8"],"emoji":"🇼🇸","name":"samoa flag"},{"codes":["1f1fd","1f1f0"],"emoji":"🇽🇰","name":"kosovo flag"},{"codes":["1f1fe","1f1ea"],"emoji":"🇾🇪","name":"yemen flag"},{"codes":["1f1fe","1f1f9"],"emoji":"🇾🇹","name":"mayotte flag"},{"codes":["1f1ff","1f1e6"],"emoji":"🇿🇦","name":"south africa flag"},{"codes":["1f1ff","1f1f2"],"emoji":"🇿🇲","name":"zambia flag"},{"codes":["1f1ff","1f1fc"],"emoji":"🇿🇼","name":"zimbabwe flag"},{"codes":["1f38c"],"emoji":"🎌","name":"crossed flags"},{"codes":["1f3c1"],"emoji":"🏁","name":"chequered flag"},{"codes":["1f3f3","fe0f","200d","1f308"],"emoji":"🏳️‍🌈","name":""},{"codes":["1f3f3","fe0f","200d","26a7","fe0f"],"emoji":"🏳️‍⚧️","name":""},{"codes":["1f3f3","fe0f"],"emoji":"🏳️","name":""},{"codes":["1f3f4","200d","2620","fe0f"],"emoji":"🏴‍☠️","name":""},{"codes":["1f3f4","e0067","e0062","e0065","e006e","e0067","e007f"],"emoji":"🏴󠁧󠁢󠁥󠁮󠁧󠁿","name":"england flag"},{"codes":["1f3f4","e0067","e0062","e0073","e0063","e0074","e007f"],"emoji":"🏴󠁧󠁢󠁳󠁣󠁴󠁿","name":"scotland flag"},{"codes":["1f3f4","e0067","e0062","e0077","e006c","e0073","e007f"],"emoji":"🏴󠁧󠁢󠁷󠁬󠁳󠁿","name":"wales flag"},{"codes":["1f3f4"],"emoji":"🏴","name":"waving black flag"},{"codes":["1f6a9"],"emoji":"🚩","name":"triangular flag on post"}]}]},{"name":"Travel & Places","subGroups":[{"name":"sub-cat","emojis":[{"codes":["1f300"],"emoji":"🌀","name":"cyclone"},{"codes":["1f301"],"emoji":"🌁","name":"foggy"},{"codes":["1f302"],"emoji":"🌂","name":"closed umbrella"},{"codes":["1f303"],"emoji":"🌃","name":"night with stars"},{"codes":["1f304"],"emoji":"🌄","name":"sunrise over mountains"},{"codes":["1f305"],"emoji":"🌅","name":"sunrise"},{"codes":["1f306"],"emoji":"🌆","name":"cityscape at dusk"},{"codes":["1f307"],"emoji":"🌇","name":"sunset over buildings"},{"codes":["1f308"],"emoji":"🌈","name":"rainbow"},{"codes":["1f309"],"emoji":"🌉","name":"bridge at night"},{"codes":["1f30a"],"emoji":"🌊","name":"water wave"},{"codes":["1f30b"],"emoji":"🌋","name":"volcano"},{"codes":["1f30c"],"emoji":"🌌","name":"milky way"},{"codes":["1f30d"],"emoji":"🌍","name":"earth globe europe-africa"},{"codes":["1f30e"],"emoji":"🌎","name":"earth globe americas"},{"codes":["1f30f"],"emoji":"🌏","name":"earth globe asia-australia"},{"codes":["1f310"],"emoji":"🌐","name":"globe with meridians"},{"codes":["1f311"],"emoji":"🌑","name":"new moon symbol"},{"codes":["1f312"],"emoji":"🌒","name":"waxing crescent moon symbol"},{"codes":["1f313"],"emoji":"🌓","name":"first quarter moon symbol"},{"codes":["1f314"],"emoji":"🌔","name":"waxing gibbous moon symbol"},{"codes":["1f315"],"emoji":"🌕","name":"full moon symbol"},{"codes":["1f316"],"emoji":"🌖","name":"waning gibbous moon symbol"},{"codes":["1f317"],"emoji":"🌗","name":"last quarter moon symbol"},{"codes":["1f318"],"emoji":"🌘","name":"waning crescent moon symbol"},{"codes":["1f319"],"emoji":"🌙","name":"crescent moon"},{"codes":["1f31a"],"emoji":"🌚","name":"new moon with face"},{"codes":["1f31b"],"emoji":"🌛","name":"first quarter moon with face"},{"codes":["1f31c"],"emoji":"🌜","name":"last quarter moon with face"},{"codes":["1f31d"],"emoji":"🌝","name":"full moon with face"},{"codes":["1f31e"],"emoji":"🌞","name":"sun with face"},{"codes":["1f31f"],"emoji":"🌟","name":"glowing star"},{"codes":["1f320"],"emoji":"🌠","name":"shooting star"},{"codes":["1f321","fe0f"],"emoji":"🌡️","name":""},{"codes":["1f324","fe0f"],"emoji":"🌤️","name":""},{"codes":["1f325","fe0f"],"emoji":"🌥️","name":""},{"codes":["1f326","fe0f"],"emoji":"🌦️","name":""},{"codes":["1f327","fe0f"],"emoji":"🌧️","name":""},{"codes":["1f328","fe0f"],"emoji":"🌨️","name":""},{"codes":["1f329","fe0f"],"emoji":"🌩️","name":""},{"codes":["1f32a","fe0f"],"emoji":"🌪️","name":""},{"codes":["1f32b","fe0f"],"emoji":"🌫️","name":""},{"codes":["1f32c","fe0f"],"emoji":"🌬️","name":""},{"codes":["1f3a0"],"emoji":"🎠","name":"carousel horse"},{"codes":["1f3a1"],"emoji":"🎡","name":"ferris wheel"},{"codes":["1f3a2"],"emoji":"🎢","name":"roller coaster"},{"codes":["1f3aa"],"emoji":"🎪","name":"circus tent"},{"codes":["1f3cd","fe0f"],"emoji":"🏍️","name":""},{"codes":["1f3ce","fe0f"],"emoji":"🏎️","name":""},{"codes":["1f3d4","fe0f"],"emoji":"🏔️","name":""},{"codes":["1f3d5","fe0f"],"emoji":"🏕️","name":""},{"codes":["1f3d6","fe0f"],"emoji":"🏖️","name":""},{"codes":["1f3d7","fe0f"],"emoji":"🏗️","name":""},{"codes":["1f3d8","fe0f"],"emoji":"🏘️","name":""},{"codes":["1f3d9","fe0f"],"emoji":"🏙️","name":""},{"codes":["1f3da","fe0f"],"emoji":"🏚️","name":""},{"codes":["1f3db","fe0f"],"emoji":"🏛️","name":""},{"codes":["1f3dc","fe0f"],"emoji":"🏜️","name":""},{"codes":["1f3dd","fe0f"],"emoji":"🏝️","name":""},{"codes":["1f3de","fe0f"],"emoji":"🏞️","name":""},{"codes":["1f3df","fe0f"],"emoji":"🏟️","name":""},{"codes":["1f3e0"],"emoji":"🏠","name":"house building"},{"codes":["1f3e1"],"emoji":"🏡","name":"house with garden"},{"codes":["1f3e2"],"emoji":"🏢","name":"office building"},{"codes":["1f3e3"],"emoji":"🏣","name":"japanese post office"},{"codes":["1f3e4"],"emoji":"🏤","name":"european post office"},{"codes":["1f3e5"],"emoji":"🏥","name":"hospital"},{"codes":["1f3e6"],"emoji":"🏦","name":"bank"},{"codes":["1f3e8"],"emoji":"🏨","name":"hotel"},{"codes":["1f3e9"],"emoji":"🏩","name":"love hotel"},{"codes":["1f3ea"],"emoji":"🏪","name":"convenience store"},{"codes":["1f3eb"],"emoji":"🏫","name":"school"},{"codes":["1f3ec"],"emoji":"🏬","name":"department store"},{"codes":["1f3ed"],"emoji":"🏭","name":"factory"},{"codes":["1f3ef"],"emoji":"🏯","name":"japanese castle"},{"codes":["1f3f0"],"emoji":"🏰","name":"european castle"},{"codes":["1f488"],"emoji":"💈","name":"barber pole"},{"codes":["1f492"],"emoji":"💒","name":"wedding"},{"codes":["1f4a7"],"emoji":"💧","name":"droplet"},{"codes":["1f4ba"],"emoji":"💺","name":"seat"},{"codes":["1f525"],"emoji":"🔥","name":"fire"},{"codes":["1f54b"],"emoji":"🕋","name":"kaaba"},{"codes":["1f54c"],"emoji":"🕌","name":"mosque"},{"codes":["1f54d"],"emoji":"🕍","name":"synagogue"},{"codes":["1f550"],"emoji":"🕐","name":"clock face one oclock"},{"codes":["1f551"],"emoji":"🕑","name":"clock face two oclock"},{"codes":["1f552"],"emoji":"🕒","name":"clock face three oclock"},{"codes":["1f553"],"emoji":"🕓","name":"clock face four oclock"},{"codes":["1f554"],"emoji":"🕔","name":"clock face five oclock"},{"codes":["1f555"],"emoji":"🕕","name":"clock face six oclock"},{"codes":["1f556"],"emoji":"🕖","name":"clock face seven oclock"},{"codes":["1f557"],"emoji":"🕗","name":"clock face eight oclock"},{"codes":["1f558"],"emoji":"🕘","name":"clock face nine oclock"},{"codes":["1f559"],"emoji":"🕙","name":"clock face ten oclock"},{"codes":["1f55a"],"emoji":"🕚","name":"clock face eleven oclock"},{"codes":["1f55b"],"emoji":"🕛","name":"clock face twelve oclock"},{"codes":["1f55c"],"emoji":"🕜","name":"clock face one-thirty"},{"codes":["1f55d"],"emoji":"🕝","name":"clock face two-thirty"},{"codes":["1f55e"],"emoji":"🕞","name":"clock face three-thirty"},{"codes":["1f55f"],"emoji":"🕟","name":"clock face four-thirty"},{"codes":["1f560"],"emoji":"🕠","name":"clock face five-thirty"},{"codes":["1f561"],"emoji":"🕡","name":"clock face six-thirty"},{"codes":["1f562"],"emoji":"🕢","name":"clock face seven-thirty"},{"codes":["1f563"],"emoji":"🕣","name":"clock face eight-thirty"},{"codes":["1f564"],"emoji":"🕤","name":"clock face nine-thirty"},{"codes":["1f565"],"emoji":"🕥","name":"clock face ten-thirty"},{"codes":["1f566"],"emoji":"🕦","name":"clock face eleven-thirty"},{"codes":["1f567"],"emoji":"🕧","name":"clock face twelve-thirty"},{"codes":["1f570","fe0f"],"emoji":"🕰️","name":""},{"codes":["1f5fa","fe0f"],"emoji":"🗺️","name":""},{"codes":["1f5fb"],"emoji":"🗻","name":"mount fuji"},{"codes":["1f5fc"],"emoji":"🗼","name":"tokyo tower"},{"codes":["1f5fd"],"emoji":"🗽","name":"statue of liberty"},{"codes":["1f5fe"],"emoji":"🗾","name":"silhouette of japan"},{"codes":["1f680"],"emoji":"🚀","name":"rocket"},{"codes":["1f681"],"emoji":"🚁","name":"helicopter"},{"codes":["1f682"],"emoji":"🚂","name":"steam locomotive"},{"codes":["1f683"],"emoji":"🚃","name":"railway car"},{"codes":["1f684"],"emoji":"🚄","name":"high-speed train"},{"codes":["1f685"],"emoji":"🚅","name":"high-speed train with bullet nose"},{"codes":["1f686"],"emoji":"🚆","name":"train"},{"codes":["1f687"],"emoji":"🚇","name":"metro"},{"codes":["1f688"],"emoji":"🚈","name":"light rail"},{"codes":["1f689"],"emoji":"🚉","name":"station"},{"codes":["1f68a"],"emoji":"🚊","name":"tram"},{"codes":["1f68b"],"emoji":"🚋","name":"tram car"},{"codes":["1f68c"],"emoji":"🚌","name":"bus"},{"codes":["1f68d"],"emoji":"🚍","name":"oncoming bus"},{"codes":["1f68e"],"emoji":"🚎","name":"trolleybus"},{"codes":["1f68f"],"emoji":"🚏","name":"bus stop"},{"codes":["1f690"],"emoji":"🚐","name":"minibus"},{"codes":["1f691"],"emoji":"🚑","name":"ambulance"},{"codes":["1f692"],"emoji":"🚒","name":"fire engine"},{"codes":["1f693"],"emoji":"🚓","name":"police car"},{"codes":["1f694"],"emoji":"🚔","name":"oncoming police car"},{"codes":["1f695"],"emoji":"🚕","name":"taxi"},{"codes":["1f696"],"emoji":"🚖","name":"oncoming taxi"},{"codes":["1f697"],"emoji":"🚗","name":"automobile"},{"codes":["1f698"],"emoji":"🚘","name":"oncoming automobile"},{"codes":["1f699"],"emoji":"🚙","name":"recreational vehicle"},{"codes":["1f69a"],"emoji":"🚚","name":"delivery truck"},{"codes":["1f69b"],"emoji":"🚛","name":"articulated lorry"},{"codes":["1f69c"],"emoji":"🚜","name":"tractor"},{"codes":["1f69d"],"emoji":"🚝","name":"monorail"},{"codes":["1f69e"],"emoji":"🚞","name":"mountain railway"},{"codes":["1f69f"],"emoji":"🚟","name":"suspension railway"},{"codes":["1f6a0"],"emoji":"🚠","name":"mountain cableway"},{"codes":["1f6a1"],"emoji":"🚡","name":"aerial tramway"},{"codes":["1f6a2"],"emoji":"🚢","name":"ship"},{"codes":["1f6a4"],"emoji":"🚤","name":"speedboat"},{"codes":["1f6a5"],"emoji":"🚥","name":"horizontal traffic light"},{"codes":["1f6a6"],"emoji":"🚦","name":"vertical traffic light"},{"codes":["1f6a7"],"emoji":"🚧","name":"construction sign"},{"codes":["1f6a8"],"emoji":"🚨","name":"police cars revolving light"},{"codes":["1f6b2"],"emoji":"🚲","name":"bicycle"},{"codes":["1f6ce","fe0f"],"emoji":"🛎️","name":""},{"codes":["1f6d1"],"emoji":"🛑","name":"octagonal sign"},{"codes":["1f6d5"],"emoji":"🛕","name":"hindu temple"},{"codes":["1f6d6"],"emoji":"🛖","name":"hut"},{"codes":["1f6e2","fe0f"],"emoji":"🛢️","name":""},{"codes":["1f6e3","fe0f"],"emoji":"🛣️","name":""},{"codes":["1f6e4","fe0f"],"emoji":"🛤️","name":""},{"codes":["1f6e5","fe0f"],"emoji":"🛥️","name":""},{"codes":["1f6e9","fe0f"],"emoji":"🛩️","name":""},{"codes":["1f6eb"],"emoji":"🛫","name":"airplane departure"},{"codes":["1f6ec"],"emoji":"🛬","name":"airplane arriving"},{"codes":["1f6f0","fe0f"],"emoji":"🛰️","name":""},{"codes":["1f6f3","fe0f"],"emoji":"🛳️","name":""},{"codes":["1f6f4"],"emoji":"🛴","name":"scooter"},{"codes":["1f6f5"],"emoji":"🛵","name":"motor scooter"},{"codes":["1f6f6"],"emoji":"🛶","name":"canoe"},{"codes":["1f6f8"],"emoji":"🛸","name":"flying saucer"},{"codes":["1f6f9"],"emoji":"🛹","name":"skateboard"},{"codes":["1f6fa"],"emoji":"🛺","name":"auto rickshaw"},{"codes":["1f6fb"],"emoji":"🛻","name":"pickup truck"},{"codes":["1f6fc"],"emoji":"🛼","name":"roller skate"},{"codes":["1f9bc"],"emoji":"🦼","name":"motorized wheelchair"},{"codes":["1f9bd"],"emoji":"🦽","name":"manual wheelchair"},{"codes":["1f9ed"],"emoji":"🧭","name":"compass"},{"codes":["1f9f1"],"emoji":"🧱","name":"brick"},{"codes":["1f9f3"],"emoji":"🧳","name":"luggage"},{"codes":["1fa82"],"emoji":"🪂","name":"parachute"},{"codes":["1fa90"],"emoji":"🪐","name":"ringed planet"},{"codes":["1faa8"],"emoji":"🪨","name":"rock"},{"codes":["1fab5"],"emoji":"🪵","name":"wood"},{"codes":["231a"],"emoji":"⌚","name":"watch"},{"codes":["231b"],"emoji":"⌛","name":"hourglass"},{"codes":["23f0"],"emoji":"⏰","name":"alarm clock"},{"codes":["23f1","fe0f"],"emoji":"⏱️","name":""},{"codes":["23f2","fe0f"],"emoji":"⏲️","name":""},{"codes":["23f3"],"emoji":"⏳","name":"hourglass with flowing sand"},{"codes":["2600","fe0f"],"emoji":"☀️","name":"black sun with rays"},{"codes":["2601","fe0f"],"emoji":"☁️","name":"cloud"},{"codes":["2602","fe0f"],"emoji":"☂️","name":""},{"codes":["2603","fe0f"],"emoji":"☃️","name":""},{"codes":["2604","fe0f"],"emoji":"☄️","name":""},{"codes":["2614"],"emoji":"☔","name":"umbrella with rain drops"},{"codes":["2668","fe0f"],"emoji":"♨️","name":"hot springs"},{"codes":["2693"],"emoji":"⚓","name":"anchor"},{"codes":["26a1"],"emoji":"⚡","name":"high voltage sign"},{"codes":["26c4"],"emoji":"⛄","name":"snowman without snow"},{"codes":["26c5"],"emoji":"⛅","name":"sun behind cloud"},{"codes":["26c8","fe0f"],"emoji":"⛈️","name":""},{"codes":["26e9","fe0f"],"emoji":"⛩️","name":""},{"codes":["26ea"],"emoji":"⛪","name":"church"},{"codes":["26f0","fe0f"],"emoji":"⛰️","name":""},{"codes":["26f1","fe0f"],"emoji":"⛱️","name":""},{"codes":["26f2"],"emoji":"⛲","name":"fountain"},{"codes":["26f4","fe0f"],"emoji":"⛴️","name":""},{"codes":["26f5"],"emoji":"⛵","name":"sailboat"},{"codes":["26fa"],"emoji":"⛺","name":"tent"},{"codes":["26fd"],"emoji":"⛽","name":"fuel pump"},{"codes":["2708","fe0f"],"emoji":"✈️","name":"airplane"},{"codes":["2744","fe0f"],"emoji":"❄️","name":"snowflake"},{"codes":["2b50"],"emoji":"⭐","name":"white medium star"}]}]},{"name":"Food & Drink","subGroups":[{"name":"sub-cat","emojis":[{"codes":["1f32d"],"emoji":"🌭","name":"hot dog"},{"codes":["1f32e"],"emoji":"🌮","name":"taco"},{"codes":["1f32f"],"emoji":"🌯","name":"burrito"},{"codes":["1f330"],"emoji":"🌰","name":"chestnut"},{"codes":["1f336","fe0f"],"emoji":"🌶️","name":""},{"codes":["1f33d"],"emoji":"🌽","name":"ear of maize"},{"codes":["1f344"],"emoji":"🍄","name":"mushroom"},{"codes":["1f345"],"emoji":"🍅","name":"tomato"},{"codes":["1f346"],"emoji":"🍆","name":"aubergine"},{"codes":["1f347"],"emoji":"🍇","name":"grapes"},{"codes":["1f348"],"emoji":"🍈","name":"melon"},{"codes":["1f349"],"emoji":"🍉","name":"watermelon"},{"codes":["1f34a"],"emoji":"🍊","name":"tangerine"},{"codes":["1f34b"],"emoji":"🍋","name":"lemon"},{"codes":["1f34c"],"emoji":"🍌","name":"banana"},{"codes":["1f34d"],"emoji":"🍍","name":"pineapple"},{"codes":["1f34e"],"emoji":"🍎","name":"red apple"},{"codes":["1f34f"],"emoji":"🍏","name":"green apple"},{"codes":["1f350"],"emoji":"🍐","name":"pear"},{"codes":["1f351"],"emoji":"🍑","name":"peach"},{"codes":["1f352"],"emoji":"🍒","name":"cherries"},{"codes":["1f353"],"emoji":"🍓","name":"strawberry"},{"codes":["1f354"],"emoji":"🍔","name":"hamburger"},{"codes":["1f355"],"emoji":"🍕","name":"slice of pizza"},{"codes":["1f356"],"emoji":"🍖","name":"meat on bone"},{"codes":["1f357"],"emoji":"🍗","name":"poultry leg"},{"codes":["1f358"],"emoji":"🍘","name":"rice cracker"},{"codes":["1f359"],"emoji":"🍙","name":"rice ball"},{"codes":["1f35a"],"emoji":"🍚","name":"cooked rice"},{"codes":["1f35b"],"emoji":"🍛","name":"curry and rice"},{"codes":["1f35c"],"emoji":"🍜","name":"steaming bowl"},{"codes":["1f35d"],"emoji":"🍝","name":"spaghetti"},{"codes":["1f35e"],"emoji":"🍞","name":"bread"},{"codes":["1f35f"],"emoji":"🍟","name":"french fries"},{"codes":["1f360"],"emoji":"🍠","name":"roasted sweet potato"},{"codes":["1f361"],"emoji":"🍡","name":"dango"},{"codes":["1f362"],"emoji":"🍢","name":"oden"},{"codes":["1f363"],"emoji":"🍣","name":"sushi"},{"codes":["1f364"],"emoji":"🍤","name":"fried shrimp"},{"codes":["1f365"],"emoji":"🍥","name":"fish cake with swirl design"},{"codes":["1f366"],"emoji":"🍦","name":"soft ice cream"},{"codes":["1f367"],"emoji":"🍧","name":"shaved ice"},{"codes":["1f368"],"emoji":"🍨","name":"ice cream"},{"codes":["1f369"],"emoji":"🍩","name":"doughnut"},{"codes":["1f36a"],"emoji":"🍪","name":"cookie"},{"codes":["1f36b"],"emoji":"🍫","name":"chocolate bar"},{"codes":["1f36c"],"emoji":"🍬","name":"candy"},{"codes":["1f36d"],"emoji":"🍭","name":"lollipop"},{"codes":["1f36e"],"emoji":"🍮","name":"custard"},{"codes":["1f36f"],"emoji":"🍯","name":"honey pot"},{"codes":["1f370"],"emoji":"🍰","name":"shortcake"},{"codes":["1f371"],"emoji":"🍱","name":"bento box"},{"codes":["1f372"],"emoji":"🍲","name":"pot of food"},{"codes":["1f373"],"emoji":"🍳","name":"cooking"},{"codes":["1f374"],"emoji":"🍴","name":"fork and knife"},{"codes":["1f375"],"emoji":"🍵","name":"teacup without handle"},{"codes":["1f376"],"emoji":"🍶","name":"sake bottle and cup"},{"codes":["1f377"],"emoji":"🍷","name":"wine glass"},{"codes":["1f378"],"emoji":"🍸","name":"cocktail glass"},{"codes":["1f379"],"emoji":"🍹","name":"tropical drink"},{"codes":["1f37a"],"emoji":"🍺","name":"beer mug"},{"codes":["1f37b"],"emoji":"🍻","name":"clinking beer mugs"},{"codes":["1f37c"],"emoji":"🍼","name":"baby bottle"},{"codes":["1f37d","fe0f"],"emoji":"🍽️","name":""},{"codes":["1f37e"],"emoji":"🍾","name":"bottle with popping cork"},{"codes":["1f37f"],"emoji":"🍿","name":"popcorn"},{"codes":["1f382"],"emoji":"🎂","name":"birthday cake"},{"codes":["1f3fa"],"emoji":"🏺","name":"amphora"},{"codes":["1f52a"],"emoji":"🔪","name":"hocho"},{"codes":["1f942"],"emoji":"🥂","name":"clinking glasses"},{"codes":["1f943"],"emoji":"🥃","name":"tumbler glass"},{"codes":["1f944"],"emoji":"🥄","name":"spoon"},{"codes":["1f950"],"emoji":"🥐","name":"croissant"},{"codes":["1f951"],"emoji":"🥑","name":"avocado"},{"codes":["1f952"],"emoji":"🥒","name":"cucumber"},{"codes":["1f953"],"emoji":"🥓","name":"bacon"},{"codes":["1f954"],"emoji":"🥔","name":"potato"},{"codes":["1f955"],"emoji":"🥕","name":"carrot"},{"codes":["1f956"],"emoji":"🥖","name":"baguette bread"},{"codes":["1f957"],"emoji":"🥗","name":"green salad"},{"codes":["1f958"],"emoji":"🥘","name":"shallow pan of food"},{"codes":["1f959"],"emoji":"🥙","name":"stuffed flatbread"},{"codes":["1f95a"],"emoji":"🥚","name":"egg"},{"codes":["1f95b"],"emoji":"🥛","name":"glass of milk"},{"codes":["1f95c"],"emoji":"🥜","name":"peanuts"},{"codes":["1f95d"],"emoji":"🥝","name":"kiwifruit"},{"codes":["1f95e"],"emoji":"🥞","name":"pancakes"},{"codes":["1f95f"],"emoji":"🥟","name":"dumpling"},{"codes":["1f960"],"emoji":"🥠","name":"fortune cookie"},{"codes":["1f961"],"emoji":"🥡","name":"takeout box"},{"codes":["1f962"],"emoji":"🥢","name":"chopsticks"},{"codes":["1f963"],"emoji":"🥣","name":"bowl with spoon"},{"codes":["1f964"],"emoji":"🥤","name":"cup with straw"},{"codes":["1f965"],"emoji":"🥥","name":"coconut"},{"codes":["1f966"],"emoji":"🥦","name":"broccoli"},{"codes":["1f967"],"emoji":"🥧","name":"pie"},{"codes":["1f968"],"emoji":"🥨","name":"pretzel"},{"codes":["1f969"],"emoji":"🥩","name":"cut of meat"},{"codes":["1f96a"],"emoji":"🥪","name":"sandwich"},{"codes":["1f96b"],"emoji":"🥫","name":"canned food"},{"codes":["1f96c"],"emoji":"🥬","name":"leafy green"},{"codes":["1f96d"],"emoji":"🥭","name":"mango"},{"codes":["1f96e"],"emoji":"🥮","name":"moon cake"},{"codes":["1f96f"],"emoji":"🥯","name":"bagel"},{"codes":["1f980"],"emoji":"🦀","name":"crab"},{"codes":["1f990"],"emoji":"🦐","name":"shrimp"},{"codes":["1f991"],"emoji":"🦑","name":"squid"},{"codes":["1f99e"],"emoji":"🦞","name":"lobster"},{"codes":["1f9aa"],"emoji":"🦪","name":"oyster"},{"codes":["1f9c0"],"emoji":"🧀","name":"cheese wedge"},{"codes":["1f9c1"],"emoji":"🧁","name":"cupcake"},{"codes":["1f9c2"],"emoji":"🧂","name":"salt shaker"},{"codes":["1f9c3"],"emoji":"🧃","name":"beverage box"},{"codes":["1f9c4"],"emoji":"🧄","name":"garlic"},{"codes":["1f9c5"],"emoji":"🧅","name":"onion"},{"codes":["1f9c6"],"emoji":"🧆","name":"falafel"},{"codes":["1f9c7"],"emoji":"🧇","name":"waffle"},{"codes":["1f9c8"],"emoji":"🧈","name":"butter"},{"codes":["1f9c9"],"emoji":"🧉","name":"mate drink"},{"codes":["1f9ca"],"emoji":"🧊","name":"ice cube"},{"codes":["1f9cb"],"emoji":"🧋","name":"bubble tea"},{"codes":["1fad0"],"emoji":"🫐","name":"blueberries"},{"codes":["1fad1"],"emoji":"🫑","name":"bell pepper"},{"codes":["1fad2"],"emoji":"🫒","name":"olive"},{"codes":["1fad3"],"emoji":"🫓","name":"flatbread"},{"codes":["1fad4"],"emoji":"🫔","name":"tamale"},{"codes":["1fad5"],"emoji":"🫕","name":"fondue"},{"codes":["1fad6"],"emoji":"🫖","name":"teapot"},{"codes":["2615"],"emoji":"☕","name":"hot beverage"}]}]},{"name":"Animals & Nature","subGroups":[{"name":"sub-cat","emojis":[{"codes":["1f331"],"emoji":"🌱","name":"seedling"},{"codes":["1f332"],"emoji":"🌲","name":"evergreen tree"},{"codes":["1f333"],"emoji":"🌳","name":"deciduous tree"},{"codes":["1f334"],"emoji":"🌴","name":"palm tree"},{"codes":["1f335"],"emoji":"🌵","name":"cactus"},{"codes":["1f337"],"emoji":"🌷","name":"tulip"},{"codes":["1f338"],"emoji":"🌸","name":"cherry blossom"},{"codes":["1f339"],"emoji":"🌹","name":"rose"},{"codes":["1f33a"],"emoji":"🌺","name":"hibiscus"},{"codes":["1f33b"],"emoji":"🌻","name":"sunflower"},{"codes":["1f33c"],"emoji":"🌼","name":"blossom"},{"codes":["1f33e"],"emoji":"🌾","name":"ear of rice"},{"codes":["1f33f"],"emoji":"🌿","name":"herb"},{"codes":["1f340"],"emoji":"🍀","name":"four leaf clover"},{"codes":["1f341"],"emoji":"🍁","name":"maple leaf"},{"codes":["1f342"],"emoji":"🍂","name":"fallen leaf"},{"codes":["1f343"],"emoji":"🍃","name":"leaf fluttering in wind"},{"codes":["1f3f5","fe0f"],"emoji":"🏵️","name":""},{"codes":["1f400"],"emoji":"🐀","name":"rat"},{"codes":["1f401"],"emoji":"🐁","name":"mouse"},{"codes":["1f402"],"emoji":"🐂","name":"ox"},{"codes":["1f403"],"emoji":"🐃","name":"water buffalo"},{"codes":["1f404"],"emoji":"🐄","name":"cow"},{"codes":["1f405"],"emoji":"🐅","name":"tiger"},{"codes":["1f406"],"emoji":"🐆","name":"leopard"},{"codes":["1f407"],"emoji":"🐇","name":"rabbit"},{"codes":["1f408","200d","2b1b"],"emoji":"🐈‍⬛","name":""},{"codes":["1f408"],"emoji":"🐈","name":"cat"},{"codes":["1f409"],"emoji":"🐉","name":"dragon"},{"codes":["1f40a"],"emoji":"🐊","name":"crocodile"},{"codes":["1f40b"],"emoji":"🐋","name":"whale"},{"codes":["1f40c"],"emoji":"🐌","name":"snail"},{"codes":["1f40d"],"emoji":"🐍","name":"snake"},{"codes":["1f40e"],"emoji":"🐎","name":"horse"},{"codes":["1f40f"],"emoji":"🐏","name":"ram"},{"codes":["1f410"],"emoji":"🐐","name":"goat"},{"codes":["1f411"],"emoji":"🐑","name":"sheep"},{"codes":["1f412"],"emoji":"🐒","name":"monkey"},{"codes":["1f413"],"emoji":"🐓","name":"rooster"},{"codes":["1f414"],"emoji":"🐔","name":"chicken"},{"codes":["1f415","200d","1f9ba"],"emoji":"🐕‍🦺","name":""},{"codes":["1f415"],"emoji":"🐕","name":"dog"},{"codes":["1f416"],"emoji":"🐖","name":"pig"},{"codes":["1f417"],"emoji":"🐗","name":"boar"},{"codes":["1f418"],"emoji":"🐘","name":"elephant"},{"codes":["1f419"],"emoji":"🐙","name":"octopus"},{"codes":["1f41a"],"emoji":"🐚","name":"spiral shell"},{"codes":["1f41b"],"emoji":"🐛","name":"bug"},{"codes":["1f41c"],"emoji":"🐜","name":"ant"},{"codes":["1f41d"],"emoji":"🐝","name":"honeybee"},{"codes":["1f41e"],"emoji":"🐞","name":"lady beetle"},{"codes":["1f41f"],"emoji":"🐟","name":"fish"},{"codes":["1f420"],"emoji":"🐠","name":"tropical fish"},{"codes":["1f421"],"emoji":"🐡","name":"blowfish"},{"codes":["1f422"],"emoji":"🐢","name":"turtle"},{"codes":["1f423"],"emoji":"🐣","name":"hatching chick"},{"codes":["1f424"],"emoji":"🐤","name":"baby chick"},{"codes":["1f425"],"emoji":"🐥","name":"front-facing baby chick"},{"codes":["1f426"],"emoji":"🐦","name":"bird"},{"codes":["1f427"],"emoji":"🐧","name":"penguin"},{"codes":["1f428"],"emoji":"🐨","name":"koala"},{"codes":["1f429"],"emoji":"🐩","name":"poodle"},{"codes":["1f42a"],"emoji":"🐪","name":"dromedary camel"},{"codes":["1f42b"],"emoji":"🐫","name":"bactrian camel"},{"codes":["1f42c"],"emoji":"🐬","name":"dolphin"},{"codes":["1f42d"],"emoji":"🐭","name":"mouse face"},{"codes":["1f42e"],"emoji":"🐮","name":"cow face"},{"codes":["1f42f"],"emoji":"🐯","name":"tiger face"},{"codes":["1f430"],"emoji":"🐰","name":"rabbit face"},{"codes":["1f431"],"emoji":"🐱","name":"cat face"},{"codes":["1f432"],"emoji":"🐲","name":"dragon face"},{"codes":["1f433"],"emoji":"🐳","name":"spouting whale"},{"codes":["1f434"],"emoji":"🐴","name":"horse face"},{"codes":["1f435"],"emoji":"🐵","name":"monkey face"},{"codes":["1f436"],"emoji":"🐶","name":"dog face"},{"codes":["1f437"],"emoji":"🐷","name":"pig face"},{"codes":["1f438"],"emoji":"🐸","name":"frog face"},{"codes":["1f439"],"emoji":"🐹","name":"hamster face"},{"codes":["1f43a"],"emoji":"🐺","name":"wolf face"},{"codes":["1f43b","200d","2744","fe0f"],"emoji":"🐻‍❄️","name":""},{"codes":["1f43b"],"emoji":"🐻","name":"bear face"},{"codes":["1f43c"],"emoji":"🐼","name":"panda face"},{"codes":["1f43d"],"emoji":"🐽","name":"pig nose"},{"codes":["1f43e"],"emoji":"🐾","name":"paw prints"},{"codes":["1f43f","fe0f"],"emoji":"🐿️","name":""},{"codes":["1f490"],"emoji":"💐","name":"bouquet"},{"codes":["1f4ae"],"emoji":"💮","name":"white flower"},{"codes":["1f54a","fe0f"],"emoji":"🕊️","name":""},{"codes":["1f577","fe0f"],"emoji":"🕷️","name":""},{"codes":["1f578","fe0f"],"emoji":"🕸️","name":""},{"codes":["1f940"],"emoji":"🥀","name":"wilted flower"},{"codes":["1f981"],"emoji":"🦁","name":"lion face"},{"codes":["1f982"],"emoji":"🦂","name":"scorpion"},{"codes":["1f983"],"emoji":"🦃","name":"turkey"},{"codes":["1f984"],"emoji":"🦄","name":"unicorn face"},{"codes":["1f985"],"emoji":"🦅","name":"eagle"},{"codes":["1f986"],"emoji":"🦆","name":"duck"},{"codes":["1f987"],"emoji":"🦇","name":"bat"},{"codes":["1f988"],"emoji":"🦈","name":"shark"},{"codes":["1f989"],"emoji":"🦉","name":"owl"},{"codes":["1f98a"],"emoji":"🦊","name":"fox face"},{"codes":["1f98b"],"emoji":"🦋","name":"butterfly"},{"codes":["1f98c"],"emoji":"🦌","name":"deer"},{"codes":["1f98d"],"emoji":"🦍","name":"gorilla"},{"codes":["1f98e"],"emoji":"🦎","name":"lizard"},{"codes":["1f98f"],"emoji":"🦏","name":"rhinoceros"},{"codes":["1f992"],"emoji":"🦒","name":"giraffe face"},{"codes":["1f993"],"emoji":"🦓","name":"zebra face"},{"codes":["1f994"],"emoji":"🦔","name":"hedgehog"},{"codes":["1f995"],"emoji":"🦕","name":"sauropod"},{"codes":["1f996"],"emoji":"🦖","name":"t-rex"},{"codes":["1f997"],"emoji":"🦗","name":"cricket"},{"codes":["1f998"],"emoji":"🦘","name":"kangaroo"},{"codes":["1f999"],"emoji":"🦙","name":"llama"},{"codes":["1f99a"],"emoji":"🦚","name":"peacock"},{"codes":["1f99b"],"emoji":"🦛","name":"hippopotamus"},{"codes":["1f99c"],"emoji":"🦜","name":"parrot"},{"codes":["1f99d"],"emoji":"🦝","name":"raccoon"},{"codes":["1f99f"],"emoji":"🦟","name":"mosquito"},{"codes":["1f9a0"],"emoji":"🦠","name":"microbe"},{"codes":["1f9a1"],"emoji":"🦡","name":"badger"},{"codes":["1f9a2"],"emoji":"🦢","name":"swan"},{"codes":["1f9a3"],"emoji":"🦣","name":"mammoth"},{"codes":["1f9a4"],"emoji":"🦤","name":"dodo"},{"codes":["1f9a5"],"emoji":"🦥","name":"sloth"},{"codes":["1f9a6"],"emoji":"🦦","name":"otter"},{"codes":["1f9a7"],"emoji":"🦧","name":"orangutan"},{"codes":["1f9a8"],"emoji":"🦨","name":"skunk"},{"codes":["1f9a9"],"emoji":"🦩","name":"flamingo"},{"codes":["1f9ab"],"emoji":"🦫","name":"beaver"},{"codes":["1f9ac"],"emoji":"🦬","name":"bison"},{"codes":["1f9ad"],"emoji":"🦭","name":"seal"},{"codes":["1f9ae"],"emoji":"🦮","name":"guide dog"},{"codes":["1fab0"],"emoji":"🪰","name":"fly"},{"codes":["1fab1"],"emoji":"🪱","name":"worm"},{"codes":["1fab2"],"emoji":"🪲","name":"beetle"},{"codes":["1fab3"],"emoji":"🪳","name":"cockroach"},{"codes":["1fab4"],"emoji":"🪴","name":"potted plant"},{"codes":["1fab6"],"emoji":"🪶","name":"feather"},{"codes":["2618","fe0f"],"emoji":"☘️","name":""}]}]},{"name":"People & Body","subGroups":[{"name":"sub-cat","emojis":[{"codes":["1f385"],"emoji":"🎅","name":"father christmas"},{"codes":["1f385","1f3fb"],"status":"fully-qualified","emoji":"🎅🏻","name":""},{"codes":["1f385","1f3fc"],"status":"fully-qualified","emoji":"🎅🏼","name":""},{"codes":["1f385","1f3fd"],"status":"fully-qualified","emoji":"🎅🏽","name":""},{"codes":["1f385","1f3fe"],"status":"fully-qualified","emoji":"🎅🏾","name":""},{"codes":["1f385","1f3ff"],"status":"fully-qualified","emoji":"🎅🏿","name":""},{"codes":["1f3c2"],"emoji":"🏂","name":"snowboarder"},{"codes":["1f3c2","1f3fb"],"status":"fully-qualified","emoji":"🏂🏻","name":""},{"codes":["1f3c2","1f3fc"],"status":"fully-qualified","emoji":"🏂🏼","name":""},{"codes":["1f3c2","1f3fd"],"status":"fully-qualified","emoji":"🏂🏽","name":""},{"codes":["1f3c2","1f3fe"],"status":"fully-qualified","emoji":"🏂🏾","name":""},{"codes":["1f3c2","1f3ff"],"status":"fully-qualified","emoji":"🏂🏿","name":""},{"codes":["1f3c3","200d","2640","fe0f"],"emoji":"🏃‍♀️","name":""},{"codes":["1f3c3","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏃🏻‍♀️","name":""},{"codes":["1f3c3","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏃🏼‍♀️","name":""},{"codes":["1f3c3","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏃🏽‍♀️","name":""},{"codes":["1f3c3","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏃🏾‍♀️","name":""},{"codes":["1f3c3","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏃🏿‍♀️","name":""},{"codes":["1f3c3","200d","2642","fe0f"],"emoji":"🏃‍♂️","name":""},{"codes":["1f3c3","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏃🏻‍♂️","name":""},{"codes":["1f3c3","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏃🏼‍♂️","name":""},{"codes":["1f3c3","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏃🏽‍♂️","name":""},{"codes":["1f3c3","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏃🏾‍♂️","name":""},{"codes":["1f3c3","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏃🏿‍♂️","name":""},{"codes":["1f3c3"],"emoji":"🏃","name":"runner"},{"codes":["1f3c3","1f3fb"],"status":"fully-qualified","emoji":"🏃🏻","name":""},{"codes":["1f3c3","1f3fc"],"status":"fully-qualified","emoji":"🏃🏼","name":""},{"codes":["1f3c3","1f3fd"],"status":"fully-qualified","emoji":"🏃🏽","name":""},{"codes":["1f3c3","1f3fe"],"status":"fully-qualified","emoji":"🏃🏾","name":""},{"codes":["1f3c3","1f3ff"],"status":"fully-qualified","emoji":"🏃🏿","name":""},{"codes":["1f3c4","200d","2640","fe0f"],"emoji":"🏄‍♀️","name":""},{"codes":["1f3c4","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏄🏻‍♀️","name":""},{"codes":["1f3c4","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏄🏼‍♀️","name":""},{"codes":["1f3c4","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏄🏽‍♀️","name":""},{"codes":["1f3c4","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏄🏾‍♀️","name":""},{"codes":["1f3c4","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏄🏿‍♀️","name":""},{"codes":["1f3c4","200d","2642","fe0f"],"emoji":"🏄‍♂️","name":""},{"codes":["1f3c4","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏄🏻‍♂️","name":""},{"codes":["1f3c4","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏄🏼‍♂️","name":""},{"codes":["1f3c4","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏄🏽‍♂️","name":""},{"codes":["1f3c4","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏄🏾‍♂️","name":""},{"codes":["1f3c4","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏄🏿‍♂️","name":""},{"codes":["1f3c4"],"emoji":"🏄","name":"surfer"},{"codes":["1f3c4","1f3fb"],"status":"fully-qualified","emoji":"🏄🏻","name":""},{"codes":["1f3c4","1f3fc"],"status":"fully-qualified","emoji":"🏄🏼","name":""},{"codes":["1f3c4","1f3fd"],"status":"fully-qualified","emoji":"🏄🏽","name":""},{"codes":["1f3c4","1f3fe"],"status":"fully-qualified","emoji":"🏄🏾","name":""},{"codes":["1f3c4","1f3ff"],"status":"fully-qualified","emoji":"🏄🏿","name":""},{"codes":["1f3c7"],"emoji":"🏇","name":"horse racing"},{"codes":["1f3c7","1f3fb"],"status":"fully-qualified","emoji":"🏇🏻","name":""},{"codes":["1f3c7","1f3fc"],"status":"fully-qualified","emoji":"🏇🏼","name":""},{"codes":["1f3c7","1f3fd"],"status":"fully-qualified","emoji":"🏇🏽","name":""},{"codes":["1f3c7","1f3fe"],"status":"fully-qualified","emoji":"🏇🏾","name":""},{"codes":["1f3c7","1f3ff"],"status":"fully-qualified","emoji":"🏇🏿","name":""},{"codes":["1f3ca","200d","2640","fe0f"],"emoji":"🏊‍♀️","name":""},{"codes":["1f3ca","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏊🏻‍♀️","name":""},{"codes":["1f3ca","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏊🏼‍♀️","name":""},{"codes":["1f3ca","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏊🏽‍♀️","name":""},{"codes":["1f3ca","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏊🏾‍♀️","name":""},{"codes":["1f3ca","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏊🏿‍♀️","name":""},{"codes":["1f3ca","200d","2642","fe0f"],"emoji":"🏊‍♂️","name":""},{"codes":["1f3ca","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏊🏻‍♂️","name":""},{"codes":["1f3ca","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏊🏼‍♂️","name":""},{"codes":["1f3ca","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏊🏽‍♂️","name":""},{"codes":["1f3ca","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏊🏾‍♂️","name":""},{"codes":["1f3ca","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏊🏿‍♂️","name":""},{"codes":["1f3ca"],"emoji":"🏊","name":"swimmer"},{"codes":["1f3ca","1f3fb"],"status":"fully-qualified","emoji":"🏊🏻","name":""},{"codes":["1f3ca","1f3fc"],"status":"fully-qualified","emoji":"🏊🏼","name":""},{"codes":["1f3ca","1f3fd"],"status":"fully-qualified","emoji":"🏊🏽","name":""},{"codes":["1f3ca","1f3fe"],"status":"fully-qualified","emoji":"🏊🏾","name":""},{"codes":["1f3ca","1f3ff"],"status":"fully-qualified","emoji":"🏊🏿","name":""},{"codes":["1f3cb","fe0f","200d","2640","fe0f"],"emoji":"🏋️‍♀️","name":""},{"codes":["1f3cb","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏋🏻‍♀️","name":""},{"codes":["1f3cb","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏋🏼‍♀️","name":""},{"codes":["1f3cb","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏋🏽‍♀️","name":""},{"codes":["1f3cb","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏋🏾‍♀️","name":""},{"codes":["1f3cb","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏋🏿‍♀️","name":""},{"codes":["1f3cb","fe0f","200d","2642","fe0f"],"emoji":"🏋️‍♂️","name":""},{"codes":["1f3cb","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏋🏻‍♂️","name":""},{"codes":["1f3cb","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏋🏼‍♂️","name":""},{"codes":["1f3cb","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏋🏽‍♂️","name":""},{"codes":["1f3cb","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏋🏾‍♂️","name":""},{"codes":["1f3cb","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏋🏿‍♂️","name":""},{"codes":["1f3cb","fe0f"],"emoji":"🏋️","name":""},{"codes":["1f3cb","1f3fb"],"status":"fully-qualified","emoji":"🏋🏻","name":""},{"codes":["1f3cb","1f3fc"],"status":"fully-qualified","emoji":"🏋🏼","name":""},{"codes":["1f3cb","1f3fd"],"status":"fully-qualified","emoji":"🏋🏽","name":""},{"codes":["1f3cb","1f3fe"],"status":"fully-qualified","emoji":"🏋🏾","name":""},{"codes":["1f3cb","1f3ff"],"status":"fully-qualified","emoji":"🏋🏿","name":""},{"codes":["1f3cc","fe0f","200d","2640","fe0f"],"emoji":"🏌️‍♀️","name":""},{"codes":["1f3cc","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏌🏻‍♀️","name":""},{"codes":["1f3cc","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏌🏼‍♀️","name":""},{"codes":["1f3cc","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏌🏽‍♀️","name":""},{"codes":["1f3cc","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏌🏾‍♀️","name":""},{"codes":["1f3cc","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🏌🏿‍♀️","name":""},{"codes":["1f3cc","fe0f","200d","2642","fe0f"],"emoji":"🏌️‍♂️","name":""},{"codes":["1f3cc","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏌🏻‍♂️","name":""},{"codes":["1f3cc","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏌🏼‍♂️","name":""},{"codes":["1f3cc","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏌🏽‍♂️","name":""},{"codes":["1f3cc","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏌🏾‍♂️","name":""},{"codes":["1f3cc","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🏌🏿‍♂️","name":""},{"codes":["1f3cc","fe0f"],"emoji":"🏌️","name":""},{"codes":["1f3cc","1f3fb"],"status":"fully-qualified","emoji":"🏌🏻","name":""},{"codes":["1f3cc","1f3fc"],"status":"fully-qualified","emoji":"🏌🏼","name":""},{"codes":["1f3cc","1f3fd"],"status":"fully-qualified","emoji":"🏌🏽","name":""},{"codes":["1f3cc","1f3fe"],"status":"fully-qualified","emoji":"🏌🏾","name":""},{"codes":["1f3cc","1f3ff"],"status":"fully-qualified","emoji":"🏌🏿","name":""},{"codes":["1f440"],"emoji":"👀","name":"eyes"},{"codes":["1f441","fe0f"],"emoji":"👁️","name":""},{"codes":["1f442"],"emoji":"👂","name":"ear"},{"codes":["1f442","1f3fb"],"status":"fully-qualified","emoji":"👂🏻","name":""},{"codes":["1f442","1f3fc"],"status":"fully-qualified","emoji":"👂🏼","name":""},{"codes":["1f442","1f3fd"],"status":"fully-qualified","emoji":"👂🏽","name":""},{"codes":["1f442","1f3fe"],"status":"fully-qualified","emoji":"👂🏾","name":""},{"codes":["1f442","1f3ff"],"status":"fully-qualified","emoji":"👂🏿","name":""},{"codes":["1f443"],"emoji":"👃","name":"nose"},{"codes":["1f443","1f3fb"],"status":"fully-qualified","emoji":"👃🏻","name":""},{"codes":["1f443","1f3fc"],"status":"fully-qualified","emoji":"👃🏼","name":""},{"codes":["1f443","1f3fd"],"status":"fully-qualified","emoji":"👃🏽","name":""},{"codes":["1f443","1f3fe"],"status":"fully-qualified","emoji":"👃🏾","name":""},{"codes":["1f443","1f3ff"],"status":"fully-qualified","emoji":"👃🏿","name":""},{"codes":["1f444"],"emoji":"👄","name":"mouth"},{"codes":["1f445"],"emoji":"👅","name":"tongue"},{"codes":["1f446"],"emoji":"👆","name":"white up pointing backhand index"},{"codes":["1f446","1f3fb"],"status":"fully-qualified","emoji":"👆🏻","name":""},{"codes":["1f446","1f3fc"],"status":"fully-qualified","emoji":"👆🏼","name":""},{"codes":["1f446","1f3fd"],"status":"fully-qualified","emoji":"👆🏽","name":""},{"codes":["1f446","1f3fe"],"status":"fully-qualified","emoji":"👆🏾","name":""},{"codes":["1f446","1f3ff"],"status":"fully-qualified","emoji":"👆🏿","name":""},{"codes":["1f447"],"emoji":"👇","name":"white down pointing backhand index"},{"codes":["1f447","1f3fb"],"status":"fully-qualified","emoji":"👇🏻","name":""},{"codes":["1f447","1f3fc"],"status":"fully-qualified","emoji":"👇🏼","name":""},{"codes":["1f447","1f3fd"],"status":"fully-qualified","emoji":"👇🏽","name":""},{"codes":["1f447","1f3fe"],"status":"fully-qualified","emoji":"👇🏾","name":""},{"codes":["1f447","1f3ff"],"status":"fully-qualified","emoji":"👇🏿","name":""},{"codes":["1f448"],"emoji":"👈","name":"white left pointing backhand index"},{"codes":["1f448","1f3fb"],"status":"fully-qualified","emoji":"👈🏻","name":""},{"codes":["1f448","1f3fc"],"status":"fully-qualified","emoji":"👈🏼","name":""},{"codes":["1f448","1f3fd"],"status":"fully-qualified","emoji":"👈🏽","name":""},{"codes":["1f448","1f3fe"],"status":"fully-qualified","emoji":"👈🏾","name":""},{"codes":["1f448","1f3ff"],"status":"fully-qualified","emoji":"👈🏿","name":""},{"codes":["1f449"],"emoji":"👉","name":"white right pointing backhand index"},{"codes":["1f449","1f3fb"],"status":"fully-qualified","emoji":"👉🏻","name":""},{"codes":["1f449","1f3fc"],"status":"fully-qualified","emoji":"👉🏼","name":""},{"codes":["1f449","1f3fd"],"status":"fully-qualified","emoji":"👉🏽","name":""},{"codes":["1f449","1f3fe"],"status":"fully-qualified","emoji":"👉🏾","name":""},{"codes":["1f449","1f3ff"],"status":"fully-qualified","emoji":"👉🏿","name":""},{"codes":["1f44a"],"emoji":"👊","name":"fisted hand sign"},{"codes":["1f44a","1f3fb"],"status":"fully-qualified","emoji":"👊🏻","name":""},{"codes":["1f44a","1f3fc"],"status":"fully-qualified","emoji":"👊🏼","name":""},{"codes":["1f44a","1f3fd"],"status":"fully-qualified","emoji":"👊🏽","name":""},{"codes":["1f44a","1f3fe"],"status":"fully-qualified","emoji":"👊🏾","name":""},{"codes":["1f44a","1f3ff"],"status":"fully-qualified","emoji":"👊🏿","name":""},{"codes":["1f44b"],"emoji":"👋","name":"waving hand sign"},{"codes":["1f44b","1f3fb"],"status":"fully-qualified","emoji":"👋🏻","name":""},{"codes":["1f44b","1f3fc"],"status":"fully-qualified","emoji":"👋🏼","name":""},{"codes":["1f44b","1f3fd"],"status":"fully-qualified","emoji":"👋🏽","name":""},{"codes":["1f44b","1f3fe"],"status":"fully-qualified","emoji":"👋🏾","name":""},{"codes":["1f44b","1f3ff"],"status":"fully-qualified","emoji":"👋🏿","name":""},{"codes":["1f44c"],"emoji":"👌","name":"ok hand sign"},{"codes":["1f44c","1f3fb"],"status":"fully-qualified","emoji":"👌🏻","name":""},{"codes":["1f44c","1f3fc"],"status":"fully-qualified","emoji":"👌🏼","name":""},{"codes":["1f44c","1f3fd"],"status":"fully-qualified","emoji":"👌🏽","name":""},{"codes":["1f44c","1f3fe"],"status":"fully-qualified","emoji":"👌🏾","name":""},{"codes":["1f44c","1f3ff"],"status":"fully-qualified","emoji":"👌🏿","name":""},{"codes":["1f44d"],"emoji":"👍","name":"thumbs up sign"},{"codes":["1f44d","1f3fb"],"status":"fully-qualified","emoji":"👍🏻","name":""},{"codes":["1f44d","1f3fc"],"status":"fully-qualified","emoji":"👍🏼","name":""},{"codes":["1f44d","1f3fd"],"status":"fully-qualified","emoji":"👍🏽","name":""},{"codes":["1f44d","1f3fe"],"status":"fully-qualified","emoji":"👍🏾","name":""},{"codes":["1f44d","1f3ff"],"status":"fully-qualified","emoji":"👍🏿","name":""},{"codes":["1f44e"],"emoji":"👎","name":"thumbs down sign"},{"codes":["1f44e","1f3fb"],"status":"fully-qualified","emoji":"👎🏻","name":""},{"codes":["1f44e","1f3fc"],"status":"fully-qualified","emoji":"👎🏼","name":""},{"codes":["1f44e","1f3fd"],"status":"fully-qualified","emoji":"👎🏽","name":""},{"codes":["1f44e","1f3fe"],"status":"fully-qualified","emoji":"👎🏾","name":""},{"codes":["1f44e","1f3ff"],"status":"fully-qualified","emoji":"👎🏿","name":""},{"codes":["1f44f"],"emoji":"👏","name":"clapping hands sign"},{"codes":["1f44f","1f3fb"],"status":"fully-qualified","emoji":"👏🏻","name":""},{"codes":["1f44f","1f3fc"],"status":"fully-qualified","emoji":"👏🏼","name":""},{"codes":["1f44f","1f3fd"],"status":"fully-qualified","emoji":"👏🏽","name":""},{"codes":["1f44f","1f3fe"],"status":"fully-qualified","emoji":"👏🏾","name":""},{"codes":["1f44f","1f3ff"],"status":"fully-qualified","emoji":"👏🏿","name":""},{"codes":["1f450"],"emoji":"👐","name":"open hands sign"},{"codes":["1f450","1f3fb"],"status":"fully-qualified","emoji":"👐🏻","name":""},{"codes":["1f450","1f3fc"],"status":"fully-qualified","emoji":"👐🏼","name":""},{"codes":["1f450","1f3fd"],"status":"fully-qualified","emoji":"👐🏽","name":""},{"codes":["1f450","1f3fe"],"status":"fully-qualified","emoji":"👐🏾","name":""},{"codes":["1f450","1f3ff"],"status":"fully-qualified","emoji":"👐🏿","name":""},{"codes":["1f463"],"emoji":"👣","name":"footprints"},{"codes":["1f464"],"emoji":"👤","name":"bust in silhouette"},{"codes":["1f465"],"emoji":"👥","name":"busts in silhouette"},{"codes":["1f466"],"emoji":"👦","name":"boy"},{"codes":["1f466","1f3fb"],"status":"fully-qualified","emoji":"👦🏻","name":""},{"codes":["1f466","1f3fc"],"status":"fully-qualified","emoji":"👦🏼","name":""},{"codes":["1f466","1f3fd"],"status":"fully-qualified","emoji":"👦🏽","name":""},{"codes":["1f466","1f3fe"],"status":"fully-qualified","emoji":"👦🏾","name":""},{"codes":["1f466","1f3ff"],"status":"fully-qualified","emoji":"👦🏿","name":""},{"codes":["1f467"],"emoji":"👧","name":"girl"},{"codes":["1f467","1f3fb"],"status":"fully-qualified","emoji":"👧🏻","name":""},{"codes":["1f467","1f3fc"],"status":"fully-qualified","emoji":"👧🏼","name":""},{"codes":["1f467","1f3fd"],"status":"fully-qualified","emoji":"👧🏽","name":""},{"codes":["1f467","1f3fe"],"status":"fully-qualified","emoji":"👧🏾","name":""},{"codes":["1f467","1f3ff"],"status":"fully-qualified","emoji":"👧🏿","name":""},{"codes":["1f468","200d","1f33e"],"emoji":"👨‍🌾","name":""},{"codes":["1f468","1f3fb","200d","1f33e"],"status":"fully-qualified","emoji":"👨🏻‍🌾","name":""},{"codes":["1f468","1f3fc","200d","1f33e"],"status":"fully-qualified","emoji":"👨🏼‍🌾","name":""},{"codes":["1f468","1f3fd","200d","1f33e"],"status":"fully-qualified","emoji":"👨🏽‍🌾","name":""},{"codes":["1f468","1f3fe","200d","1f33e"],"status":"fully-qualified","emoji":"👨🏾‍🌾","name":""},{"codes":["1f468","1f3ff","200d","1f33e"],"status":"fully-qualified","emoji":"👨🏿‍🌾","name":""},{"codes":["1f468","200d","1f373"],"emoji":"👨‍🍳","name":""},{"codes":["1f468","1f3fb","200d","1f373"],"status":"fully-qualified","emoji":"👨🏻‍🍳","name":""},{"codes":["1f468","1f3fc","200d","1f373"],"status":"fully-qualified","emoji":"👨🏼‍🍳","name":""},{"codes":["1f468","1f3fd","200d","1f373"],"status":"fully-qualified","emoji":"👨🏽‍🍳","name":""},{"codes":["1f468","1f3fe","200d","1f373"],"status":"fully-qualified","emoji":"👨🏾‍🍳","name":""},{"codes":["1f468","1f3ff","200d","1f373"],"status":"fully-qualified","emoji":"👨🏿‍🍳","name":""},{"codes":["1f468","200d","1f37c"],"emoji":"👨‍🍼","name":""},{"codes":["1f468","1f3fb","200d","1f37c"],"status":"fully-qualified","emoji":"👨🏻‍🍼","name":""},{"codes":["1f468","1f3fc","200d","1f37c"],"status":"fully-qualified","emoji":"👨🏼‍🍼","name":""},{"codes":["1f468","1f3fd","200d","1f37c"],"status":"fully-qualified","emoji":"👨🏽‍🍼","name":""},{"codes":["1f468","1f3fe","200d","1f37c"],"status":"fully-qualified","emoji":"👨🏾‍🍼","name":""},{"codes":["1f468","1f3ff","200d","1f37c"],"status":"fully-qualified","emoji":"👨🏿‍🍼","name":""},{"codes":["1f468","200d","1f393"],"emoji":"👨‍🎓","name":""},{"codes":["1f468","1f3fb","200d","1f393"],"status":"fully-qualified","emoji":"👨🏻‍🎓","name":""},{"codes":["1f468","1f3fc","200d","1f393"],"status":"fully-qualified","emoji":"👨🏼‍🎓","name":""},{"codes":["1f468","1f3fd","200d","1f393"],"status":"fully-qualified","emoji":"👨🏽‍🎓","name":""},{"codes":["1f468","1f3fe","200d","1f393"],"status":"fully-qualified","emoji":"👨🏾‍🎓","name":""},{"codes":["1f468","1f3ff","200d","1f393"],"status":"fully-qualified","emoji":"👨🏿‍🎓","name":""},{"codes":["1f468","200d","1f3a4"],"emoji":"👨‍🎤","name":""},{"codes":["1f468","1f3fb","200d","1f3a4"],"status":"fully-qualified","emoji":"👨🏻‍🎤","name":""},{"codes":["1f468","1f3fc","200d","1f3a4"],"status":"fully-qualified","emoji":"👨🏼‍🎤","name":""},{"codes":["1f468","1f3fd","200d","1f3a4"],"status":"fully-qualified","emoji":"👨🏽‍🎤","name":""},{"codes":["1f468","1f3fe","200d","1f3a4"],"status":"fully-qualified","emoji":"👨🏾‍🎤","name":""},{"codes":["1f468","1f3ff","200d","1f3a4"],"status":"fully-qualified","emoji":"👨🏿‍🎤","name":""},{"codes":["1f468","200d","1f3a8"],"emoji":"👨‍🎨","name":""},{"codes":["1f468","1f3fb","200d","1f3a8"],"status":"fully-qualified","emoji":"👨🏻‍🎨","name":""},{"codes":["1f468","1f3fc","200d","1f3a8"],"status":"fully-qualified","emoji":"👨🏼‍🎨","name":""},{"codes":["1f468","1f3fd","200d","1f3a8"],"status":"fully-qualified","emoji":"👨🏽‍🎨","name":""},{"codes":["1f468","1f3fe","200d","1f3a8"],"status":"fully-qualified","emoji":"👨🏾‍🎨","name":""},{"codes":["1f468","1f3ff","200d","1f3a8"],"status":"fully-qualified","emoji":"👨🏿‍🎨","name":""},{"codes":["1f468","200d","1f3eb"],"emoji":"👨‍🏫","name":""},{"codes":["1f468","1f3fb","200d","1f3eb"],"status":"fully-qualified","emoji":"👨🏻‍🏫","name":""},{"codes":["1f468","1f3fc","200d","1f3eb"],"status":"fully-qualified","emoji":"👨🏼‍🏫","name":""},{"codes":["1f468","1f3fd","200d","1f3eb"],"status":"fully-qualified","emoji":"👨🏽‍🏫","name":""},{"codes":["1f468","1f3fe","200d","1f3eb"],"status":"fully-qualified","emoji":"👨🏾‍🏫","name":""},{"codes":["1f468","1f3ff","200d","1f3eb"],"status":"fully-qualified","emoji":"👨🏿‍🏫","name":""},{"codes":["1f468","200d","1f3ed"],"emoji":"👨‍🏭","name":""},{"codes":["1f468","1f3fb","200d","1f3ed"],"status":"fully-qualified","emoji":"👨🏻‍🏭","name":""},{"codes":["1f468","1f3fc","200d","1f3ed"],"status":"fully-qualified","emoji":"👨🏼‍🏭","name":""},{"codes":["1f468","1f3fd","200d","1f3ed"],"status":"fully-qualified","emoji":"👨🏽‍🏭","name":""},{"codes":["1f468","1f3fe","200d","1f3ed"],"status":"fully-qualified","emoji":"👨🏾‍🏭","name":""},{"codes":["1f468","1f3ff","200d","1f3ed"],"status":"fully-qualified","emoji":"👨🏿‍🏭","name":""},{"codes":["1f468","200d","1f466","200d","1f466"],"emoji":"👨‍👦‍👦","name":""},{"codes":["1f468","200d","1f466"],"emoji":"👨‍👦","name":""},{"codes":["1f468","200d","1f467","200d","1f466"],"emoji":"👨‍👧‍👦","name":""},{"codes":["1f468","200d","1f467","200d","1f467"],"emoji":"👨‍👧‍👧","name":""},{"codes":["1f468","200d","1f467"],"emoji":"👨‍👧","name":""},{"codes":["1f468","200d","1f468","200d","1f466"],"emoji":"👨‍👨‍👦","name":""},{"codes":["1f468","200d","1f468","200d","1f466","200d","1f466"],"emoji":"👨‍👨‍👦‍👦","name":""},{"codes":["1f468","200d","1f468","200d","1f467"],"emoji":"👨‍👨‍👧","name":""},{"codes":["1f468","200d","1f468","200d","1f467","200d","1f466"],"emoji":"👨‍👨‍👧‍👦","name":""},{"codes":["1f468","200d","1f468","200d","1f467","200d","1f467"],"emoji":"👨‍👨‍👧‍👧","name":""},{"codes":["1f468","200d","1f469","200d","1f466"],"emoji":"👨‍👩‍👦","name":""},{"codes":["1f468","200d","1f469","200d","1f466","200d","1f466"],"emoji":"👨‍👩‍👦‍👦","name":""},{"codes":["1f468","200d","1f469","200d","1f467"],"emoji":"👨‍👩‍👧","name":""},{"codes":["1f468","200d","1f469","200d","1f467","200d","1f466"],"emoji":"👨‍👩‍👧‍👦","name":""},{"codes":["1f468","200d","1f469","200d","1f467","200d","1f467"],"emoji":"👨‍👩‍👧‍👧","name":""},{"codes":["1f468","200d","1f4bb"],"emoji":"👨‍💻","name":""},{"codes":["1f468","1f3fb","200d","1f4bb"],"status":"fully-qualified","emoji":"👨🏻‍💻","name":""},{"codes":["1f468","1f3fc","200d","1f4bb"],"status":"fully-qualified","emoji":"👨🏼‍💻","name":""},{"codes":["1f468","1f3fd","200d","1f4bb"],"status":"fully-qualified","emoji":"👨🏽‍💻","name":""},{"codes":["1f468","1f3fe","200d","1f4bb"],"status":"fully-qualified","emoji":"👨🏾‍💻","name":""},{"codes":["1f468","1f3ff","200d","1f4bb"],"status":"fully-qualified","emoji":"👨🏿‍💻","name":""},{"codes":["1f468","200d","1f4bc"],"emoji":"👨‍💼","name":""},{"codes":["1f468","1f3fb","200d","1f4bc"],"status":"fully-qualified","emoji":"👨🏻‍💼","name":""},{"codes":["1f468","1f3fc","200d","1f4bc"],"status":"fully-qualified","emoji":"👨🏼‍💼","name":""},{"codes":["1f468","1f3fd","200d","1f4bc"],"status":"fully-qualified","emoji":"👨🏽‍💼","name":""},{"codes":["1f468","1f3fe","200d","1f4bc"],"status":"fully-qualified","emoji":"👨🏾‍💼","name":""},{"codes":["1f468","1f3ff","200d","1f4bc"],"status":"fully-qualified","emoji":"👨🏿‍💼","name":""},{"codes":["1f468","200d","1f527"],"emoji":"👨‍🔧","name":""},{"codes":["1f468","1f3fb","200d","1f527"],"status":"fully-qualified","emoji":"👨🏻‍🔧","name":""},{"codes":["1f468","1f3fc","200d","1f527"],"status":"fully-qualified","emoji":"👨🏼‍🔧","name":""},{"codes":["1f468","1f3fd","200d","1f527"],"status":"fully-qualified","emoji":"👨🏽‍🔧","name":""},{"codes":["1f468","1f3fe","200d","1f527"],"status":"fully-qualified","emoji":"👨🏾‍🔧","name":""},{"codes":["1f468","1f3ff","200d","1f527"],"status":"fully-qualified","emoji":"👨🏿‍🔧","name":""},{"codes":["1f468","200d","1f52c"],"emoji":"👨‍🔬","name":""},{"codes":["1f468","1f3fb","200d","1f52c"],"status":"fully-qualified","emoji":"👨🏻‍🔬","name":""},{"codes":["1f468","1f3fc","200d","1f52c"],"status":"fully-qualified","emoji":"👨🏼‍🔬","name":""},{"codes":["1f468","1f3fd","200d","1f52c"],"status":"fully-qualified","emoji":"👨🏽‍🔬","name":""},{"codes":["1f468","1f3fe","200d","1f52c"],"status":"fully-qualified","emoji":"👨🏾‍🔬","name":""},{"codes":["1f468","1f3ff","200d","1f52c"],"status":"fully-qualified","emoji":"👨🏿‍🔬","name":""},{"codes":["1f468","200d","1f680"],"emoji":"👨‍🚀","name":""},{"codes":["1f468","1f3fb","200d","1f680"],"status":"fully-qualified","emoji":"👨🏻‍🚀","name":""},{"codes":["1f468","1f3fc","200d","1f680"],"status":"fully-qualified","emoji":"👨🏼‍🚀","name":""},{"codes":["1f468","1f3fd","200d","1f680"],"status":"fully-qualified","emoji":"👨🏽‍🚀","name":""},{"codes":["1f468","1f3fe","200d","1f680"],"status":"fully-qualified","emoji":"👨🏾‍🚀","name":""},{"codes":["1f468","1f3ff","200d","1f680"],"status":"fully-qualified","emoji":"👨🏿‍🚀","name":""},{"codes":["1f468","200d","1f692"],"emoji":"👨‍🚒","name":""},{"codes":["1f468","1f3fb","200d","1f692"],"status":"fully-qualified","emoji":"👨🏻‍🚒","name":""},{"codes":["1f468","1f3fc","200d","1f692"],"status":"fully-qualified","emoji":"👨🏼‍🚒","name":""},{"codes":["1f468","1f3fd","200d","1f692"],"status":"fully-qualified","emoji":"👨🏽‍🚒","name":""},{"codes":["1f468","1f3fe","200d","1f692"],"status":"fully-qualified","emoji":"👨🏾‍🚒","name":""},{"codes":["1f468","1f3ff","200d","1f692"],"status":"fully-qualified","emoji":"👨🏿‍🚒","name":""},{"codes":["1f468","200d","1f9af"],"emoji":"👨‍🦯","name":""},{"codes":["1f468","1f3fb","200d","1f9af"],"status":"fully-qualified","emoji":"👨🏻‍🦯","name":""},{"codes":["1f468","1f3fc","200d","1f9af"],"status":"fully-qualified","emoji":"👨🏼‍🦯","name":""},{"codes":["1f468","1f3fd","200d","1f9af"],"status":"fully-qualified","emoji":"👨🏽‍🦯","name":""},{"codes":["1f468","1f3fe","200d","1f9af"],"status":"fully-qualified","emoji":"👨🏾‍🦯","name":""},{"codes":["1f468","1f3ff","200d","1f9af"],"status":"fully-qualified","emoji":"👨🏿‍🦯","name":""},{"codes":["1f468","200d","1f9b0"],"emoji":"👨‍🦰","name":""},{"codes":["1f468","1f3fb","200d","1f9b0"],"status":"fully-qualified","emoji":"👨🏻‍🦰","name":""},{"codes":["1f468","1f3fc","200d","1f9b0"],"status":"fully-qualified","emoji":"👨🏼‍🦰","name":""},{"codes":["1f468","1f3fd","200d","1f9b0"],"status":"fully-qualified","emoji":"👨🏽‍🦰","name":""},{"codes":["1f468","1f3fe","200d","1f9b0"],"status":"fully-qualified","emoji":"👨🏾‍🦰","name":""},{"codes":["1f468","1f3ff","200d","1f9b0"],"status":"fully-qualified","emoji":"👨🏿‍🦰","name":""},{"codes":["1f468","200d","1f9b1"],"emoji":"👨‍🦱","name":""},{"codes":["1f468","1f3fb","200d","1f9b1"],"status":"fully-qualified","emoji":"👨🏻‍🦱","name":""},{"codes":["1f468","1f3fc","200d","1f9b1"],"status":"fully-qualified","emoji":"👨🏼‍🦱","name":""},{"codes":["1f468","1f3fd","200d","1f9b1"],"status":"fully-qualified","emoji":"👨🏽‍🦱","name":""},{"codes":["1f468","1f3fe","200d","1f9b1"],"status":"fully-qualified","emoji":"👨🏾‍🦱","name":""},{"codes":["1f468","1f3ff","200d","1f9b1"],"status":"fully-qualified","emoji":"👨🏿‍🦱","name":""},{"codes":["1f468","200d","1f9b2"],"emoji":"👨‍🦲","name":""},{"codes":["1f468","1f3fb","200d","1f9b2"],"status":"fully-qualified","emoji":"👨🏻‍🦲","name":""},{"codes":["1f468","1f3fc","200d","1f9b2"],"status":"fully-qualified","emoji":"👨🏼‍🦲","name":""},{"codes":["1f468","1f3fd","200d","1f9b2"],"status":"fully-qualified","emoji":"👨🏽‍🦲","name":""},{"codes":["1f468","1f3fe","200d","1f9b2"],"status":"fully-qualified","emoji":"👨🏾‍🦲","name":""},{"codes":["1f468","1f3ff","200d","1f9b2"],"status":"fully-qualified","emoji":"👨🏿‍🦲","name":""},{"codes":["1f468","200d","1f9b3"],"emoji":"👨‍🦳","name":""},{"codes":["1f468","1f3fb","200d","1f9b3"],"status":"fully-qualified","emoji":"👨🏻‍🦳","name":""},{"codes":["1f468","1f3fc","200d","1f9b3"],"status":"fully-qualified","emoji":"👨🏼‍🦳","name":""},{"codes":["1f468","1f3fd","200d","1f9b3"],"status":"fully-qualified","emoji":"👨🏽‍🦳","name":""},{"codes":["1f468","1f3fe","200d","1f9b3"],"status":"fully-qualified","emoji":"👨🏾‍🦳","name":""},{"codes":["1f468","1f3ff","200d","1f9b3"],"status":"fully-qualified","emoji":"👨🏿‍🦳","name":""},{"codes":["1f468","200d","1f9bc"],"emoji":"👨‍🦼","name":""},{"codes":["1f468","1f3fb","200d","1f9bc"],"status":"fully-qualified","emoji":"👨🏻‍🦼","name":""},{"codes":["1f468","1f3fc","200d","1f9bc"],"status":"fully-qualified","emoji":"👨🏼‍🦼","name":""},{"codes":["1f468","1f3fd","200d","1f9bc"],"status":"fully-qualified","emoji":"👨🏽‍🦼","name":""},{"codes":["1f468","1f3fe","200d","1f9bc"],"status":"fully-qualified","emoji":"👨🏾‍🦼","name":""},{"codes":["1f468","1f3ff","200d","1f9bc"],"status":"fully-qualified","emoji":"👨🏿‍🦼","name":""},{"codes":["1f468","200d","1f9bd"],"emoji":"👨‍🦽","name":""},{"codes":["1f468","1f3fb","200d","1f9bd"],"status":"fully-qualified","emoji":"👨🏻‍🦽","name":""},{"codes":["1f468","1f3fc","200d","1f9bd"],"status":"fully-qualified","emoji":"👨🏼‍🦽","name":""},{"codes":["1f468","1f3fd","200d","1f9bd"],"status":"fully-qualified","emoji":"👨🏽‍🦽","name":""},{"codes":["1f468","1f3fe","200d","1f9bd"],"status":"fully-qualified","emoji":"👨🏾‍🦽","name":""},{"codes":["1f468","1f3ff","200d","1f9bd"],"status":"fully-qualified","emoji":"👨🏿‍🦽","name":""},{"codes":["1f468","200d","2695","fe0f"],"emoji":"👨‍⚕️","name":""},{"codes":["1f468","1f3fb","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👨🏻‍⚕️","name":""},{"codes":["1f468","1f3fc","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👨🏼‍⚕️","name":""},{"codes":["1f468","1f3fd","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👨🏽‍⚕️","name":""},{"codes":["1f468","1f3fe","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👨🏾‍⚕️","name":""},{"codes":["1f468","1f3ff","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👨🏿‍⚕️","name":""},{"codes":["1f468","200d","2696","fe0f"],"emoji":"👨‍⚖️","name":""},{"codes":["1f468","1f3fb","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👨🏻‍⚖️","name":""},{"codes":["1f468","1f3fc","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👨🏼‍⚖️","name":""},{"codes":["1f468","1f3fd","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👨🏽‍⚖️","name":""},{"codes":["1f468","1f3fe","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👨🏾‍⚖️","name":""},{"codes":["1f468","1f3ff","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👨🏿‍⚖️","name":""},{"codes":["1f468","200d","2708","fe0f"],"emoji":"👨‍✈️","name":""},{"codes":["1f468","1f3fb","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👨🏻‍✈️","name":""},{"codes":["1f468","1f3fc","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👨🏼‍✈️","name":""},{"codes":["1f468","1f3fd","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👨🏽‍✈️","name":""},{"codes":["1f468","1f3fe","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👨🏾‍✈️","name":""},{"codes":["1f468","1f3ff","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👨🏿‍✈️","name":""},{"codes":["1f468","200d","2764","fe0f","200d","1f468"],"emoji":"👨‍❤️‍👨","name":""},{"codes":["1f468","200d","2764","fe0f","200d","1f48b","200d","1f468"],"emoji":"👨‍❤️‍💋‍👨","name":""},{"codes":["1f468"],"emoji":"👨","name":"man"},{"codes":["1f468","1f3fb"],"status":"fully-qualified","emoji":"👨🏻","name":""},{"codes":["1f468","1f3fc"],"status":"fully-qualified","emoji":"👨🏼","name":""},{"codes":["1f468","1f3fd"],"status":"fully-qualified","emoji":"👨🏽","name":""},{"codes":["1f468","1f3fe"],"status":"fully-qualified","emoji":"👨🏾","name":""},{"codes":["1f468","1f3ff"],"status":"fully-qualified","emoji":"👨🏿","name":""},{"codes":["1f469","200d","1f33e"],"emoji":"👩‍🌾","name":""},{"codes":["1f469","1f3fb","200d","1f33e"],"status":"fully-qualified","emoji":"👩🏻‍🌾","name":""},{"codes":["1f469","1f3fc","200d","1f33e"],"status":"fully-qualified","emoji":"👩🏼‍🌾","name":""},{"codes":["1f469","1f3fd","200d","1f33e"],"status":"fully-qualified","emoji":"👩🏽‍🌾","name":""},{"codes":["1f469","1f3fe","200d","1f33e"],"status":"fully-qualified","emoji":"👩🏾‍🌾","name":""},{"codes":["1f469","1f3ff","200d","1f33e"],"status":"fully-qualified","emoji":"👩🏿‍🌾","name":""},{"codes":["1f469","200d","1f373"],"emoji":"👩‍🍳","name":""},{"codes":["1f469","1f3fb","200d","1f373"],"status":"fully-qualified","emoji":"👩🏻‍🍳","name":""},{"codes":["1f469","1f3fc","200d","1f373"],"status":"fully-qualified","emoji":"👩🏼‍🍳","name":""},{"codes":["1f469","1f3fd","200d","1f373"],"status":"fully-qualified","emoji":"👩🏽‍🍳","name":""},{"codes":["1f469","1f3fe","200d","1f373"],"status":"fully-qualified","emoji":"👩🏾‍🍳","name":""},{"codes":["1f469","1f3ff","200d","1f373"],"status":"fully-qualified","emoji":"👩🏿‍🍳","name":""},{"codes":["1f469","200d","1f37c"],"emoji":"👩‍🍼","name":""},{"codes":["1f469","1f3fb","200d","1f37c"],"status":"fully-qualified","emoji":"👩🏻‍🍼","name":""},{"codes":["1f469","1f3fc","200d","1f37c"],"status":"fully-qualified","emoji":"👩🏼‍🍼","name":""},{"codes":["1f469","1f3fd","200d","1f37c"],"status":"fully-qualified","emoji":"👩🏽‍🍼","name":""},{"codes":["1f469","1f3fe","200d","1f37c"],"status":"fully-qualified","emoji":"👩🏾‍🍼","name":""},{"codes":["1f469","1f3ff","200d","1f37c"],"status":"fully-qualified","emoji":"👩🏿‍🍼","name":""},{"codes":["1f469","200d","1f393"],"emoji":"👩‍🎓","name":""},{"codes":["1f469","1f3fb","200d","1f393"],"status":"fully-qualified","emoji":"👩🏻‍🎓","name":""},{"codes":["1f469","1f3fc","200d","1f393"],"status":"fully-qualified","emoji":"👩🏼‍🎓","name":""},{"codes":["1f469","1f3fd","200d","1f393"],"status":"fully-qualified","emoji":"👩🏽‍🎓","name":""},{"codes":["1f469","1f3fe","200d","1f393"],"status":"fully-qualified","emoji":"👩🏾‍🎓","name":""},{"codes":["1f469","1f3ff","200d","1f393"],"status":"fully-qualified","emoji":"👩🏿‍🎓","name":""},{"codes":["1f469","200d","1f3a4"],"emoji":"👩‍🎤","name":""},{"codes":["1f469","1f3fb","200d","1f3a4"],"status":"fully-qualified","emoji":"👩🏻‍🎤","name":""},{"codes":["1f469","1f3fc","200d","1f3a4"],"status":"fully-qualified","emoji":"👩🏼‍🎤","name":""},{"codes":["1f469","1f3fd","200d","1f3a4"],"status":"fully-qualified","emoji":"👩🏽‍🎤","name":""},{"codes":["1f469","1f3fe","200d","1f3a4"],"status":"fully-qualified","emoji":"👩🏾‍🎤","name":""},{"codes":["1f469","1f3ff","200d","1f3a4"],"status":"fully-qualified","emoji":"👩🏿‍🎤","name":""},{"codes":["1f469","200d","1f3a8"],"emoji":"👩‍🎨","name":""},{"codes":["1f469","1f3fb","200d","1f3a8"],"status":"fully-qualified","emoji":"👩🏻‍🎨","name":""},{"codes":["1f469","1f3fc","200d","1f3a8"],"status":"fully-qualified","emoji":"👩🏼‍🎨","name":""},{"codes":["1f469","1f3fd","200d","1f3a8"],"status":"fully-qualified","emoji":"👩🏽‍🎨","name":""},{"codes":["1f469","1f3fe","200d","1f3a8"],"status":"fully-qualified","emoji":"👩🏾‍🎨","name":""},{"codes":["1f469","1f3ff","200d","1f3a8"],"status":"fully-qualified","emoji":"👩🏿‍🎨","name":""},{"codes":["1f469","200d","1f3eb"],"emoji":"👩‍🏫","name":""},{"codes":["1f469","1f3fb","200d","1f3eb"],"status":"fully-qualified","emoji":"👩🏻‍🏫","name":""},{"codes":["1f469","1f3fc","200d","1f3eb"],"status":"fully-qualified","emoji":"👩🏼‍🏫","name":""},{"codes":["1f469","1f3fd","200d","1f3eb"],"status":"fully-qualified","emoji":"👩🏽‍🏫","name":""},{"codes":["1f469","1f3fe","200d","1f3eb"],"status":"fully-qualified","emoji":"👩🏾‍🏫","name":""},{"codes":["1f469","1f3ff","200d","1f3eb"],"status":"fully-qualified","emoji":"👩🏿‍🏫","name":""},{"codes":["1f469","200d","1f3ed"],"emoji":"👩‍🏭","name":""},{"codes":["1f469","1f3fb","200d","1f3ed"],"status":"fully-qualified","emoji":"👩🏻‍🏭","name":""},{"codes":["1f469","1f3fc","200d","1f3ed"],"status":"fully-qualified","emoji":"👩🏼‍🏭","name":""},{"codes":["1f469","1f3fd","200d","1f3ed"],"status":"fully-qualified","emoji":"👩🏽‍🏭","name":""},{"codes":["1f469","1f3fe","200d","1f3ed"],"status":"fully-qualified","emoji":"👩🏾‍🏭","name":""},{"codes":["1f469","1f3ff","200d","1f3ed"],"status":"fully-qualified","emoji":"👩🏿‍🏭","name":""},{"codes":["1f469","200d","1f466","200d","1f466"],"emoji":"👩‍👦‍👦","name":""},{"codes":["1f469","200d","1f466"],"emoji":"👩‍👦","name":""},{"codes":["1f469","200d","1f467","200d","1f466"],"emoji":"👩‍👧‍👦","name":""},{"codes":["1f469","200d","1f467","200d","1f467"],"emoji":"👩‍👧‍👧","name":""},{"codes":["1f469","200d","1f467"],"emoji":"👩‍👧","name":""},{"codes":["1f469","200d","1f469","200d","1f466"],"emoji":"👩‍👩‍👦","name":""},{"codes":["1f469","200d","1f469","200d","1f466","200d","1f466"],"emoji":"👩‍👩‍👦‍👦","name":""},{"codes":["1f469","200d","1f469","200d","1f467"],"emoji":"👩‍👩‍👧","name":""},{"codes":["1f469","200d","1f469","200d","1f467","200d","1f466"],"emoji":"👩‍👩‍👧‍👦","name":""},{"codes":["1f469","200d","1f469","200d","1f467","200d","1f467"],"emoji":"👩‍👩‍👧‍👧","name":""},{"codes":["1f469","200d","1f4bb"],"emoji":"👩‍💻","name":""},{"codes":["1f469","1f3fb","200d","1f4bb"],"status":"fully-qualified","emoji":"👩🏻‍💻","name":""},{"codes":["1f469","1f3fc","200d","1f4bb"],"status":"fully-qualified","emoji":"👩🏼‍💻","name":""},{"codes":["1f469","1f3fd","200d","1f4bb"],"status":"fully-qualified","emoji":"👩🏽‍💻","name":""},{"codes":["1f469","1f3fe","200d","1f4bb"],"status":"fully-qualified","emoji":"👩🏾‍💻","name":""},{"codes":["1f469","1f3ff","200d","1f4bb"],"status":"fully-qualified","emoji":"👩🏿‍💻","name":""},{"codes":["1f469","200d","1f4bc"],"emoji":"👩‍💼","name":""},{"codes":["1f469","1f3fb","200d","1f4bc"],"status":"fully-qualified","emoji":"👩🏻‍💼","name":""},{"codes":["1f469","1f3fc","200d","1f4bc"],"status":"fully-qualified","emoji":"👩🏼‍💼","name":""},{"codes":["1f469","1f3fd","200d","1f4bc"],"status":"fully-qualified","emoji":"👩🏽‍💼","name":""},{"codes":["1f469","1f3fe","200d","1f4bc"],"status":"fully-qualified","emoji":"👩🏾‍💼","name":""},{"codes":["1f469","1f3ff","200d","1f4bc"],"status":"fully-qualified","emoji":"👩🏿‍💼","name":""},{"codes":["1f469","200d","1f527"],"emoji":"👩‍🔧","name":""},{"codes":["1f469","1f3fb","200d","1f527"],"status":"fully-qualified","emoji":"👩🏻‍🔧","name":""},{"codes":["1f469","1f3fc","200d","1f527"],"status":"fully-qualified","emoji":"👩🏼‍🔧","name":""},{"codes":["1f469","1f3fd","200d","1f527"],"status":"fully-qualified","emoji":"👩🏽‍🔧","name":""},{"codes":["1f469","1f3fe","200d","1f527"],"status":"fully-qualified","emoji":"👩🏾‍🔧","name":""},{"codes":["1f469","1f3ff","200d","1f527"],"status":"fully-qualified","emoji":"👩🏿‍🔧","name":""},{"codes":["1f469","200d","1f52c"],"emoji":"👩‍🔬","name":""},{"codes":["1f469","1f3fb","200d","1f52c"],"status":"fully-qualified","emoji":"👩🏻‍🔬","name":""},{"codes":["1f469","1f3fc","200d","1f52c"],"status":"fully-qualified","emoji":"👩🏼‍🔬","name":""},{"codes":["1f469","1f3fd","200d","1f52c"],"status":"fully-qualified","emoji":"👩🏽‍🔬","name":""},{"codes":["1f469","1f3fe","200d","1f52c"],"status":"fully-qualified","emoji":"👩🏾‍🔬","name":""},{"codes":["1f469","1f3ff","200d","1f52c"],"status":"fully-qualified","emoji":"👩🏿‍🔬","name":""},{"codes":["1f469","200d","1f680"],"emoji":"👩‍🚀","name":""},{"codes":["1f469","1f3fb","200d","1f680"],"status":"fully-qualified","emoji":"👩🏻‍🚀","name":""},{"codes":["1f469","1f3fc","200d","1f680"],"status":"fully-qualified","emoji":"👩🏼‍🚀","name":""},{"codes":["1f469","1f3fd","200d","1f680"],"status":"fully-qualified","emoji":"👩🏽‍🚀","name":""},{"codes":["1f469","1f3fe","200d","1f680"],"status":"fully-qualified","emoji":"👩🏾‍🚀","name":""},{"codes":["1f469","1f3ff","200d","1f680"],"status":"fully-qualified","emoji":"👩🏿‍🚀","name":""},{"codes":["1f469","200d","1f692"],"emoji":"👩‍🚒","name":""},{"codes":["1f469","1f3fb","200d","1f692"],"status":"fully-qualified","emoji":"👩🏻‍🚒","name":""},{"codes":["1f469","1f3fc","200d","1f692"],"status":"fully-qualified","emoji":"👩🏼‍🚒","name":""},{"codes":["1f469","1f3fd","200d","1f692"],"status":"fully-qualified","emoji":"👩🏽‍🚒","name":""},{"codes":["1f469","1f3fe","200d","1f692"],"status":"fully-qualified","emoji":"👩🏾‍🚒","name":""},{"codes":["1f469","1f3ff","200d","1f692"],"status":"fully-qualified","emoji":"👩🏿‍🚒","name":""},{"codes":["1f469","200d","1f9af"],"emoji":"👩‍🦯","name":""},{"codes":["1f469","1f3fb","200d","1f9af"],"status":"fully-qualified","emoji":"👩🏻‍🦯","name":""},{"codes":["1f469","1f3fc","200d","1f9af"],"status":"fully-qualified","emoji":"👩🏼‍🦯","name":""},{"codes":["1f469","1f3fd","200d","1f9af"],"status":"fully-qualified","emoji":"👩🏽‍🦯","name":""},{"codes":["1f469","1f3fe","200d","1f9af"],"status":"fully-qualified","emoji":"👩🏾‍🦯","name":""},{"codes":["1f469","1f3ff","200d","1f9af"],"status":"fully-qualified","emoji":"👩🏿‍🦯","name":""},{"codes":["1f469","200d","1f9b0"],"emoji":"👩‍🦰","name":""},{"codes":["1f469","1f3fb","200d","1f9b0"],"status":"fully-qualified","emoji":"👩🏻‍🦰","name":""},{"codes":["1f469","1f3fc","200d","1f9b0"],"status":"fully-qualified","emoji":"👩🏼‍🦰","name":""},{"codes":["1f469","1f3fd","200d","1f9b0"],"status":"fully-qualified","emoji":"👩🏽‍🦰","name":""},{"codes":["1f469","1f3fe","200d","1f9b0"],"status":"fully-qualified","emoji":"👩🏾‍🦰","name":""},{"codes":["1f469","1f3ff","200d","1f9b0"],"status":"fully-qualified","emoji":"👩🏿‍🦰","name":""},{"codes":["1f469","200d","1f9b1"],"emoji":"👩‍🦱","name":""},{"codes":["1f469","1f3fb","200d","1f9b1"],"status":"fully-qualified","emoji":"👩🏻‍🦱","name":""},{"codes":["1f469","1f3fc","200d","1f9b1"],"status":"fully-qualified","emoji":"👩🏼‍🦱","name":""},{"codes":["1f469","1f3fd","200d","1f9b1"],"status":"fully-qualified","emoji":"👩🏽‍🦱","name":""},{"codes":["1f469","1f3fe","200d","1f9b1"],"status":"fully-qualified","emoji":"👩🏾‍🦱","name":""},{"codes":["1f469","1f3ff","200d","1f9b1"],"status":"fully-qualified","emoji":"👩🏿‍🦱","name":""},{"codes":["1f469","200d","1f9b2"],"emoji":"👩‍🦲","name":""},{"codes":["1f469","1f3fb","200d","1f9b2"],"status":"fully-qualified","emoji":"👩🏻‍🦲","name":""},{"codes":["1f469","1f3fc","200d","1f9b2"],"status":"fully-qualified","emoji":"👩🏼‍🦲","name":""},{"codes":["1f469","1f3fd","200d","1f9b2"],"status":"fully-qualified","emoji":"👩🏽‍🦲","name":""},{"codes":["1f469","1f3fe","200d","1f9b2"],"status":"fully-qualified","emoji":"👩🏾‍🦲","name":""},{"codes":["1f469","1f3ff","200d","1f9b2"],"status":"fully-qualified","emoji":"👩🏿‍🦲","name":""},{"codes":["1f469","200d","1f9b3"],"emoji":"👩‍🦳","name":""},{"codes":["1f469","1f3fb","200d","1f9b3"],"status":"fully-qualified","emoji":"👩🏻‍🦳","name":""},{"codes":["1f469","1f3fc","200d","1f9b3"],"status":"fully-qualified","emoji":"👩🏼‍🦳","name":""},{"codes":["1f469","1f3fd","200d","1f9b3"],"status":"fully-qualified","emoji":"👩🏽‍🦳","name":""},{"codes":["1f469","1f3fe","200d","1f9b3"],"status":"fully-qualified","emoji":"👩🏾‍🦳","name":""},{"codes":["1f469","1f3ff","200d","1f9b3"],"status":"fully-qualified","emoji":"👩🏿‍🦳","name":""},{"codes":["1f469","200d","1f9bc"],"emoji":"👩‍🦼","name":""},{"codes":["1f469","1f3fb","200d","1f9bc"],"status":"fully-qualified","emoji":"👩🏻‍🦼","name":""},{"codes":["1f469","1f3fc","200d","1f9bc"],"status":"fully-qualified","emoji":"👩🏼‍🦼","name":""},{"codes":["1f469","1f3fd","200d","1f9bc"],"status":"fully-qualified","emoji":"👩🏽‍🦼","name":""},{"codes":["1f469","1f3fe","200d","1f9bc"],"status":"fully-qualified","emoji":"👩🏾‍🦼","name":""},{"codes":["1f469","1f3ff","200d","1f9bc"],"status":"fully-qualified","emoji":"👩🏿‍🦼","name":""},{"codes":["1f469","200d","1f9bd"],"emoji":"👩‍🦽","name":""},{"codes":["1f469","1f3fb","200d","1f9bd"],"status":"fully-qualified","emoji":"👩🏻‍🦽","name":""},{"codes":["1f469","1f3fc","200d","1f9bd"],"status":"fully-qualified","emoji":"👩🏼‍🦽","name":""},{"codes":["1f469","1f3fd","200d","1f9bd"],"status":"fully-qualified","emoji":"👩🏽‍🦽","name":""},{"codes":["1f469","1f3fe","200d","1f9bd"],"status":"fully-qualified","emoji":"👩🏾‍🦽","name":""},{"codes":["1f469","1f3ff","200d","1f9bd"],"status":"fully-qualified","emoji":"👩🏿‍🦽","name":""},{"codes":["1f469","200d","2695","fe0f"],"emoji":"👩‍⚕️","name":""},{"codes":["1f469","1f3fb","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👩🏻‍⚕️","name":""},{"codes":["1f469","1f3fc","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👩🏼‍⚕️","name":""},{"codes":["1f469","1f3fd","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👩🏽‍⚕️","name":""},{"codes":["1f469","1f3fe","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👩🏾‍⚕️","name":""},{"codes":["1f469","1f3ff","200d","2695","fe0f"],"status":"fully-qualified","emoji":"👩🏿‍⚕️","name":""},{"codes":["1f469","200d","2696","fe0f"],"emoji":"👩‍⚖️","name":""},{"codes":["1f469","1f3fb","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👩🏻‍⚖️","name":""},{"codes":["1f469","1f3fc","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👩🏼‍⚖️","name":""},{"codes":["1f469","1f3fd","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👩🏽‍⚖️","name":""},{"codes":["1f469","1f3fe","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👩🏾‍⚖️","name":""},{"codes":["1f469","1f3ff","200d","2696","fe0f"],"status":"fully-qualified","emoji":"👩🏿‍⚖️","name":""},{"codes":["1f469","200d","2708","fe0f"],"emoji":"👩‍✈️","name":""},{"codes":["1f469","1f3fb","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👩🏻‍✈️","name":""},{"codes":["1f469","1f3fc","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👩🏼‍✈️","name":""},{"codes":["1f469","1f3fd","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👩🏽‍✈️","name":""},{"codes":["1f469","1f3fe","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👩🏾‍✈️","name":""},{"codes":["1f469","1f3ff","200d","2708","fe0f"],"status":"fully-qualified","emoji":"👩🏿‍✈️","name":""},{"codes":["1f469","200d","2764","fe0f","200d","1f468"],"emoji":"👩‍❤️‍👨","name":""},{"codes":["1f469","200d","2764","fe0f","200d","1f469"],"emoji":"👩‍❤️‍👩","name":""},{"codes":["1f469","200d","2764","fe0f","200d","1f48b","200d","1f468"],"emoji":"👩‍❤️‍💋‍👨","name":""},{"codes":["1f469","200d","2764","fe0f","200d","1f48b","200d","1f469"],"emoji":"👩‍❤️‍💋‍👩","name":""},{"codes":["1f469"],"emoji":"👩","name":"woman"},{"codes":["1f469","1f3fb"],"status":"fully-qualified","emoji":"👩🏻","name":""},{"codes":["1f469","1f3fc"],"status":"fully-qualified","emoji":"👩🏼","name":""},{"codes":["1f469","1f3fd"],"status":"fully-qualified","emoji":"👩🏽","name":""},{"codes":["1f469","1f3fe"],"status":"fully-qualified","emoji":"👩🏾","name":""},{"codes":["1f469","1f3ff"],"status":"fully-qualified","emoji":"👩🏿","name":""},{"codes":["1f46a"],"emoji":"👪","name":"family"},{"codes":["1f46b"],"emoji":"👫","name":"man and woman holding hands"},{"codes":["1f46b","1f3fb"],"status":"fully-qualified","emoji":"👫🏻","name":""},{"codes":["1f46b","1f3fc"],"status":"fully-qualified","emoji":"👫🏼","name":""},{"codes":["1f46b","1f3fd"],"status":"fully-qualified","emoji":"👫🏽","name":""},{"codes":["1f46b","1f3fe"],"status":"fully-qualified","emoji":"👫🏾","name":""},{"codes":["1f46b","1f3ff"],"status":"fully-qualified","emoji":"👫🏿","name":""},{"codes":["1f469","1f3fb","200d","1f91d","200d","1f468","1f3fc"],"status":"fully-qualified","emoji":"👩🏻‍🤝‍👨🏼","name":""},{"codes":["1f469","1f3fb","200d","1f91d","200d","1f468","1f3fd"],"status":"fully-qualified","emoji":"👩🏻‍🤝‍👨🏽","name":""},{"codes":["1f469","1f3fb","200d","1f91d","200d","1f468","1f3fe"],"status":"fully-qualified","emoji":"👩🏻‍🤝‍👨🏾","name":""},{"codes":["1f469","1f3fb","200d","1f91d","200d","1f468","1f3ff"],"status":"fully-qualified","emoji":"👩🏻‍🤝‍👨🏿","name":""},{"codes":["1f469","1f3fc","200d","1f91d","200d","1f468","1f3fb"],"status":"fully-qualified","emoji":"👩🏼‍🤝‍👨🏻","name":""},{"codes":["1f469","1f3fc","200d","1f91d","200d","1f468","1f3fd"],"status":"fully-qualified","emoji":"👩🏼‍🤝‍👨🏽","name":""},{"codes":["1f469","1f3fc","200d","1f91d","200d","1f468","1f3fe"],"status":"fully-qualified","emoji":"👩🏼‍🤝‍👨🏾","name":""},{"codes":["1f469","1f3fc","200d","1f91d","200d","1f468","1f3ff"],"status":"fully-qualified","emoji":"👩🏼‍🤝‍👨🏿","name":""},{"codes":["1f469","1f3fd","200d","1f91d","200d","1f468","1f3fb"],"status":"fully-qualified","emoji":"👩🏽‍🤝‍👨🏻","name":""},{"codes":["1f469","1f3fd","200d","1f91d","200d","1f468","1f3fc"],"status":"fully-qualified","emoji":"👩🏽‍🤝‍👨🏼","name":""},{"codes":["1f469","1f3fd","200d","1f91d","200d","1f468","1f3fe"],"status":"fully-qualified","emoji":"👩🏽‍🤝‍👨🏾","name":""},{"codes":["1f469","1f3fd","200d","1f91d","200d","1f468","1f3ff"],"status":"fully-qualified","emoji":"👩🏽‍🤝‍👨🏿","name":""},{"codes":["1f469","1f3fe","200d","1f91d","200d","1f468","1f3fb"],"status":"fully-qualified","emoji":"👩🏾‍🤝‍👨🏻","name":""},{"codes":["1f469","1f3fe","200d","1f91d","200d","1f468","1f3fc"],"status":"fully-qualified","emoji":"👩🏾‍🤝‍👨🏼","name":""},{"codes":["1f469","1f3fe","200d","1f91d","200d","1f468","1f3fd"],"status":"fully-qualified","emoji":"👩🏾‍🤝‍👨🏽","name":""},{"codes":["1f469","1f3fe","200d","1f91d","200d","1f468","1f3ff"],"status":"fully-qualified","emoji":"👩🏾‍🤝‍👨🏿","name":""},{"codes":["1f469","1f3ff","200d","1f91d","200d","1f468","1f3fb"],"status":"fully-qualified","emoji":"👩🏿‍🤝‍👨🏻","name":""},{"codes":["1f469","1f3ff","200d","1f91d","200d","1f468","1f3fc"],"status":"fully-qualified","emoji":"👩🏿‍🤝‍👨🏼","name":""},{"codes":["1f469","1f3ff","200d","1f91d","200d","1f468","1f3fd"],"status":"fully-qualified","emoji":"👩🏿‍🤝‍👨🏽","name":""},{"codes":["1f469","1f3ff","200d","1f91d","200d","1f468","1f3fe"],"status":"fully-qualified","emoji":"👩🏿‍🤝‍👨🏾","name":""},{"codes":["1f46c"],"emoji":"👬","name":"two men holding hands"},{"codes":["1f46c","1f3fb"],"status":"fully-qualified","emoji":"👬🏻","name":""},{"codes":["1f46c","1f3fc"],"status":"fully-qualified","emoji":"👬🏼","name":""},{"codes":["1f46c","1f3fd"],"status":"fully-qualified","emoji":"👬🏽","name":""},{"codes":["1f46c","1f3fe"],"status":"fully-qualified","emoji":"👬🏾","name":""},{"codes":["1f46c","1f3ff"],"status":"fully-qualified","emoji":"👬🏿","name":""},{"codes":["1f468","1f3fb","200d","1f91d","200d","1f468","1f3fc"],"status":"fully-qualified","emoji":"👨🏻‍🤝‍👨🏼","name":""},{"codes":["1f468","1f3fb","200d","1f91d","200d","1f468","1f3fd"],"status":"fully-qualified","emoji":"👨🏻‍🤝‍👨🏽","name":""},{"codes":["1f468","1f3fb","200d","1f91d","200d","1f468","1f3fe"],"status":"fully-qualified","emoji":"👨🏻‍🤝‍👨🏾","name":""},{"codes":["1f468","1f3fb","200d","1f91d","200d","1f468","1f3ff"],"status":"fully-qualified","emoji":"👨🏻‍🤝‍👨🏿","name":""},{"codes":["1f468","1f3fc","200d","1f91d","200d","1f468","1f3fb"],"status":"fully-qualified","emoji":"👨🏼‍🤝‍👨🏻","name":""},{"codes":["1f468","1f3fc","200d","1f91d","200d","1f468","1f3fd"],"status":"fully-qualified","emoji":"👨🏼‍🤝‍👨🏽","name":""},{"codes":["1f468","1f3fc","200d","1f91d","200d","1f468","1f3fe"],"status":"fully-qualified","emoji":"👨🏼‍🤝‍👨🏾","name":""},{"codes":["1f468","1f3fc","200d","1f91d","200d","1f468","1f3ff"],"status":"fully-qualified","emoji":"👨🏼‍🤝‍👨🏿","name":""},{"codes":["1f468","1f3fd","200d","1f91d","200d","1f468","1f3fb"],"status":"fully-qualified","emoji":"👨🏽‍🤝‍👨🏻","name":""},{"codes":["1f468","1f3fd","200d","1f91d","200d","1f468","1f3fc"],"status":"fully-qualified","emoji":"👨🏽‍🤝‍👨🏼","name":""},{"codes":["1f468","1f3fd","200d","1f91d","200d","1f468","1f3fe"],"status":"fully-qualified","emoji":"👨🏽‍🤝‍👨🏾","name":""},{"codes":["1f468","1f3fd","200d","1f91d","200d","1f468","1f3ff"],"status":"fully-qualified","emoji":"👨🏽‍🤝‍👨🏿","name":""},{"codes":["1f468","1f3fe","200d","1f91d","200d","1f468","1f3fb"],"status":"fully-qualified","emoji":"👨🏾‍🤝‍👨🏻","name":""},{"codes":["1f468","1f3fe","200d","1f91d","200d","1f468","1f3fc"],"status":"fully-qualified","emoji":"👨🏾‍🤝‍👨🏼","name":""},{"codes":["1f468","1f3fe","200d","1f91d","200d","1f468","1f3fd"],"status":"fully-qualified","emoji":"👨🏾‍🤝‍👨🏽","name":""},{"codes":["1f468","1f3fe","200d","1f91d","200d","1f468","1f3ff"],"status":"fully-qualified","emoji":"👨🏾‍🤝‍👨🏿","name":""},{"codes":["1f468","1f3ff","200d","1f91d","200d","1f468","1f3fb"],"status":"fully-qualified","emoji":"👨🏿‍🤝‍👨🏻","name":""},{"codes":["1f468","1f3ff","200d","1f91d","200d","1f468","1f3fc"],"status":"fully-qualified","emoji":"👨🏿‍🤝‍👨🏼","name":""},{"codes":["1f468","1f3ff","200d","1f91d","200d","1f468","1f3fd"],"status":"fully-qualified","emoji":"👨🏿‍🤝‍👨🏽","name":""},{"codes":["1f468","1f3ff","200d","1f91d","200d","1f468","1f3fe"],"status":"fully-qualified","emoji":"👨🏿‍🤝‍👨🏾","name":""},{"codes":["1f46d"],"emoji":"👭","name":"two women holding hands"},{"codes":["1f46d","1f3fb"],"status":"fully-qualified","emoji":"👭🏻","name":""},{"codes":["1f46d","1f3fc"],"status":"fully-qualified","emoji":"👭🏼","name":""},{"codes":["1f46d","1f3fd"],"status":"fully-qualified","emoji":"👭🏽","name":""},{"codes":["1f46d","1f3fe"],"status":"fully-qualified","emoji":"👭🏾","name":""},{"codes":["1f46d","1f3ff"],"status":"fully-qualified","emoji":"👭🏿","name":""},{"codes":["1f469","1f3fb","200d","1f91d","200d","1f469","1f3fc"],"status":"fully-qualified","emoji":"👩🏻‍🤝‍👩🏼","name":""},{"codes":["1f469","1f3fb","200d","1f91d","200d","1f469","1f3fd"],"status":"fully-qualified","emoji":"👩🏻‍🤝‍👩🏽","name":""},{"codes":["1f469","1f3fb","200d","1f91d","200d","1f469","1f3fe"],"status":"fully-qualified","emoji":"👩🏻‍🤝‍👩🏾","name":""},{"codes":["1f469","1f3fb","200d","1f91d","200d","1f469","1f3ff"],"status":"fully-qualified","emoji":"👩🏻‍🤝‍👩🏿","name":""},{"codes":["1f469","1f3fc","200d","1f91d","200d","1f469","1f3fb"],"status":"fully-qualified","emoji":"👩🏼‍🤝‍👩🏻","name":""},{"codes":["1f469","1f3fc","200d","1f91d","200d","1f469","1f3fd"],"status":"fully-qualified","emoji":"👩🏼‍🤝‍👩🏽","name":""},{"codes":["1f469","1f3fc","200d","1f91d","200d","1f469","1f3fe"],"status":"fully-qualified","emoji":"👩🏼‍🤝‍👩🏾","name":""},{"codes":["1f469","1f3fc","200d","1f91d","200d","1f469","1f3ff"],"status":"fully-qualified","emoji":"👩🏼‍🤝‍👩🏿","name":""},{"codes":["1f469","1f3fd","200d","1f91d","200d","1f469","1f3fb"],"status":"fully-qualified","emoji":"👩🏽‍🤝‍👩🏻","name":""},{"codes":["1f469","1f3fd","200d","1f91d","200d","1f469","1f3fc"],"status":"fully-qualified","emoji":"👩🏽‍🤝‍👩🏼","name":""},{"codes":["1f469","1f3fd","200d","1f91d","200d","1f469","1f3fe"],"status":"fully-qualified","emoji":"👩🏽‍🤝‍👩🏾","name":""},{"codes":["1f469","1f3fd","200d","1f91d","200d","1f469","1f3ff"],"status":"fully-qualified","emoji":"👩🏽‍🤝‍👩🏿","name":""},{"codes":["1f469","1f3fe","200d","1f91d","200d","1f469","1f3fb"],"status":"fully-qualified","emoji":"👩🏾‍🤝‍👩🏻","name":""},{"codes":["1f469","1f3fe","200d","1f91d","200d","1f469","1f3fc"],"status":"fully-qualified","emoji":"👩🏾‍🤝‍👩🏼","name":""},{"codes":["1f469","1f3fe","200d","1f91d","200d","1f469","1f3fd"],"status":"fully-qualified","emoji":"👩🏾‍🤝‍👩🏽","name":""},{"codes":["1f469","1f3fe","200d","1f91d","200d","1f469","1f3ff"],"status":"fully-qualified","emoji":"👩🏾‍🤝‍👩🏿","name":""},{"codes":["1f469","1f3ff","200d","1f91d","200d","1f469","1f3fb"],"status":"fully-qualified","emoji":"👩🏿‍🤝‍👩🏻","name":""},{"codes":["1f469","1f3ff","200d","1f91d","200d","1f469","1f3fc"],"status":"fully-qualified","emoji":"👩🏿‍🤝‍👩🏼","name":""},{"codes":["1f469","1f3ff","200d","1f91d","200d","1f469","1f3fd"],"status":"fully-qualified","emoji":"👩🏿‍🤝‍👩🏽","name":""},{"codes":["1f469","1f3ff","200d","1f91d","200d","1f469","1f3fe"],"status":"fully-qualified","emoji":"👩🏿‍🤝‍👩🏾","name":""},{"codes":["1f46e","200d","2640","fe0f"],"emoji":"👮‍♀️","name":""},{"codes":["1f46e","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👮🏻‍♀️","name":""},{"codes":["1f46e","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👮🏼‍♀️","name":""},{"codes":["1f46e","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👮🏽‍♀️","name":""},{"codes":["1f46e","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👮🏾‍♀️","name":""},{"codes":["1f46e","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👮🏿‍♀️","name":""},{"codes":["1f46e","200d","2642","fe0f"],"emoji":"👮‍♂️","name":""},{"codes":["1f46e","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👮🏻‍♂️","name":""},{"codes":["1f46e","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👮🏼‍♂️","name":""},{"codes":["1f46e","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👮🏽‍♂️","name":""},{"codes":["1f46e","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👮🏾‍♂️","name":""},{"codes":["1f46e","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👮🏿‍♂️","name":""},{"codes":["1f46e"],"emoji":"👮","name":"police officer"},{"codes":["1f46e","1f3fb"],"status":"fully-qualified","emoji":"👮🏻","name":""},{"codes":["1f46e","1f3fc"],"status":"fully-qualified","emoji":"👮🏼","name":""},{"codes":["1f46e","1f3fd"],"status":"fully-qualified","emoji":"👮🏽","name":""},{"codes":["1f46e","1f3fe"],"status":"fully-qualified","emoji":"👮🏾","name":""},{"codes":["1f46e","1f3ff"],"status":"fully-qualified","emoji":"👮🏿","name":""},{"codes":["1f46f","200d","2640","fe0f"],"emoji":"👯‍♀️","name":""},{"codes":["1f46f","200d","2642","fe0f"],"emoji":"👯‍♂️","name":""},{"codes":["1f46f"],"emoji":"👯","name":"woman with bunny ears"},{"codes":["1f470","200d","2640","fe0f"],"emoji":"👰‍♀️","name":""},{"codes":["1f470","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👰🏻‍♀️","name":""},{"codes":["1f470","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👰🏼‍♀️","name":""},{"codes":["1f470","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👰🏽‍♀️","name":""},{"codes":["1f470","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👰🏾‍♀️","name":""},{"codes":["1f470","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👰🏿‍♀️","name":""},{"codes":["1f470","200d","2642","fe0f"],"emoji":"👰‍♂️","name":""},{"codes":["1f470","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👰🏻‍♂️","name":""},{"codes":["1f470","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👰🏼‍♂️","name":""},{"codes":["1f470","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👰🏽‍♂️","name":""},{"codes":["1f470","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👰🏾‍♂️","name":""},{"codes":["1f470","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👰🏿‍♂️","name":""},{"codes":["1f470"],"emoji":"👰","name":"bride with veil"},{"codes":["1f470","1f3fb"],"status":"fully-qualified","emoji":"👰🏻","name":""},{"codes":["1f470","1f3fc"],"status":"fully-qualified","emoji":"👰🏼","name":""},{"codes":["1f470","1f3fd"],"status":"fully-qualified","emoji":"👰🏽","name":""},{"codes":["1f470","1f3fe"],"status":"fully-qualified","emoji":"👰🏾","name":""},{"codes":["1f470","1f3ff"],"status":"fully-qualified","emoji":"👰🏿","name":""},{"codes":["1f471","200d","2640","fe0f"],"emoji":"👱‍♀️","name":""},{"codes":["1f471","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👱🏻‍♀️","name":""},{"codes":["1f471","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👱🏼‍♀️","name":""},{"codes":["1f471","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👱🏽‍♀️","name":""},{"codes":["1f471","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👱🏾‍♀️","name":""},{"codes":["1f471","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👱🏿‍♀️","name":""},{"codes":["1f471","200d","2642","fe0f"],"emoji":"👱‍♂️","name":""},{"codes":["1f471","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👱🏻‍♂️","name":""},{"codes":["1f471","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👱🏼‍♂️","name":""},{"codes":["1f471","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👱🏽‍♂️","name":""},{"codes":["1f471","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👱🏾‍♂️","name":""},{"codes":["1f471","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👱🏿‍♂️","name":""},{"codes":["1f471"],"emoji":"👱","name":"person with blond hair"},{"codes":["1f471","1f3fb"],"status":"fully-qualified","emoji":"👱🏻","name":""},{"codes":["1f471","1f3fc"],"status":"fully-qualified","emoji":"👱🏼","name":""},{"codes":["1f471","1f3fd"],"status":"fully-qualified","emoji":"👱🏽","name":""},{"codes":["1f471","1f3fe"],"status":"fully-qualified","emoji":"👱🏾","name":""},{"codes":["1f471","1f3ff"],"status":"fully-qualified","emoji":"👱🏿","name":""},{"codes":["1f472"],"emoji":"👲","name":"man with gua pi mao"},{"codes":["1f472","1f3fb"],"status":"fully-qualified","emoji":"👲🏻","name":""},{"codes":["1f472","1f3fc"],"status":"fully-qualified","emoji":"👲🏼","name":""},{"codes":["1f472","1f3fd"],"status":"fully-qualified","emoji":"👲🏽","name":""},{"codes":["1f472","1f3fe"],"status":"fully-qualified","emoji":"👲🏾","name":""},{"codes":["1f472","1f3ff"],"status":"fully-qualified","emoji":"👲🏿","name":""},{"codes":["1f473","200d","2640","fe0f"],"emoji":"👳‍♀️","name":""},{"codes":["1f473","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👳🏻‍♀️","name":""},{"codes":["1f473","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👳🏼‍♀️","name":""},{"codes":["1f473","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👳🏽‍♀️","name":""},{"codes":["1f473","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👳🏾‍♀️","name":""},{"codes":["1f473","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👳🏿‍♀️","name":""},{"codes":["1f473","200d","2642","fe0f"],"emoji":"👳‍♂️","name":""},{"codes":["1f473","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👳🏻‍♂️","name":""},{"codes":["1f473","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👳🏼‍♂️","name":""},{"codes":["1f473","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👳🏽‍♂️","name":""},{"codes":["1f473","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👳🏾‍♂️","name":""},{"codes":["1f473","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👳🏿‍♂️","name":""},{"codes":["1f473"],"emoji":"👳","name":"man with turban"},{"codes":["1f473","1f3fb"],"status":"fully-qualified","emoji":"👳🏻","name":""},{"codes":["1f473","1f3fc"],"status":"fully-qualified","emoji":"👳🏼","name":""},{"codes":["1f473","1f3fd"],"status":"fully-qualified","emoji":"👳🏽","name":""},{"codes":["1f473","1f3fe"],"status":"fully-qualified","emoji":"👳🏾","name":""},{"codes":["1f473","1f3ff"],"status":"fully-qualified","emoji":"👳🏿","name":""},{"codes":["1f474"],"emoji":"👴","name":"older man"},{"codes":["1f474","1f3fb"],"status":"fully-qualified","emoji":"👴🏻","name":""},{"codes":["1f474","1f3fc"],"status":"fully-qualified","emoji":"👴🏼","name":""},{"codes":["1f474","1f3fd"],"status":"fully-qualified","emoji":"👴🏽","name":""},{"codes":["1f474","1f3fe"],"status":"fully-qualified","emoji":"👴🏾","name":""},{"codes":["1f474","1f3ff"],"status":"fully-qualified","emoji":"👴🏿","name":""},{"codes":["1f475"],"emoji":"👵","name":"older woman"},{"codes":["1f475","1f3fb"],"status":"fully-qualified","emoji":"👵🏻","name":""},{"codes":["1f475","1f3fc"],"status":"fully-qualified","emoji":"👵🏼","name":""},{"codes":["1f475","1f3fd"],"status":"fully-qualified","emoji":"👵🏽","name":""},{"codes":["1f475","1f3fe"],"status":"fully-qualified","emoji":"👵🏾","name":""},{"codes":["1f475","1f3ff"],"status":"fully-qualified","emoji":"👵🏿","name":""},{"codes":["1f476"],"emoji":"👶","name":"baby"},{"codes":["1f476","1f3fb"],"status":"fully-qualified","emoji":"👶🏻","name":""},{"codes":["1f476","1f3fc"],"status":"fully-qualified","emoji":"👶🏼","name":""},{"codes":["1f476","1f3fd"],"status":"fully-qualified","emoji":"👶🏽","name":""},{"codes":["1f476","1f3fe"],"status":"fully-qualified","emoji":"👶🏾","name":""},{"codes":["1f476","1f3ff"],"status":"fully-qualified","emoji":"👶🏿","name":""},{"codes":["1f477","200d","2640","fe0f"],"emoji":"👷‍♀️","name":""},{"codes":["1f477","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👷🏻‍♀️","name":""},{"codes":["1f477","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👷🏼‍♀️","name":""},{"codes":["1f477","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👷🏽‍♀️","name":""},{"codes":["1f477","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👷🏾‍♀️","name":""},{"codes":["1f477","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"👷🏿‍♀️","name":""},{"codes":["1f477","200d","2642","fe0f"],"emoji":"👷‍♂️","name":""},{"codes":["1f477","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👷🏻‍♂️","name":""},{"codes":["1f477","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👷🏼‍♂️","name":""},{"codes":["1f477","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👷🏽‍♂️","name":""},{"codes":["1f477","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👷🏾‍♂️","name":""},{"codes":["1f477","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"👷🏿‍♂️","name":""},{"codes":["1f477"],"emoji":"👷","name":"construction worker"},{"codes":["1f477","1f3fb"],"status":"fully-qualified","emoji":"👷🏻","name":""},{"codes":["1f477","1f3fc"],"status":"fully-qualified","emoji":"👷🏼","name":""},{"codes":["1f477","1f3fd"],"status":"fully-qualified","emoji":"👷🏽","name":""},{"codes":["1f477","1f3fe"],"status":"fully-qualified","emoji":"👷🏾","name":""},{"codes":["1f477","1f3ff"],"status":"fully-qualified","emoji":"👷🏿","name":""},{"codes":["1f478"],"emoji":"👸","name":"princess"},{"codes":["1f478","1f3fb"],"status":"fully-qualified","emoji":"👸🏻","name":""},{"codes":["1f478","1f3fc"],"status":"fully-qualified","emoji":"👸🏼","name":""},{"codes":["1f478","1f3fd"],"status":"fully-qualified","emoji":"👸🏽","name":""},{"codes":["1f478","1f3fe"],"status":"fully-qualified","emoji":"👸🏾","name":""},{"codes":["1f478","1f3ff"],"status":"fully-qualified","emoji":"👸🏿","name":""},{"codes":["1f47c"],"emoji":"👼","name":"baby angel"},{"codes":["1f47c","1f3fb"],"status":"fully-qualified","emoji":"👼🏻","name":""},{"codes":["1f47c","1f3fc"],"status":"fully-qualified","emoji":"👼🏼","name":""},{"codes":["1f47c","1f3fd"],"status":"fully-qualified","emoji":"👼🏽","name":""},{"codes":["1f47c","1f3fe"],"status":"fully-qualified","emoji":"👼🏾","name":""},{"codes":["1f47c","1f3ff"],"status":"fully-qualified","emoji":"👼🏿","name":""},{"codes":["1f481","200d","2640","fe0f"],"emoji":"💁‍♀️","name":""},{"codes":["1f481","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💁🏻‍♀️","name":""},{"codes":["1f481","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💁🏼‍♀️","name":""},{"codes":["1f481","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💁🏽‍♀️","name":""},{"codes":["1f481","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💁🏾‍♀️","name":""},{"codes":["1f481","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💁🏿‍♀️","name":""},{"codes":["1f481","200d","2642","fe0f"],"emoji":"💁‍♂️","name":""},{"codes":["1f481","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💁🏻‍♂️","name":""},{"codes":["1f481","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💁🏼‍♂️","name":""},{"codes":["1f481","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💁🏽‍♂️","name":""},{"codes":["1f481","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💁🏾‍♂️","name":""},{"codes":["1f481","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💁🏿‍♂️","name":""},{"codes":["1f481"],"emoji":"💁","name":"information desk person"},{"codes":["1f481","1f3fb"],"status":"fully-qualified","emoji":"💁🏻","name":""},{"codes":["1f481","1f3fc"],"status":"fully-qualified","emoji":"💁🏼","name":""},{"codes":["1f481","1f3fd"],"status":"fully-qualified","emoji":"💁🏽","name":""},{"codes":["1f481","1f3fe"],"status":"fully-qualified","emoji":"💁🏾","name":""},{"codes":["1f481","1f3ff"],"status":"fully-qualified","emoji":"💁🏿","name":""},{"codes":["1f482","200d","2640","fe0f"],"emoji":"💂‍♀️","name":""},{"codes":["1f482","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💂🏻‍♀️","name":""},{"codes":["1f482","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💂🏼‍♀️","name":""},{"codes":["1f482","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💂🏽‍♀️","name":""},{"codes":["1f482","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💂🏾‍♀️","name":""},{"codes":["1f482","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💂🏿‍♀️","name":""},{"codes":["1f482","200d","2642","fe0f"],"emoji":"💂‍♂️","name":""},{"codes":["1f482","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💂🏻‍♂️","name":""},{"codes":["1f482","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💂🏼‍♂️","name":""},{"codes":["1f482","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💂🏽‍♂️","name":""},{"codes":["1f482","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💂🏾‍♂️","name":""},{"codes":["1f482","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💂🏿‍♂️","name":""},{"codes":["1f482"],"emoji":"💂","name":"guardsman"},{"codes":["1f482","1f3fb"],"status":"fully-qualified","emoji":"💂🏻","name":""},{"codes":["1f482","1f3fc"],"status":"fully-qualified","emoji":"💂🏼","name":""},{"codes":["1f482","1f3fd"],"status":"fully-qualified","emoji":"💂🏽","name":""},{"codes":["1f482","1f3fe"],"status":"fully-qualified","emoji":"💂🏾","name":""},{"codes":["1f482","1f3ff"],"status":"fully-qualified","emoji":"💂🏿","name":""},{"codes":["1f483"],"emoji":"💃","name":"dancer"},{"codes":["1f483","1f3fb"],"status":"fully-qualified","emoji":"💃🏻","name":""},{"codes":["1f483","1f3fc"],"status":"fully-qualified","emoji":"💃🏼","name":""},{"codes":["1f483","1f3fd"],"status":"fully-qualified","emoji":"💃🏽","name":""},{"codes":["1f483","1f3fe"],"status":"fully-qualified","emoji":"💃🏾","name":""},{"codes":["1f483","1f3ff"],"status":"fully-qualified","emoji":"💃🏿","name":""},{"codes":["1f485"],"emoji":"💅","name":"nail polish"},{"codes":["1f485","1f3fb"],"status":"fully-qualified","emoji":"💅🏻","name":""},{"codes":["1f485","1f3fc"],"status":"fully-qualified","emoji":"💅🏼","name":""},{"codes":["1f485","1f3fd"],"status":"fully-qualified","emoji":"💅🏽","name":""},{"codes":["1f485","1f3fe"],"status":"fully-qualified","emoji":"💅🏾","name":""},{"codes":["1f485","1f3ff"],"status":"fully-qualified","emoji":"💅🏿","name":""},{"codes":["1f486","200d","2640","fe0f"],"emoji":"💆‍♀️","name":""},{"codes":["1f486","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💆🏻‍♀️","name":""},{"codes":["1f486","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💆🏼‍♀️","name":""},{"codes":["1f486","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💆🏽‍♀️","name":""},{"codes":["1f486","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💆🏾‍♀️","name":""},{"codes":["1f486","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💆🏿‍♀️","name":""},{"codes":["1f486","200d","2642","fe0f"],"emoji":"💆‍♂️","name":""},{"codes":["1f486","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💆🏻‍♂️","name":""},{"codes":["1f486","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💆🏼‍♂️","name":""},{"codes":["1f486","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💆🏽‍♂️","name":""},{"codes":["1f486","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💆🏾‍♂️","name":""},{"codes":["1f486","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💆🏿‍♂️","name":""},{"codes":["1f486"],"emoji":"💆","name":"face massage"},{"codes":["1f486","1f3fb"],"status":"fully-qualified","emoji":"💆🏻","name":""},{"codes":["1f486","1f3fc"],"status":"fully-qualified","emoji":"💆🏼","name":""},{"codes":["1f486","1f3fd"],"status":"fully-qualified","emoji":"💆🏽","name":""},{"codes":["1f486","1f3fe"],"status":"fully-qualified","emoji":"💆🏾","name":""},{"codes":["1f486","1f3ff"],"status":"fully-qualified","emoji":"💆🏿","name":""},{"codes":["1f487","200d","2640","fe0f"],"emoji":"💇‍♀️","name":""},{"codes":["1f487","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💇🏻‍♀️","name":""},{"codes":["1f487","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💇🏼‍♀️","name":""},{"codes":["1f487","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💇🏽‍♀️","name":""},{"codes":["1f487","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💇🏾‍♀️","name":""},{"codes":["1f487","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"💇🏿‍♀️","name":""},{"codes":["1f487","200d","2642","fe0f"],"emoji":"💇‍♂️","name":""},{"codes":["1f487","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💇🏻‍♂️","name":""},{"codes":["1f487","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💇🏼‍♂️","name":""},{"codes":["1f487","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💇🏽‍♂️","name":""},{"codes":["1f487","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💇🏾‍♂️","name":""},{"codes":["1f487","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"💇🏿‍♂️","name":""},{"codes":["1f487"],"emoji":"💇","name":"haircut"},{"codes":["1f487","1f3fb"],"status":"fully-qualified","emoji":"💇🏻","name":""},{"codes":["1f487","1f3fc"],"status":"fully-qualified","emoji":"💇🏼","name":""},{"codes":["1f487","1f3fd"],"status":"fully-qualified","emoji":"💇🏽","name":""},{"codes":["1f487","1f3fe"],"status":"fully-qualified","emoji":"💇🏾","name":""},{"codes":["1f487","1f3ff"],"status":"fully-qualified","emoji":"💇🏿","name":""},{"codes":["1f48f"],"emoji":"💏","name":"kiss"},{"codes":["1f491"],"emoji":"💑","name":"couple with heart"},{"codes":["1f4aa"],"emoji":"💪","name":"flexed biceps"},{"codes":["1f4aa","1f3fb"],"status":"fully-qualified","emoji":"💪🏻","name":""},{"codes":["1f4aa","1f3fc"],"status":"fully-qualified","emoji":"💪🏼","name":""},{"codes":["1f4aa","1f3fd"],"status":"fully-qualified","emoji":"💪🏽","name":""},{"codes":["1f4aa","1f3fe"],"status":"fully-qualified","emoji":"💪🏾","name":""},{"codes":["1f4aa","1f3ff"],"status":"fully-qualified","emoji":"💪🏿","name":""},{"codes":["1f574","fe0f"],"emoji":"🕴️","name":""},{"codes":["1f574","1f3fb"],"status":"fully-qualified","emoji":"🕴🏻","name":""},{"codes":["1f574","1f3fc"],"status":"fully-qualified","emoji":"🕴🏼","name":""},{"codes":["1f574","1f3fd"],"status":"fully-qualified","emoji":"🕴🏽","name":""},{"codes":["1f574","1f3fe"],"status":"fully-qualified","emoji":"🕴🏾","name":""},{"codes":["1f574","1f3ff"],"status":"fully-qualified","emoji":"🕴🏿","name":""},{"codes":["1f575","fe0f","200d","2640","fe0f"],"emoji":"🕵️‍♀️","name":""},{"codes":["1f575","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🕵🏻‍♀️","name":""},{"codes":["1f575","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🕵🏼‍♀️","name":""},{"codes":["1f575","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🕵🏽‍♀️","name":""},{"codes":["1f575","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🕵🏾‍♀️","name":""},{"codes":["1f575","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🕵🏿‍♀️","name":""},{"codes":["1f575","fe0f","200d","2642","fe0f"],"emoji":"🕵️‍♂️","name":""},{"codes":["1f575","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🕵🏻‍♂️","name":""},{"codes":["1f575","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🕵🏼‍♂️","name":""},{"codes":["1f575","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🕵🏽‍♂️","name":""},{"codes":["1f575","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🕵🏾‍♂️","name":""},{"codes":["1f575","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🕵🏿‍♂️","name":""},{"codes":["1f575","fe0f"],"emoji":"🕵️","name":""},{"codes":["1f575","1f3fb"],"status":"fully-qualified","emoji":"🕵🏻","name":""},{"codes":["1f575","1f3fc"],"status":"fully-qualified","emoji":"🕵🏼","name":""},{"codes":["1f575","1f3fd"],"status":"fully-qualified","emoji":"🕵🏽","name":""},{"codes":["1f575","1f3fe"],"status":"fully-qualified","emoji":"🕵🏾","name":""},{"codes":["1f575","1f3ff"],"status":"fully-qualified","emoji":"🕵🏿","name":""},{"codes":["1f57a"],"emoji":"🕺","name":"man dancing"},{"codes":["1f57a","1f3fb"],"status":"fully-qualified","emoji":"🕺🏻","name":""},{"codes":["1f57a","1f3fc"],"status":"fully-qualified","emoji":"🕺🏼","name":""},{"codes":["1f57a","1f3fd"],"status":"fully-qualified","emoji":"🕺🏽","name":""},{"codes":["1f57a","1f3fe"],"status":"fully-qualified","emoji":"🕺🏾","name":""},{"codes":["1f57a","1f3ff"],"status":"fully-qualified","emoji":"🕺🏿","name":""},{"codes":["1f590","fe0f"],"emoji":"🖐️","name":""},{"codes":["1f590","1f3fb"],"status":"fully-qualified","emoji":"🖐🏻","name":""},{"codes":["1f590","1f3fc"],"status":"fully-qualified","emoji":"🖐🏼","name":""},{"codes":["1f590","1f3fd"],"status":"fully-qualified","emoji":"🖐🏽","name":""},{"codes":["1f590","1f3fe"],"status":"fully-qualified","emoji":"🖐🏾","name":""},{"codes":["1f590","1f3ff"],"status":"fully-qualified","emoji":"🖐🏿","name":""},{"codes":["1f595"],"emoji":"🖕","name":"reversed hand with middle finger extended"},{"codes":["1f595","1f3fb"],"status":"fully-qualified","emoji":"🖕🏻","name":""},{"codes":["1f595","1f3fc"],"status":"fully-qualified","emoji":"🖕🏼","name":""},{"codes":["1f595","1f3fd"],"status":"fully-qualified","emoji":"🖕🏽","name":""},{"codes":["1f595","1f3fe"],"status":"fully-qualified","emoji":"🖕🏾","name":""},{"codes":["1f595","1f3ff"],"status":"fully-qualified","emoji":"🖕🏿","name":""},{"codes":["1f596"],"emoji":"🖖","name":"raised hand with part between middle and ring fingers"},{"codes":["1f596","1f3fb"],"status":"fully-qualified","emoji":"🖖🏻","name":""},{"codes":["1f596","1f3fc"],"status":"fully-qualified","emoji":"🖖🏼","name":""},{"codes":["1f596","1f3fd"],"status":"fully-qualified","emoji":"🖖🏽","name":""},{"codes":["1f596","1f3fe"],"status":"fully-qualified","emoji":"🖖🏾","name":""},{"codes":["1f596","1f3ff"],"status":"fully-qualified","emoji":"🖖🏿","name":""},{"codes":["1f5e3","fe0f"],"emoji":"🗣️","name":""},{"codes":["1f645","200d","2640","fe0f"],"emoji":"🙅‍♀️","name":""},{"codes":["1f645","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙅🏻‍♀️","name":""},{"codes":["1f645","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙅🏼‍♀️","name":""},{"codes":["1f645","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙅🏽‍♀️","name":""},{"codes":["1f645","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙅🏾‍♀️","name":""},{"codes":["1f645","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙅🏿‍♀️","name":""},{"codes":["1f645","200d","2642","fe0f"],"emoji":"🙅‍♂️","name":""},{"codes":["1f645","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙅🏻‍♂️","name":""},{"codes":["1f645","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙅🏼‍♂️","name":""},{"codes":["1f645","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙅🏽‍♂️","name":""},{"codes":["1f645","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙅🏾‍♂️","name":""},{"codes":["1f645","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙅🏿‍♂️","name":""},{"codes":["1f645"],"emoji":"🙅","name":"face with no good gesture"},{"codes":["1f645","1f3fb"],"status":"fully-qualified","emoji":"🙅🏻","name":""},{"codes":["1f645","1f3fc"],"status":"fully-qualified","emoji":"🙅🏼","name":""},{"codes":["1f645","1f3fd"],"status":"fully-qualified","emoji":"🙅🏽","name":""},{"codes":["1f645","1f3fe"],"status":"fully-qualified","emoji":"🙅🏾","name":""},{"codes":["1f645","1f3ff"],"status":"fully-qualified","emoji":"🙅🏿","name":""},{"codes":["1f646","200d","2640","fe0f"],"emoji":"🙆‍♀️","name":""},{"codes":["1f646","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙆🏻‍♀️","name":""},{"codes":["1f646","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙆🏼‍♀️","name":""},{"codes":["1f646","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙆🏽‍♀️","name":""},{"codes":["1f646","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙆🏾‍♀️","name":""},{"codes":["1f646","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙆🏿‍♀️","name":""},{"codes":["1f646","200d","2642","fe0f"],"emoji":"🙆‍♂️","name":""},{"codes":["1f646","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙆🏻‍♂️","name":""},{"codes":["1f646","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙆🏼‍♂️","name":""},{"codes":["1f646","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙆🏽‍♂️","name":""},{"codes":["1f646","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙆🏾‍♂️","name":""},{"codes":["1f646","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙆🏿‍♂️","name":""},{"codes":["1f646"],"emoji":"🙆","name":"face with ok gesture"},{"codes":["1f646","1f3fb"],"status":"fully-qualified","emoji":"🙆🏻","name":""},{"codes":["1f646","1f3fc"],"status":"fully-qualified","emoji":"🙆🏼","name":""},{"codes":["1f646","1f3fd"],"status":"fully-qualified","emoji":"🙆🏽","name":""},{"codes":["1f646","1f3fe"],"status":"fully-qualified","emoji":"🙆🏾","name":""},{"codes":["1f646","1f3ff"],"status":"fully-qualified","emoji":"🙆🏿","name":""},{"codes":["1f647","200d","2640","fe0f"],"emoji":"🙇‍♀️","name":""},{"codes":["1f647","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙇🏻‍♀️","name":""},{"codes":["1f647","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙇🏼‍♀️","name":""},{"codes":["1f647","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙇🏽‍♀️","name":""},{"codes":["1f647","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙇🏾‍♀️","name":""},{"codes":["1f647","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙇🏿‍♀️","name":""},{"codes":["1f647","200d","2642","fe0f"],"emoji":"🙇‍♂️","name":""},{"codes":["1f647","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙇🏻‍♂️","name":""},{"codes":["1f647","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙇🏼‍♂️","name":""},{"codes":["1f647","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙇🏽‍♂️","name":""},{"codes":["1f647","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙇🏾‍♂️","name":""},{"codes":["1f647","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙇🏿‍♂️","name":""},{"codes":["1f647"],"emoji":"🙇","name":"person bowing deeply"},{"codes":["1f647","1f3fb"],"status":"fully-qualified","emoji":"🙇🏻","name":""},{"codes":["1f647","1f3fc"],"status":"fully-qualified","emoji":"🙇🏼","name":""},{"codes":["1f647","1f3fd"],"status":"fully-qualified","emoji":"🙇🏽","name":""},{"codes":["1f647","1f3fe"],"status":"fully-qualified","emoji":"🙇🏾","name":""},{"codes":["1f647","1f3ff"],"status":"fully-qualified","emoji":"🙇🏿","name":""},{"codes":["1f64b","200d","2640","fe0f"],"emoji":"🙋‍♀️","name":""},{"codes":["1f64b","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙋🏻‍♀️","name":""},{"codes":["1f64b","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙋🏼‍♀️","name":""},{"codes":["1f64b","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙋🏽‍♀️","name":""},{"codes":["1f64b","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙋🏾‍♀️","name":""},{"codes":["1f64b","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙋🏿‍♀️","name":""},{"codes":["1f64b","200d","2642","fe0f"],"emoji":"🙋‍♂️","name":""},{"codes":["1f64b","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙋🏻‍♂️","name":""},{"codes":["1f64b","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙋🏼‍♂️","name":""},{"codes":["1f64b","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙋🏽‍♂️","name":""},{"codes":["1f64b","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙋🏾‍♂️","name":""},{"codes":["1f64b","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙋🏿‍♂️","name":""},{"codes":["1f64b"],"emoji":"🙋","name":"happy person raising one hand"},{"codes":["1f64b","1f3fb"],"status":"fully-qualified","emoji":"🙋🏻","name":""},{"codes":["1f64b","1f3fc"],"status":"fully-qualified","emoji":"🙋🏼","name":""},{"codes":["1f64b","1f3fd"],"status":"fully-qualified","emoji":"🙋🏽","name":""},{"codes":["1f64b","1f3fe"],"status":"fully-qualified","emoji":"🙋🏾","name":""},{"codes":["1f64b","1f3ff"],"status":"fully-qualified","emoji":"🙋🏿","name":""},{"codes":["1f64c"],"emoji":"🙌","name":"person raising both hands in celebration"},{"codes":["1f64c","1f3fb"],"status":"fully-qualified","emoji":"🙌🏻","name":""},{"codes":["1f64c","1f3fc"],"status":"fully-qualified","emoji":"🙌🏼","name":""},{"codes":["1f64c","1f3fd"],"status":"fully-qualified","emoji":"🙌🏽","name":""},{"codes":["1f64c","1f3fe"],"status":"fully-qualified","emoji":"🙌🏾","name":""},{"codes":["1f64c","1f3ff"],"status":"fully-qualified","emoji":"🙌🏿","name":""},{"codes":["1f64d","200d","2640","fe0f"],"emoji":"🙍‍♀️","name":""},{"codes":["1f64d","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙍🏻‍♀️","name":""},{"codes":["1f64d","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙍🏼‍♀️","name":""},{"codes":["1f64d","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙍🏽‍♀️","name":""},{"codes":["1f64d","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙍🏾‍♀️","name":""},{"codes":["1f64d","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙍🏿‍♀️","name":""},{"codes":["1f64d","200d","2642","fe0f"],"emoji":"🙍‍♂️","name":""},{"codes":["1f64d","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙍🏻‍♂️","name":""},{"codes":["1f64d","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙍🏼‍♂️","name":""},{"codes":["1f64d","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙍🏽‍♂️","name":""},{"codes":["1f64d","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙍🏾‍♂️","name":""},{"codes":["1f64d","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙍🏿‍♂️","name":""},{"codes":["1f64d"],"emoji":"🙍","name":"person frowning"},{"codes":["1f64d","1f3fb"],"status":"fully-qualified","emoji":"🙍🏻","name":""},{"codes":["1f64d","1f3fc"],"status":"fully-qualified","emoji":"🙍🏼","name":""},{"codes":["1f64d","1f3fd"],"status":"fully-qualified","emoji":"🙍🏽","name":""},{"codes":["1f64d","1f3fe"],"status":"fully-qualified","emoji":"🙍🏾","name":""},{"codes":["1f64d","1f3ff"],"status":"fully-qualified","emoji":"🙍🏿","name":""},{"codes":["1f64e","200d","2640","fe0f"],"emoji":"🙎‍♀️","name":""},{"codes":["1f64e","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙎🏻‍♀️","name":""},{"codes":["1f64e","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙎🏼‍♀️","name":""},{"codes":["1f64e","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙎🏽‍♀️","name":""},{"codes":["1f64e","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙎🏾‍♀️","name":""},{"codes":["1f64e","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🙎🏿‍♀️","name":""},{"codes":["1f64e","200d","2642","fe0f"],"emoji":"🙎‍♂️","name":""},{"codes":["1f64e","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙎🏻‍♂️","name":""},{"codes":["1f64e","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙎🏼‍♂️","name":""},{"codes":["1f64e","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙎🏽‍♂️","name":""},{"codes":["1f64e","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙎🏾‍♂️","name":""},{"codes":["1f64e","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🙎🏿‍♂️","name":""},{"codes":["1f64e"],"emoji":"🙎","name":"person with pouting face"},{"codes":["1f64e","1f3fb"],"status":"fully-qualified","emoji":"🙎🏻","name":""},{"codes":["1f64e","1f3fc"],"status":"fully-qualified","emoji":"🙎🏼","name":""},{"codes":["1f64e","1f3fd"],"status":"fully-qualified","emoji":"🙎🏽","name":""},{"codes":["1f64e","1f3fe"],"status":"fully-qualified","emoji":"🙎🏾","name":""},{"codes":["1f64e","1f3ff"],"status":"fully-qualified","emoji":"🙎🏿","name":""},{"codes":["1f64f"],"emoji":"🙏","name":"person with folded hands"},{"codes":["1f64f","1f3fb"],"status":"fully-qualified","emoji":"🙏🏻","name":""},{"codes":["1f64f","1f3fc"],"status":"fully-qualified","emoji":"🙏🏼","name":""},{"codes":["1f64f","1f3fd"],"status":"fully-qualified","emoji":"🙏🏽","name":""},{"codes":["1f64f","1f3fe"],"status":"fully-qualified","emoji":"🙏🏾","name":""},{"codes":["1f64f","1f3ff"],"status":"fully-qualified","emoji":"🙏🏿","name":""},{"codes":["1f6a3","200d","2640","fe0f"],"emoji":"🚣‍♀️","name":""},{"codes":["1f6a3","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚣🏻‍♀️","name":""},{"codes":["1f6a3","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚣🏼‍♀️","name":""},{"codes":["1f6a3","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚣🏽‍♀️","name":""},{"codes":["1f6a3","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚣🏾‍♀️","name":""},{"codes":["1f6a3","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚣🏿‍♀️","name":""},{"codes":["1f6a3","200d","2642","fe0f"],"emoji":"🚣‍♂️","name":""},{"codes":["1f6a3","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚣🏻‍♂️","name":""},{"codes":["1f6a3","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚣🏼‍♂️","name":""},{"codes":["1f6a3","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚣🏽‍♂️","name":""},{"codes":["1f6a3","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚣🏾‍♂️","name":""},{"codes":["1f6a3","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚣🏿‍♂️","name":""},{"codes":["1f6a3"],"emoji":"🚣","name":"rowboat"},{"codes":["1f6a3","1f3fb"],"status":"fully-qualified","emoji":"🚣🏻","name":""},{"codes":["1f6a3","1f3fc"],"status":"fully-qualified","emoji":"🚣🏼","name":""},{"codes":["1f6a3","1f3fd"],"status":"fully-qualified","emoji":"🚣🏽","name":""},{"codes":["1f6a3","1f3fe"],"status":"fully-qualified","emoji":"🚣🏾","name":""},{"codes":["1f6a3","1f3ff"],"status":"fully-qualified","emoji":"🚣🏿","name":""},{"codes":["1f6b4","200d","2640","fe0f"],"emoji":"🚴‍♀️","name":""},{"codes":["1f6b4","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚴🏻‍♀️","name":""},{"codes":["1f6b4","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚴🏼‍♀️","name":""},{"codes":["1f6b4","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚴🏽‍♀️","name":""},{"codes":["1f6b4","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚴🏾‍♀️","name":""},{"codes":["1f6b4","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚴🏿‍♀️","name":""},{"codes":["1f6b4","200d","2642","fe0f"],"emoji":"🚴‍♂️","name":""},{"codes":["1f6b4","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚴🏻‍♂️","name":""},{"codes":["1f6b4","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚴🏼‍♂️","name":""},{"codes":["1f6b4","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚴🏽‍♂️","name":""},{"codes":["1f6b4","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚴🏾‍♂️","name":""},{"codes":["1f6b4","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚴🏿‍♂️","name":""},{"codes":["1f6b4"],"emoji":"🚴","name":"bicyclist"},{"codes":["1f6b4","1f3fb"],"status":"fully-qualified","emoji":"🚴🏻","name":""},{"codes":["1f6b4","1f3fc"],"status":"fully-qualified","emoji":"🚴🏼","name":""},{"codes":["1f6b4","1f3fd"],"status":"fully-qualified","emoji":"🚴🏽","name":""},{"codes":["1f6b4","1f3fe"],"status":"fully-qualified","emoji":"🚴🏾","name":""},{"codes":["1f6b4","1f3ff"],"status":"fully-qualified","emoji":"🚴🏿","name":""},{"codes":["1f6b5","200d","2640","fe0f"],"emoji":"🚵‍♀️","name":""},{"codes":["1f6b5","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚵🏻‍♀️","name":""},{"codes":["1f6b5","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚵🏼‍♀️","name":""},{"codes":["1f6b5","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚵🏽‍♀️","name":""},{"codes":["1f6b5","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚵🏾‍♀️","name":""},{"codes":["1f6b5","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚵🏿‍♀️","name":""},{"codes":["1f6b5","200d","2642","fe0f"],"emoji":"🚵‍♂️","name":""},{"codes":["1f6b5","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚵🏻‍♂️","name":""},{"codes":["1f6b5","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚵🏼‍♂️","name":""},{"codes":["1f6b5","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚵🏽‍♂️","name":""},{"codes":["1f6b5","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚵🏾‍♂️","name":""},{"codes":["1f6b5","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚵🏿‍♂️","name":""},{"codes":["1f6b5"],"emoji":"🚵","name":"mountain bicyclist"},{"codes":["1f6b5","1f3fb"],"status":"fully-qualified","emoji":"🚵🏻","name":""},{"codes":["1f6b5","1f3fc"],"status":"fully-qualified","emoji":"🚵🏼","name":""},{"codes":["1f6b5","1f3fd"],"status":"fully-qualified","emoji":"🚵🏽","name":""},{"codes":["1f6b5","1f3fe"],"status":"fully-qualified","emoji":"🚵🏾","name":""},{"codes":["1f6b5","1f3ff"],"status":"fully-qualified","emoji":"🚵🏿","name":""},{"codes":["1f6b6","200d","2640","fe0f"],"emoji":"🚶‍♀️","name":""},{"codes":["1f6b6","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚶🏻‍♀️","name":""},{"codes":["1f6b6","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚶🏼‍♀️","name":""},{"codes":["1f6b6","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚶🏽‍♀️","name":""},{"codes":["1f6b6","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚶🏾‍♀️","name":""},{"codes":["1f6b6","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🚶🏿‍♀️","name":""},{"codes":["1f6b6","200d","2642","fe0f"],"emoji":"🚶‍♂️","name":""},{"codes":["1f6b6","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚶🏻‍♂️","name":""},{"codes":["1f6b6","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚶🏼‍♂️","name":""},{"codes":["1f6b6","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚶🏽‍♂️","name":""},{"codes":["1f6b6","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚶🏾‍♂️","name":""},{"codes":["1f6b6","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🚶🏿‍♂️","name":""},{"codes":["1f6b6"],"emoji":"🚶","name":"pedestrian"},{"codes":["1f6b6","1f3fb"],"status":"fully-qualified","emoji":"🚶🏻","name":""},{"codes":["1f6b6","1f3fc"],"status":"fully-qualified","emoji":"🚶🏼","name":""},{"codes":["1f6b6","1f3fd"],"status":"fully-qualified","emoji":"🚶🏽","name":""},{"codes":["1f6b6","1f3fe"],"status":"fully-qualified","emoji":"🚶🏾","name":""},{"codes":["1f6b6","1f3ff"],"status":"fully-qualified","emoji":"🚶🏿","name":""},{"codes":["1f6c0"],"emoji":"🛀","name":"bath"},{"codes":["1f6c0","1f3fb"],"status":"fully-qualified","emoji":"🛀🏻","name":""},{"codes":["1f6c0","1f3fc"],"status":"fully-qualified","emoji":"🛀🏼","name":""},{"codes":["1f6c0","1f3fd"],"status":"fully-qualified","emoji":"🛀🏽","name":""},{"codes":["1f6c0","1f3fe"],"status":"fully-qualified","emoji":"🛀🏾","name":""},{"codes":["1f6c0","1f3ff"],"status":"fully-qualified","emoji":"🛀🏿","name":""},{"codes":["1f6cc"],"emoji":"🛌","name":"sleeping accommodation"},{"codes":["1f6cc","1f3fb"],"status":"fully-qualified","emoji":"🛌🏻","name":""},{"codes":["1f6cc","1f3fc"],"status":"fully-qualified","emoji":"🛌🏼","name":""},{"codes":["1f6cc","1f3fd"],"status":"fully-qualified","emoji":"🛌🏽","name":""},{"codes":["1f6cc","1f3fe"],"status":"fully-qualified","emoji":"🛌🏾","name":""},{"codes":["1f6cc","1f3ff"],"status":"fully-qualified","emoji":"🛌🏿","name":""},{"codes":["1f90c"],"emoji":"🤌","name":"pinched fingers"},{"codes":["1f90c","1f3fb"],"status":"fully-qualified","emoji":"🤌🏻","name":""},{"codes":["1f90c","1f3fc"],"status":"fully-qualified","emoji":"🤌🏼","name":""},{"codes":["1f90c","1f3fd"],"status":"fully-qualified","emoji":"🤌🏽","name":""},{"codes":["1f90c","1f3fe"],"status":"fully-qualified","emoji":"🤌🏾","name":""},{"codes":["1f90c","1f3ff"],"status":"fully-qualified","emoji":"🤌🏿","name":""},{"codes":["1f90f"],"emoji":"🤏","name":"pinching hand"},{"codes":["1f90f","1f3fb"],"status":"fully-qualified","emoji":"🤏🏻","name":""},{"codes":["1f90f","1f3fc"],"status":"fully-qualified","emoji":"🤏🏼","name":""},{"codes":["1f90f","1f3fd"],"status":"fully-qualified","emoji":"🤏🏽","name":""},{"codes":["1f90f","1f3fe"],"status":"fully-qualified","emoji":"🤏🏾","name":""},{"codes":["1f90f","1f3ff"],"status":"fully-qualified","emoji":"🤏🏿","name":""},{"codes":["1f918"],"emoji":"🤘","name":"sign of the horns"},{"codes":["1f918","1f3fb"],"status":"fully-qualified","emoji":"🤘🏻","name":""},{"codes":["1f918","1f3fc"],"status":"fully-qualified","emoji":"🤘🏼","name":""},{"codes":["1f918","1f3fd"],"status":"fully-qualified","emoji":"🤘🏽","name":""},{"codes":["1f918","1f3fe"],"status":"fully-qualified","emoji":"🤘🏾","name":""},{"codes":["1f918","1f3ff"],"status":"fully-qualified","emoji":"🤘🏿","name":""},{"codes":["1f919"],"emoji":"🤙","name":"call me hand"},{"codes":["1f919","1f3fb"],"status":"fully-qualified","emoji":"🤙🏻","name":""},{"codes":["1f919","1f3fc"],"status":"fully-qualified","emoji":"🤙🏼","name":""},{"codes":["1f919","1f3fd"],"status":"fully-qualified","emoji":"🤙🏽","name":""},{"codes":["1f919","1f3fe"],"status":"fully-qualified","emoji":"🤙🏾","name":""},{"codes":["1f919","1f3ff"],"status":"fully-qualified","emoji":"🤙🏿","name":""},{"codes":["1f91a"],"emoji":"🤚","name":"raised back of hand"},{"codes":["1f91a","1f3fb"],"status":"fully-qualified","emoji":"🤚🏻","name":""},{"codes":["1f91a","1f3fc"],"status":"fully-qualified","emoji":"🤚🏼","name":""},{"codes":["1f91a","1f3fd"],"status":"fully-qualified","emoji":"🤚🏽","name":""},{"codes":["1f91a","1f3fe"],"status":"fully-qualified","emoji":"🤚🏾","name":""},{"codes":["1f91a","1f3ff"],"status":"fully-qualified","emoji":"🤚🏿","name":""},{"codes":["1f91b"],"emoji":"🤛","name":"left-facing fist"},{"codes":["1f91b","1f3fb"],"status":"fully-qualified","emoji":"🤛🏻","name":""},{"codes":["1f91b","1f3fc"],"status":"fully-qualified","emoji":"🤛🏼","name":""},{"codes":["1f91b","1f3fd"],"status":"fully-qualified","emoji":"🤛🏽","name":""},{"codes":["1f91b","1f3fe"],"status":"fully-qualified","emoji":"🤛🏾","name":""},{"codes":["1f91b","1f3ff"],"status":"fully-qualified","emoji":"🤛🏿","name":""},{"codes":["1f91c"],"emoji":"🤜","name":"right-facing fist"},{"codes":["1f91c","1f3fb"],"status":"fully-qualified","emoji":"🤜🏻","name":""},{"codes":["1f91c","1f3fc"],"status":"fully-qualified","emoji":"🤜🏼","name":""},{"codes":["1f91c","1f3fd"],"status":"fully-qualified","emoji":"🤜🏽","name":""},{"codes":["1f91c","1f3fe"],"status":"fully-qualified","emoji":"🤜🏾","name":""},{"codes":["1f91c","1f3ff"],"status":"fully-qualified","emoji":"🤜🏿","name":""},{"codes":["1f91d"],"emoji":"🤝","name":"handshake"},{"codes":["1f91e"],"emoji":"🤞","name":"hand with index and middle fingers crossed"},{"codes":["1f91e","1f3fb"],"status":"fully-qualified","emoji":"🤞🏻","name":""},{"codes":["1f91e","1f3fc"],"status":"fully-qualified","emoji":"🤞🏼","name":""},{"codes":["1f91e","1f3fd"],"status":"fully-qualified","emoji":"🤞🏽","name":""},{"codes":["1f91e","1f3fe"],"status":"fully-qualified","emoji":"🤞🏾","name":""},{"codes":["1f91e","1f3ff"],"status":"fully-qualified","emoji":"🤞🏿","name":""},{"codes":["1f91f"],"emoji":"🤟","name":"i love you hand sign"},{"codes":["1f91f","1f3fb"],"status":"fully-qualified","emoji":"🤟🏻","name":""},{"codes":["1f91f","1f3fc"],"status":"fully-qualified","emoji":"🤟🏼","name":""},{"codes":["1f91f","1f3fd"],"status":"fully-qualified","emoji":"🤟🏽","name":""},{"codes":["1f91f","1f3fe"],"status":"fully-qualified","emoji":"🤟🏾","name":""},{"codes":["1f91f","1f3ff"],"status":"fully-qualified","emoji":"🤟🏿","name":""},{"codes":["1f926","200d","2640","fe0f"],"emoji":"🤦‍♀️","name":""},{"codes":["1f926","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤦🏻‍♀️","name":""},{"codes":["1f926","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤦🏼‍♀️","name":""},{"codes":["1f926","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤦🏽‍♀️","name":""},{"codes":["1f926","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤦🏾‍♀️","name":""},{"codes":["1f926","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤦🏿‍♀️","name":""},{"codes":["1f926","200d","2642","fe0f"],"emoji":"🤦‍♂️","name":""},{"codes":["1f926","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤦🏻‍♂️","name":""},{"codes":["1f926","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤦🏼‍♂️","name":""},{"codes":["1f926","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤦🏽‍♂️","name":""},{"codes":["1f926","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤦🏾‍♂️","name":""},{"codes":["1f926","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤦🏿‍♂️","name":""},{"codes":["1f926"],"emoji":"🤦","name":"face palm"},{"codes":["1f926","1f3fb"],"status":"fully-qualified","emoji":"🤦🏻","name":""},{"codes":["1f926","1f3fc"],"status":"fully-qualified","emoji":"🤦🏼","name":""},{"codes":["1f926","1f3fd"],"status":"fully-qualified","emoji":"🤦🏽","name":""},{"codes":["1f926","1f3fe"],"status":"fully-qualified","emoji":"🤦🏾","name":""},{"codes":["1f926","1f3ff"],"status":"fully-qualified","emoji":"🤦🏿","name":""},{"codes":["1f930"],"emoji":"🤰","name":"pregnant woman"},{"codes":["1f930","1f3fb"],"status":"fully-qualified","emoji":"🤰🏻","name":""},{"codes":["1f930","1f3fc"],"status":"fully-qualified","emoji":"🤰🏼","name":""},{"codes":["1f930","1f3fd"],"status":"fully-qualified","emoji":"🤰🏽","name":""},{"codes":["1f930","1f3fe"],"status":"fully-qualified","emoji":"🤰🏾","name":""},{"codes":["1f930","1f3ff"],"status":"fully-qualified","emoji":"🤰🏿","name":""},{"codes":["1f931"],"emoji":"🤱","name":"breast-feeding"},{"codes":["1f931","1f3fb"],"status":"fully-qualified","emoji":"🤱🏻","name":""},{"codes":["1f931","1f3fc"],"status":"fully-qualified","emoji":"🤱🏼","name":""},{"codes":["1f931","1f3fd"],"status":"fully-qualified","emoji":"🤱🏽","name":""},{"codes":["1f931","1f3fe"],"status":"fully-qualified","emoji":"🤱🏾","name":""},{"codes":["1f931","1f3ff"],"status":"fully-qualified","emoji":"🤱🏿","name":""},{"codes":["1f932"],"emoji":"🤲","name":"palms up together"},{"codes":["1f932","1f3fb"],"status":"fully-qualified","emoji":"🤲🏻","name":""},{"codes":["1f932","1f3fc"],"status":"fully-qualified","emoji":"🤲🏼","name":""},{"codes":["1f932","1f3fd"],"status":"fully-qualified","emoji":"🤲🏽","name":""},{"codes":["1f932","1f3fe"],"status":"fully-qualified","emoji":"🤲🏾","name":""},{"codes":["1f932","1f3ff"],"status":"fully-qualified","emoji":"🤲🏿","name":""},{"codes":["1f933"],"emoji":"🤳","name":"selfie"},{"codes":["1f933","1f3fb"],"status":"fully-qualified","emoji":"🤳🏻","name":""},{"codes":["1f933","1f3fc"],"status":"fully-qualified","emoji":"🤳🏼","name":""},{"codes":["1f933","1f3fd"],"status":"fully-qualified","emoji":"🤳🏽","name":""},{"codes":["1f933","1f3fe"],"status":"fully-qualified","emoji":"🤳🏾","name":""},{"codes":["1f933","1f3ff"],"status":"fully-qualified","emoji":"🤳🏿","name":""},{"codes":["1f934"],"emoji":"🤴","name":"prince"},{"codes":["1f934","1f3fb"],"status":"fully-qualified","emoji":"🤴🏻","name":""},{"codes":["1f934","1f3fc"],"status":"fully-qualified","emoji":"🤴🏼","name":""},{"codes":["1f934","1f3fd"],"status":"fully-qualified","emoji":"🤴🏽","name":""},{"codes":["1f934","1f3fe"],"status":"fully-qualified","emoji":"🤴🏾","name":""},{"codes":["1f934","1f3ff"],"status":"fully-qualified","emoji":"🤴🏿","name":""},{"codes":["1f935","200d","2640","fe0f"],"emoji":"🤵‍♀️","name":""},{"codes":["1f935","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤵🏻‍♀️","name":""},{"codes":["1f935","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤵🏼‍♀️","name":""},{"codes":["1f935","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤵🏽‍♀️","name":""},{"codes":["1f935","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤵🏾‍♀️","name":""},{"codes":["1f935","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤵🏿‍♀️","name":""},{"codes":["1f935","200d","2642","fe0f"],"emoji":"🤵‍♂️","name":""},{"codes":["1f935","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤵🏻‍♂️","name":""},{"codes":["1f935","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤵🏼‍♂️","name":""},{"codes":["1f935","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤵🏽‍♂️","name":""},{"codes":["1f935","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤵🏾‍♂️","name":""},{"codes":["1f935","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤵🏿‍♂️","name":""},{"codes":["1f935"],"emoji":"🤵","name":"man in tuxedo"},{"codes":["1f935","1f3fb"],"status":"fully-qualified","emoji":"🤵🏻","name":""},{"codes":["1f935","1f3fc"],"status":"fully-qualified","emoji":"🤵🏼","name":""},{"codes":["1f935","1f3fd"],"status":"fully-qualified","emoji":"🤵🏽","name":""},{"codes":["1f935","1f3fe"],"status":"fully-qualified","emoji":"🤵🏾","name":""},{"codes":["1f935","1f3ff"],"status":"fully-qualified","emoji":"🤵🏿","name":""},{"codes":["1f936"],"emoji":"🤶","name":"mother christmas"},{"codes":["1f936","1f3fb"],"status":"fully-qualified","emoji":"🤶🏻","name":""},{"codes":["1f936","1f3fc"],"status":"fully-qualified","emoji":"🤶🏼","name":""},{"codes":["1f936","1f3fd"],"status":"fully-qualified","emoji":"🤶🏽","name":""},{"codes":["1f936","1f3fe"],"status":"fully-qualified","emoji":"🤶🏾","name":""},{"codes":["1f936","1f3ff"],"status":"fully-qualified","emoji":"🤶🏿","name":""},{"codes":["1f937","200d","2640","fe0f"],"emoji":"🤷‍♀️","name":""},{"codes":["1f937","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤷🏻‍♀️","name":""},{"codes":["1f937","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤷🏼‍♀️","name":""},{"codes":["1f937","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤷🏽‍♀️","name":""},{"codes":["1f937","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤷🏾‍♀️","name":""},{"codes":["1f937","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤷🏿‍♀️","name":""},{"codes":["1f937","200d","2642","fe0f"],"emoji":"🤷‍♂️","name":""},{"codes":["1f937","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤷🏻‍♂️","name":""},{"codes":["1f937","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤷🏼‍♂️","name":""},{"codes":["1f937","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤷🏽‍♂️","name":""},{"codes":["1f937","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤷🏾‍♂️","name":""},{"codes":["1f937","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤷🏿‍♂️","name":""},{"codes":["1f937"],"emoji":"🤷","name":"shrug"},{"codes":["1f937","1f3fb"],"status":"fully-qualified","emoji":"🤷🏻","name":""},{"codes":["1f937","1f3fc"],"status":"fully-qualified","emoji":"🤷🏼","name":""},{"codes":["1f937","1f3fd"],"status":"fully-qualified","emoji":"🤷🏽","name":""},{"codes":["1f937","1f3fe"],"status":"fully-qualified","emoji":"🤷🏾","name":""},{"codes":["1f937","1f3ff"],"status":"fully-qualified","emoji":"🤷🏿","name":""},{"codes":["1f938","200d","2640","fe0f"],"emoji":"🤸‍♀️","name":""},{"codes":["1f938","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤸🏻‍♀️","name":""},{"codes":["1f938","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤸🏼‍♀️","name":""},{"codes":["1f938","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤸🏽‍♀️","name":""},{"codes":["1f938","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤸🏾‍♀️","name":""},{"codes":["1f938","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤸🏿‍♀️","name":""},{"codes":["1f938","200d","2642","fe0f"],"emoji":"🤸‍♂️","name":""},{"codes":["1f938","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤸🏻‍♂️","name":""},{"codes":["1f938","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤸🏼‍♂️","name":""},{"codes":["1f938","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤸🏽‍♂️","name":""},{"codes":["1f938","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤸🏾‍♂️","name":""},{"codes":["1f938","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤸🏿‍♂️","name":""},{"codes":["1f938"],"emoji":"🤸","name":"person doing cartwheel"},{"codes":["1f938","1f3fb"],"status":"fully-qualified","emoji":"🤸🏻","name":""},{"codes":["1f938","1f3fc"],"status":"fully-qualified","emoji":"🤸🏼","name":""},{"codes":["1f938","1f3fd"],"status":"fully-qualified","emoji":"🤸🏽","name":""},{"codes":["1f938","1f3fe"],"status":"fully-qualified","emoji":"🤸🏾","name":""},{"codes":["1f938","1f3ff"],"status":"fully-qualified","emoji":"🤸🏿","name":""},{"codes":["1f939","200d","2640","fe0f"],"emoji":"🤹‍♀️","name":""},{"codes":["1f939","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤹🏻‍♀️","name":""},{"codes":["1f939","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤹🏼‍♀️","name":""},{"codes":["1f939","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤹🏽‍♀️","name":""},{"codes":["1f939","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤹🏾‍♀️","name":""},{"codes":["1f939","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤹🏿‍♀️","name":""},{"codes":["1f939","200d","2642","fe0f"],"emoji":"🤹‍♂️","name":""},{"codes":["1f939","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤹🏻‍♂️","name":""},{"codes":["1f939","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤹🏼‍♂️","name":""},{"codes":["1f939","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤹🏽‍♂️","name":""},{"codes":["1f939","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤹🏾‍♂️","name":""},{"codes":["1f939","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤹🏿‍♂️","name":""},{"codes":["1f939"],"emoji":"🤹","name":"juggling"},{"codes":["1f939","1f3fb"],"status":"fully-qualified","emoji":"🤹🏻","name":""},{"codes":["1f939","1f3fc"],"status":"fully-qualified","emoji":"🤹🏼","name":""},{"codes":["1f939","1f3fd"],"status":"fully-qualified","emoji":"🤹🏽","name":""},{"codes":["1f939","1f3fe"],"status":"fully-qualified","emoji":"🤹🏾","name":""},{"codes":["1f939","1f3ff"],"status":"fully-qualified","emoji":"🤹🏿","name":""},{"codes":["1f93a"],"emoji":"🤺","name":"fencer"},{"codes":["1f93c","200d","2640","fe0f"],"emoji":"🤼‍♀️","name":""},{"codes":["1f93c","200d","2642","fe0f"],"emoji":"🤼‍♂️","name":""},{"codes":["1f93c"],"emoji":"🤼","name":"wrestlers"},{"codes":["1f93d","200d","2640","fe0f"],"emoji":"🤽‍♀️","name":""},{"codes":["1f93d","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤽🏻‍♀️","name":""},{"codes":["1f93d","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤽🏼‍♀️","name":""},{"codes":["1f93d","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤽🏽‍♀️","name":""},{"codes":["1f93d","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤽🏾‍♀️","name":""},{"codes":["1f93d","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤽🏿‍♀️","name":""},{"codes":["1f93d","200d","2642","fe0f"],"emoji":"🤽‍♂️","name":""},{"codes":["1f93d","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤽🏻‍♂️","name":""},{"codes":["1f93d","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤽🏼‍♂️","name":""},{"codes":["1f93d","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤽🏽‍♂️","name":""},{"codes":["1f93d","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤽🏾‍♂️","name":""},{"codes":["1f93d","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤽🏿‍♂️","name":""},{"codes":["1f93d"],"emoji":"🤽","name":"water polo"},{"codes":["1f93d","1f3fb"],"status":"fully-qualified","emoji":"🤽🏻","name":""},{"codes":["1f93d","1f3fc"],"status":"fully-qualified","emoji":"🤽🏼","name":""},{"codes":["1f93d","1f3fd"],"status":"fully-qualified","emoji":"🤽🏽","name":""},{"codes":["1f93d","1f3fe"],"status":"fully-qualified","emoji":"🤽🏾","name":""},{"codes":["1f93d","1f3ff"],"status":"fully-qualified","emoji":"🤽🏿","name":""},{"codes":["1f93e","200d","2640","fe0f"],"emoji":"🤾‍♀️","name":""},{"codes":["1f93e","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤾🏻‍♀️","name":""},{"codes":["1f93e","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤾🏼‍♀️","name":""},{"codes":["1f93e","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤾🏽‍♀️","name":""},{"codes":["1f93e","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤾🏾‍♀️","name":""},{"codes":["1f93e","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🤾🏿‍♀️","name":""},{"codes":["1f93e","200d","2642","fe0f"],"emoji":"🤾‍♂️","name":""},{"codes":["1f93e","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤾🏻‍♂️","name":""},{"codes":["1f93e","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤾🏼‍♂️","name":""},{"codes":["1f93e","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤾🏽‍♂️","name":""},{"codes":["1f93e","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤾🏾‍♂️","name":""},{"codes":["1f93e","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🤾🏿‍♂️","name":""},{"codes":["1f93e"],"emoji":"🤾","name":"handball"},{"codes":["1f93e","1f3fb"],"status":"fully-qualified","emoji":"🤾🏻","name":""},{"codes":["1f93e","1f3fc"],"status":"fully-qualified","emoji":"🤾🏼","name":""},{"codes":["1f93e","1f3fd"],"status":"fully-qualified","emoji":"🤾🏽","name":""},{"codes":["1f93e","1f3fe"],"status":"fully-qualified","emoji":"🤾🏾","name":""},{"codes":["1f93e","1f3ff"],"status":"fully-qualified","emoji":"🤾🏿","name":""},{"codes":["1f977"],"emoji":"🥷","name":"ninja"},{"codes":["1f977","1f3fb"],"status":"fully-qualified","emoji":"🥷🏻","name":""},{"codes":["1f977","1f3fc"],"status":"fully-qualified","emoji":"🥷🏼","name":""},{"codes":["1f977","1f3fd"],"status":"fully-qualified","emoji":"🥷🏽","name":""},{"codes":["1f977","1f3fe"],"status":"fully-qualified","emoji":"🥷🏾","name":""},{"codes":["1f977","1f3ff"],"status":"fully-qualified","emoji":"🥷🏿","name":""},{"codes":["1f9b4"],"emoji":"🦴","name":"bone"},{"codes":["1f9b5"],"emoji":"🦵","name":"leg"},{"codes":["1f9b5","1f3fb"],"status":"fully-qualified","emoji":"🦵🏻","name":""},{"codes":["1f9b5","1f3fc"],"status":"fully-qualified","emoji":"🦵🏼","name":""},{"codes":["1f9b5","1f3fd"],"status":"fully-qualified","emoji":"🦵🏽","name":""},{"codes":["1f9b5","1f3fe"],"status":"fully-qualified","emoji":"🦵🏾","name":""},{"codes":["1f9b5","1f3ff"],"status":"fully-qualified","emoji":"🦵🏿","name":""},{"codes":["1f9b6"],"emoji":"🦶","name":"foot"},{"codes":["1f9b6","1f3fb"],"status":"fully-qualified","emoji":"🦶🏻","name":""},{"codes":["1f9b6","1f3fc"],"status":"fully-qualified","emoji":"🦶🏼","name":""},{"codes":["1f9b6","1f3fd"],"status":"fully-qualified","emoji":"🦶🏽","name":""},{"codes":["1f9b6","1f3fe"],"status":"fully-qualified","emoji":"🦶🏾","name":""},{"codes":["1f9b6","1f3ff"],"status":"fully-qualified","emoji":"🦶🏿","name":""},{"codes":["1f9b7"],"emoji":"🦷","name":"tooth"},{"codes":["1f9b8","200d","2640","fe0f"],"emoji":"🦸‍♀️","name":""},{"codes":["1f9b8","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦸🏻‍♀️","name":""},{"codes":["1f9b8","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦸🏼‍♀️","name":""},{"codes":["1f9b8","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦸🏽‍♀️","name":""},{"codes":["1f9b8","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦸🏾‍♀️","name":""},{"codes":["1f9b8","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦸🏿‍♀️","name":""},{"codes":["1f9b8","200d","2642","fe0f"],"emoji":"🦸‍♂️","name":""},{"codes":["1f9b8","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦸🏻‍♂️","name":""},{"codes":["1f9b8","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦸🏼‍♂️","name":""},{"codes":["1f9b8","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦸🏽‍♂️","name":""},{"codes":["1f9b8","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦸🏾‍♂️","name":""},{"codes":["1f9b8","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦸🏿‍♂️","name":""},{"codes":["1f9b8"],"emoji":"🦸","name":"superhero"},{"codes":["1f9b8","1f3fb"],"status":"fully-qualified","emoji":"🦸🏻","name":""},{"codes":["1f9b8","1f3fc"],"status":"fully-qualified","emoji":"🦸🏼","name":""},{"codes":["1f9b8","1f3fd"],"status":"fully-qualified","emoji":"🦸🏽","name":""},{"codes":["1f9b8","1f3fe"],"status":"fully-qualified","emoji":"🦸🏾","name":""},{"codes":["1f9b8","1f3ff"],"status":"fully-qualified","emoji":"🦸🏿","name":""},{"codes":["1f9b9","200d","2640","fe0f"],"emoji":"🦹‍♀️","name":""},{"codes":["1f9b9","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦹🏻‍♀️","name":""},{"codes":["1f9b9","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦹🏼‍♀️","name":""},{"codes":["1f9b9","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦹🏽‍♀️","name":""},{"codes":["1f9b9","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦹🏾‍♀️","name":""},{"codes":["1f9b9","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🦹🏿‍♀️","name":""},{"codes":["1f9b9","200d","2642","fe0f"],"emoji":"🦹‍♂️","name":""},{"codes":["1f9b9","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦹🏻‍♂️","name":""},{"codes":["1f9b9","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦹🏼‍♂️","name":""},{"codes":["1f9b9","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦹🏽‍♂️","name":""},{"codes":["1f9b9","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦹🏾‍♂️","name":""},{"codes":["1f9b9","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🦹🏿‍♂️","name":""},{"codes":["1f9b9"],"emoji":"🦹","name":"supervillain"},{"codes":["1f9b9","1f3fb"],"status":"fully-qualified","emoji":"🦹🏻","name":""},{"codes":["1f9b9","1f3fc"],"status":"fully-qualified","emoji":"🦹🏼","name":""},{"codes":["1f9b9","1f3fd"],"status":"fully-qualified","emoji":"🦹🏽","name":""},{"codes":["1f9b9","1f3fe"],"status":"fully-qualified","emoji":"🦹🏾","name":""},{"codes":["1f9b9","1f3ff"],"status":"fully-qualified","emoji":"🦹🏿","name":""},{"codes":["1f9bb"],"emoji":"🦻","name":"ear with hearing aid"},{"codes":["1f9bb","1f3fb"],"status":"fully-qualified","emoji":"🦻🏻","name":""},{"codes":["1f9bb","1f3fc"],"status":"fully-qualified","emoji":"🦻🏼","name":""},{"codes":["1f9bb","1f3fd"],"status":"fully-qualified","emoji":"🦻🏽","name":""},{"codes":["1f9bb","1f3fe"],"status":"fully-qualified","emoji":"🦻🏾","name":""},{"codes":["1f9bb","1f3ff"],"status":"fully-qualified","emoji":"🦻🏿","name":""},{"codes":["1f9be"],"emoji":"🦾","name":"mechanical arm"},{"codes":["1f9bf"],"emoji":"🦿","name":"mechanical leg"},{"codes":["1f9cd","200d","2640","fe0f"],"emoji":"🧍‍♀️","name":""},{"codes":["1f9cd","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧍🏻‍♀️","name":""},{"codes":["1f9cd","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧍🏼‍♀️","name":""},{"codes":["1f9cd","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧍🏽‍♀️","name":""},{"codes":["1f9cd","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧍🏾‍♀️","name":""},{"codes":["1f9cd","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧍🏿‍♀️","name":""},{"codes":["1f9cd","200d","2642","fe0f"],"emoji":"🧍‍♂️","name":""},{"codes":["1f9cd","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧍🏻‍♂️","name":""},{"codes":["1f9cd","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧍🏼‍♂️","name":""},{"codes":["1f9cd","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧍🏽‍♂️","name":""},{"codes":["1f9cd","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧍🏾‍♂️","name":""},{"codes":["1f9cd","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧍🏿‍♂️","name":""},{"codes":["1f9cd"],"emoji":"🧍","name":"standing person"},{"codes":["1f9cd","1f3fb"],"status":"fully-qualified","emoji":"🧍🏻","name":""},{"codes":["1f9cd","1f3fc"],"status":"fully-qualified","emoji":"🧍🏼","name":""},{"codes":["1f9cd","1f3fd"],"status":"fully-qualified","emoji":"🧍🏽","name":""},{"codes":["1f9cd","1f3fe"],"status":"fully-qualified","emoji":"🧍🏾","name":""},{"codes":["1f9cd","1f3ff"],"status":"fully-qualified","emoji":"🧍🏿","name":""},{"codes":["1f9ce","200d","2640","fe0f"],"emoji":"🧎‍♀️","name":""},{"codes":["1f9ce","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧎🏻‍♀️","name":""},{"codes":["1f9ce","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧎🏼‍♀️","name":""},{"codes":["1f9ce","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧎🏽‍♀️","name":""},{"codes":["1f9ce","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧎🏾‍♀️","name":""},{"codes":["1f9ce","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧎🏿‍♀️","name":""},{"codes":["1f9ce","200d","2642","fe0f"],"emoji":"🧎‍♂️","name":""},{"codes":["1f9ce","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧎🏻‍♂️","name":""},{"codes":["1f9ce","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧎🏼‍♂️","name":""},{"codes":["1f9ce","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧎🏽‍♂️","name":""},{"codes":["1f9ce","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧎🏾‍♂️","name":""},{"codes":["1f9ce","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧎🏿‍♂️","name":""},{"codes":["1f9ce"],"emoji":"🧎","name":"kneeling person"},{"codes":["1f9ce","1f3fb"],"status":"fully-qualified","emoji":"🧎🏻","name":""},{"codes":["1f9ce","1f3fc"],"status":"fully-qualified","emoji":"🧎🏼","name":""},{"codes":["1f9ce","1f3fd"],"status":"fully-qualified","emoji":"🧎🏽","name":""},{"codes":["1f9ce","1f3fe"],"status":"fully-qualified","emoji":"🧎🏾","name":""},{"codes":["1f9ce","1f3ff"],"status":"fully-qualified","emoji":"🧎🏿","name":""},{"codes":["1f9cf","200d","2640","fe0f"],"emoji":"🧏‍♀️","name":""},{"codes":["1f9cf","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧏🏻‍♀️","name":""},{"codes":["1f9cf","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧏🏼‍♀️","name":""},{"codes":["1f9cf","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧏🏽‍♀️","name":""},{"codes":["1f9cf","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧏🏾‍♀️","name":""},{"codes":["1f9cf","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧏🏿‍♀️","name":""},{"codes":["1f9cf","200d","2642","fe0f"],"emoji":"🧏‍♂️","name":""},{"codes":["1f9cf","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧏🏻‍♂️","name":""},{"codes":["1f9cf","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧏🏼‍♂️","name":""},{"codes":["1f9cf","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧏🏽‍♂️","name":""},{"codes":["1f9cf","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧏🏾‍♂️","name":""},{"codes":["1f9cf","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧏🏿‍♂️","name":""},{"codes":["1f9cf"],"emoji":"🧏","name":"deaf person"},{"codes":["1f9cf","1f3fb"],"status":"fully-qualified","emoji":"🧏🏻","name":""},{"codes":["1f9cf","1f3fc"],"status":"fully-qualified","emoji":"🧏🏼","name":""},{"codes":["1f9cf","1f3fd"],"status":"fully-qualified","emoji":"🧏🏽","name":""},{"codes":["1f9cf","1f3fe"],"status":"fully-qualified","emoji":"🧏🏾","name":""},{"codes":["1f9cf","1f3ff"],"status":"fully-qualified","emoji":"🧏🏿","name":""},{"codes":["1f9d1","200d","1f33e"],"emoji":"🧑‍🌾","name":""},{"codes":["1f9d1","1f3fb","200d","1f33e"],"status":"fully-qualified","emoji":"🧑🏻‍🌾","name":""},{"codes":["1f9d1","1f3fc","200d","1f33e"],"status":"fully-qualified","emoji":"🧑🏼‍🌾","name":""},{"codes":["1f9d1","1f3fd","200d","1f33e"],"status":"fully-qualified","emoji":"🧑🏽‍🌾","name":""},{"codes":["1f9d1","1f3fe","200d","1f33e"],"status":"fully-qualified","emoji":"🧑🏾‍🌾","name":""},{"codes":["1f9d1","1f3ff","200d","1f33e"],"status":"fully-qualified","emoji":"🧑🏿‍🌾","name":""},{"codes":["1f9d1","200d","1f373"],"emoji":"🧑‍🍳","name":""},{"codes":["1f9d1","1f3fb","200d","1f373"],"status":"fully-qualified","emoji":"🧑🏻‍🍳","name":""},{"codes":["1f9d1","1f3fc","200d","1f373"],"status":"fully-qualified","emoji":"🧑🏼‍🍳","name":""},{"codes":["1f9d1","1f3fd","200d","1f373"],"status":"fully-qualified","emoji":"🧑🏽‍🍳","name":""},{"codes":["1f9d1","1f3fe","200d","1f373"],"status":"fully-qualified","emoji":"🧑🏾‍🍳","name":""},{"codes":["1f9d1","1f3ff","200d","1f373"],"status":"fully-qualified","emoji":"🧑🏿‍🍳","name":""},{"codes":["1f9d1","200d","1f37c"],"emoji":"🧑‍🍼","name":""},{"codes":["1f9d1","1f3fb","200d","1f37c"],"status":"fully-qualified","emoji":"🧑🏻‍🍼","name":""},{"codes":["1f9d1","1f3fc","200d","1f37c"],"status":"fully-qualified","emoji":"🧑🏼‍🍼","name":""},{"codes":["1f9d1","1f3fd","200d","1f37c"],"status":"fully-qualified","emoji":"🧑🏽‍🍼","name":""},{"codes":["1f9d1","1f3fe","200d","1f37c"],"status":"fully-qualified","emoji":"🧑🏾‍🍼","name":""},{"codes":["1f9d1","1f3ff","200d","1f37c"],"status":"fully-qualified","emoji":"🧑🏿‍🍼","name":""},{"codes":["1f9d1","200d","1f384"],"emoji":"🧑‍🎄","name":""},{"codes":["1f9d1","1f3fb","200d","1f384"],"status":"fully-qualified","emoji":"🧑🏻‍🎄","name":""},{"codes":["1f9d1","1f3fc","200d","1f384"],"status":"fully-qualified","emoji":"🧑🏼‍🎄","name":""},{"codes":["1f9d1","1f3fd","200d","1f384"],"status":"fully-qualified","emoji":"🧑🏽‍🎄","name":""},{"codes":["1f9d1","1f3fe","200d","1f384"],"status":"fully-qualified","emoji":"🧑🏾‍🎄","name":""},{"codes":["1f9d1","1f3ff","200d","1f384"],"status":"fully-qualified","emoji":"🧑🏿‍🎄","name":""},{"codes":["1f9d1","200d","1f393"],"emoji":"🧑‍🎓","name":""},{"codes":["1f9d1","1f3fb","200d","1f393"],"status":"fully-qualified","emoji":"🧑🏻‍🎓","name":""},{"codes":["1f9d1","1f3fc","200d","1f393"],"status":"fully-qualified","emoji":"🧑🏼‍🎓","name":""},{"codes":["1f9d1","1f3fd","200d","1f393"],"status":"fully-qualified","emoji":"🧑🏽‍🎓","name":""},{"codes":["1f9d1","1f3fe","200d","1f393"],"status":"fully-qualified","emoji":"🧑🏾‍🎓","name":""},{"codes":["1f9d1","1f3ff","200d","1f393"],"status":"fully-qualified","emoji":"🧑🏿‍🎓","name":""},{"codes":["1f9d1","200d","1f3a4"],"emoji":"🧑‍🎤","name":""},{"codes":["1f9d1","1f3fb","200d","1f3a4"],"status":"fully-qualified","emoji":"🧑🏻‍🎤","name":""},{"codes":["1f9d1","1f3fc","200d","1f3a4"],"status":"fully-qualified","emoji":"🧑🏼‍🎤","name":""},{"codes":["1f9d1","1f3fd","200d","1f3a4"],"status":"fully-qualified","emoji":"🧑🏽‍🎤","name":""},{"codes":["1f9d1","1f3fe","200d","1f3a4"],"status":"fully-qualified","emoji":"🧑🏾‍🎤","name":""},{"codes":["1f9d1","1f3ff","200d","1f3a4"],"status":"fully-qualified","emoji":"🧑🏿‍🎤","name":""},{"codes":["1f9d1","200d","1f3a8"],"emoji":"🧑‍🎨","name":""},{"codes":["1f9d1","1f3fb","200d","1f3a8"],"status":"fully-qualified","emoji":"🧑🏻‍🎨","name":""},{"codes":["1f9d1","1f3fc","200d","1f3a8"],"status":"fully-qualified","emoji":"🧑🏼‍🎨","name":""},{"codes":["1f9d1","1f3fd","200d","1f3a8"],"status":"fully-qualified","emoji":"🧑🏽‍🎨","name":""},{"codes":["1f9d1","1f3fe","200d","1f3a8"],"status":"fully-qualified","emoji":"🧑🏾‍🎨","name":""},{"codes":["1f9d1","1f3ff","200d","1f3a8"],"status":"fully-qualified","emoji":"🧑🏿‍🎨","name":""},{"codes":["1f9d1","200d","1f3eb"],"emoji":"🧑‍🏫","name":""},{"codes":["1f9d1","1f3fb","200d","1f3eb"],"status":"fully-qualified","emoji":"🧑🏻‍🏫","name":""},{"codes":["1f9d1","1f3fc","200d","1f3eb"],"status":"fully-qualified","emoji":"🧑🏼‍🏫","name":""},{"codes":["1f9d1","1f3fd","200d","1f3eb"],"status":"fully-qualified","emoji":"🧑🏽‍🏫","name":""},{"codes":["1f9d1","1f3fe","200d","1f3eb"],"status":"fully-qualified","emoji":"🧑🏾‍🏫","name":""},{"codes":["1f9d1","1f3ff","200d","1f3eb"],"status":"fully-qualified","emoji":"🧑🏿‍🏫","name":""},{"codes":["1f9d1","200d","1f3ed"],"emoji":"🧑‍🏭","name":""},{"codes":["1f9d1","1f3fb","200d","1f3ed"],"status":"fully-qualified","emoji":"🧑🏻‍🏭","name":""},{"codes":["1f9d1","1f3fc","200d","1f3ed"],"status":"fully-qualified","emoji":"🧑🏼‍🏭","name":""},{"codes":["1f9d1","1f3fd","200d","1f3ed"],"status":"fully-qualified","emoji":"🧑🏽‍🏭","name":""},{"codes":["1f9d1","1f3fe","200d","1f3ed"],"status":"fully-qualified","emoji":"🧑🏾‍🏭","name":""},{"codes":["1f9d1","1f3ff","200d","1f3ed"],"status":"fully-qualified","emoji":"🧑🏿‍🏭","name":""},{"codes":["1f9d1","200d","1f4bb"],"emoji":"🧑‍💻","name":""},{"codes":["1f9d1","1f3fb","200d","1f4bb"],"status":"fully-qualified","emoji":"🧑🏻‍💻","name":""},{"codes":["1f9d1","1f3fc","200d","1f4bb"],"status":"fully-qualified","emoji":"🧑🏼‍💻","name":""},{"codes":["1f9d1","1f3fd","200d","1f4bb"],"status":"fully-qualified","emoji":"🧑🏽‍💻","name":""},{"codes":["1f9d1","1f3fe","200d","1f4bb"],"status":"fully-qualified","emoji":"🧑🏾‍💻","name":""},{"codes":["1f9d1","1f3ff","200d","1f4bb"],"status":"fully-qualified","emoji":"🧑🏿‍💻","name":""},{"codes":["1f9d1","200d","1f4bc"],"emoji":"🧑‍💼","name":""},{"codes":["1f9d1","1f3fb","200d","1f4bc"],"status":"fully-qualified","emoji":"🧑🏻‍💼","name":""},{"codes":["1f9d1","1f3fc","200d","1f4bc"],"status":"fully-qualified","emoji":"🧑🏼‍💼","name":""},{"codes":["1f9d1","1f3fd","200d","1f4bc"],"status":"fully-qualified","emoji":"🧑🏽‍💼","name":""},{"codes":["1f9d1","1f3fe","200d","1f4bc"],"status":"fully-qualified","emoji":"🧑🏾‍💼","name":""},{"codes":["1f9d1","1f3ff","200d","1f4bc"],"status":"fully-qualified","emoji":"🧑🏿‍💼","name":""},{"codes":["1f9d1","200d","1f527"],"emoji":"🧑‍🔧","name":""},{"codes":["1f9d1","1f3fb","200d","1f527"],"status":"fully-qualified","emoji":"🧑🏻‍🔧","name":""},{"codes":["1f9d1","1f3fc","200d","1f527"],"status":"fully-qualified","emoji":"🧑🏼‍🔧","name":""},{"codes":["1f9d1","1f3fd","200d","1f527"],"status":"fully-qualified","emoji":"🧑🏽‍🔧","name":""},{"codes":["1f9d1","1f3fe","200d","1f527"],"status":"fully-qualified","emoji":"🧑🏾‍🔧","name":""},{"codes":["1f9d1","1f3ff","200d","1f527"],"status":"fully-qualified","emoji":"🧑🏿‍🔧","name":""},{"codes":["1f9d1","200d","1f52c"],"emoji":"🧑‍🔬","name":""},{"codes":["1f9d1","1f3fb","200d","1f52c"],"status":"fully-qualified","emoji":"🧑🏻‍🔬","name":""},{"codes":["1f9d1","1f3fc","200d","1f52c"],"status":"fully-qualified","emoji":"🧑🏼‍🔬","name":""},{"codes":["1f9d1","1f3fd","200d","1f52c"],"status":"fully-qualified","emoji":"🧑🏽‍🔬","name":""},{"codes":["1f9d1","1f3fe","200d","1f52c"],"status":"fully-qualified","emoji":"🧑🏾‍🔬","name":""},{"codes":["1f9d1","1f3ff","200d","1f52c"],"status":"fully-qualified","emoji":"🧑🏿‍🔬","name":""},{"codes":["1f9d1","200d","1f680"],"emoji":"🧑‍🚀","name":""},{"codes":["1f9d1","1f3fb","200d","1f680"],"status":"fully-qualified","emoji":"🧑🏻‍🚀","name":""},{"codes":["1f9d1","1f3fc","200d","1f680"],"status":"fully-qualified","emoji":"🧑🏼‍🚀","name":""},{"codes":["1f9d1","1f3fd","200d","1f680"],"status":"fully-qualified","emoji":"🧑🏽‍🚀","name":""},{"codes":["1f9d1","1f3fe","200d","1f680"],"status":"fully-qualified","emoji":"🧑🏾‍🚀","name":""},{"codes":["1f9d1","1f3ff","200d","1f680"],"status":"fully-qualified","emoji":"🧑🏿‍🚀","name":""},{"codes":["1f9d1","200d","1f692"],"emoji":"🧑‍🚒","name":""},{"codes":["1f9d1","1f3fb","200d","1f692"],"status":"fully-qualified","emoji":"🧑🏻‍🚒","name":""},{"codes":["1f9d1","1f3fc","200d","1f692"],"status":"fully-qualified","emoji":"🧑🏼‍🚒","name":""},{"codes":["1f9d1","1f3fd","200d","1f692"],"status":"fully-qualified","emoji":"🧑🏽‍🚒","name":""},{"codes":["1f9d1","1f3fe","200d","1f692"],"status":"fully-qualified","emoji":"🧑🏾‍🚒","name":""},{"codes":["1f9d1","1f3ff","200d","1f692"],"status":"fully-qualified","emoji":"🧑🏿‍🚒","name":""},{"codes":["1f9d1","200d","1f91d","200d","1f9d1"],"emoji":"🧑‍🤝‍🧑","name":""},{"codes":["1f9d1","1f3fb","200d","1f91d","200d","1f9d1","1f3fb"],"status":"fully-qualified","emoji":"🧑🏻‍🤝‍🧑🏻","name":""},{"codes":["1f9d1","1f3fb","200d","1f91d","200d","1f9d1","1f3fc"],"status":"fully-qualified","emoji":"🧑🏻‍🤝‍🧑🏼","name":""},{"codes":["1f9d1","1f3fb","200d","1f91d","200d","1f9d1","1f3fd"],"status":"fully-qualified","emoji":"🧑🏻‍🤝‍🧑🏽","name":""},{"codes":["1f9d1","1f3fb","200d","1f91d","200d","1f9d1","1f3fe"],"status":"fully-qualified","emoji":"🧑🏻‍🤝‍🧑🏾","name":""},{"codes":["1f9d1","1f3fb","200d","1f91d","200d","1f9d1","1f3ff"],"status":"fully-qualified","emoji":"🧑🏻‍🤝‍🧑🏿","name":""},{"codes":["1f9d1","1f3fc","200d","1f91d","200d","1f9d1","1f3fb"],"status":"fully-qualified","emoji":"🧑🏼‍🤝‍🧑🏻","name":""},{"codes":["1f9d1","1f3fc","200d","1f91d","200d","1f9d1","1f3fc"],"status":"fully-qualified","emoji":"🧑🏼‍🤝‍🧑🏼","name":""},{"codes":["1f9d1","1f3fc","200d","1f91d","200d","1f9d1","1f3fd"],"status":"fully-qualified","emoji":"🧑🏼‍🤝‍🧑🏽","name":""},{"codes":["1f9d1","1f3fc","200d","1f91d","200d","1f9d1","1f3fe"],"status":"fully-qualified","emoji":"🧑🏼‍🤝‍🧑🏾","name":""},{"codes":["1f9d1","1f3fc","200d","1f91d","200d","1f9d1","1f3ff"],"status":"fully-qualified","emoji":"🧑🏼‍🤝‍🧑🏿","name":""},{"codes":["1f9d1","1f3fd","200d","1f91d","200d","1f9d1","1f3fb"],"status":"fully-qualified","emoji":"🧑🏽‍🤝‍🧑🏻","name":""},{"codes":["1f9d1","1f3fd","200d","1f91d","200d","1f9d1","1f3fc"],"status":"fully-qualified","emoji":"🧑🏽‍🤝‍🧑🏼","name":""},{"codes":["1f9d1","1f3fd","200d","1f91d","200d","1f9d1","1f3fd"],"status":"fully-qualified","emoji":"🧑🏽‍🤝‍🧑🏽","name":""},{"codes":["1f9d1","1f3fd","200d","1f91d","200d","1f9d1","1f3fe"],"status":"fully-qualified","emoji":"🧑🏽‍🤝‍🧑🏾","name":""},{"codes":["1f9d1","1f3fd","200d","1f91d","200d","1f9d1","1f3ff"],"status":"fully-qualified","emoji":"🧑🏽‍🤝‍🧑🏿","name":""},{"codes":["1f9d1","1f3fe","200d","1f91d","200d","1f9d1","1f3fb"],"status":"fully-qualified","emoji":"🧑🏾‍🤝‍🧑🏻","name":""},{"codes":["1f9d1","1f3fe","200d","1f91d","200d","1f9d1","1f3fc"],"status":"fully-qualified","emoji":"🧑🏾‍🤝‍🧑🏼","name":""},{"codes":["1f9d1","1f3fe","200d","1f91d","200d","1f9d1","1f3fd"],"status":"fully-qualified","emoji":"🧑🏾‍🤝‍🧑🏽","name":""},{"codes":["1f9d1","1f3fe","200d","1f91d","200d","1f9d1","1f3fe"],"status":"fully-qualified","emoji":"🧑🏾‍🤝‍🧑🏾","name":""},{"codes":["1f9d1","1f3fe","200d","1f91d","200d","1f9d1","1f3ff"],"status":"fully-qualified","emoji":"🧑🏾‍🤝‍🧑🏿","name":""},{"codes":["1f9d1","1f3ff","200d","1f91d","200d","1f9d1","1f3fb"],"status":"fully-qualified","emoji":"🧑🏿‍🤝‍🧑🏻","name":""},{"codes":["1f9d1","1f3ff","200d","1f91d","200d","1f9d1","1f3fc"],"status":"fully-qualified","emoji":"🧑🏿‍🤝‍🧑🏼","name":""},{"codes":["1f9d1","1f3ff","200d","1f91d","200d","1f9d1","1f3fd"],"status":"fully-qualified","emoji":"🧑🏿‍🤝‍🧑🏽","name":""},{"codes":["1f9d1","1f3ff","200d","1f91d","200d","1f9d1","1f3fe"],"status":"fully-qualified","emoji":"🧑🏿‍🤝‍🧑🏾","name":""},{"codes":["1f9d1","1f3ff","200d","1f91d","200d","1f9d1","1f3ff"],"status":"fully-qualified","emoji":"🧑🏿‍🤝‍🧑🏿","name":""},{"codes":["1f9d1","200d","1f9af"],"emoji":"🧑‍🦯","name":""},{"codes":["1f9d1","1f3fb","200d","1f9af"],"status":"fully-qualified","emoji":"🧑🏻‍🦯","name":""},{"codes":["1f9d1","1f3fc","200d","1f9af"],"status":"fully-qualified","emoji":"🧑🏼‍🦯","name":""},{"codes":["1f9d1","1f3fd","200d","1f9af"],"status":"fully-qualified","emoji":"🧑🏽‍🦯","name":""},{"codes":["1f9d1","1f3fe","200d","1f9af"],"status":"fully-qualified","emoji":"🧑🏾‍🦯","name":""},{"codes":["1f9d1","1f3ff","200d","1f9af"],"status":"fully-qualified","emoji":"🧑🏿‍🦯","name":""},{"codes":["1f9d1","200d","1f9b0"],"emoji":"🧑‍🦰","name":""},{"codes":["1f9d1","1f3fb","200d","1f9b0"],"status":"fully-qualified","emoji":"🧑🏻‍🦰","name":""},{"codes":["1f9d1","1f3fc","200d","1f9b0"],"status":"fully-qualified","emoji":"🧑🏼‍🦰","name":""},{"codes":["1f9d1","1f3fd","200d","1f9b0"],"status":"fully-qualified","emoji":"🧑🏽‍🦰","name":""},{"codes":["1f9d1","1f3fe","200d","1f9b0"],"status":"fully-qualified","emoji":"🧑🏾‍🦰","name":""},{"codes":["1f9d1","1f3ff","200d","1f9b0"],"status":"fully-qualified","emoji":"🧑🏿‍🦰","name":""},{"codes":["1f9d1","200d","1f9b1"],"emoji":"🧑‍🦱","name":""},{"codes":["1f9d1","1f3fb","200d","1f9b1"],"status":"fully-qualified","emoji":"🧑🏻‍🦱","name":""},{"codes":["1f9d1","1f3fc","200d","1f9b1"],"status":"fully-qualified","emoji":"🧑🏼‍🦱","name":""},{"codes":["1f9d1","1f3fd","200d","1f9b1"],"status":"fully-qualified","emoji":"🧑🏽‍🦱","name":""},{"codes":["1f9d1","1f3fe","200d","1f9b1"],"status":"fully-qualified","emoji":"🧑🏾‍🦱","name":""},{"codes":["1f9d1","1f3ff","200d","1f9b1"],"status":"fully-qualified","emoji":"🧑🏿‍🦱","name":""},{"codes":["1f9d1","200d","1f9b2"],"emoji":"🧑‍🦲","name":""},{"codes":["1f9d1","1f3fb","200d","1f9b2"],"status":"fully-qualified","emoji":"🧑🏻‍🦲","name":""},{"codes":["1f9d1","1f3fc","200d","1f9b2"],"status":"fully-qualified","emoji":"🧑🏼‍🦲","name":""},{"codes":["1f9d1","1f3fd","200d","1f9b2"],"status":"fully-qualified","emoji":"🧑🏽‍🦲","name":""},{"codes":["1f9d1","1f3fe","200d","1f9b2"],"status":"fully-qualified","emoji":"🧑🏾‍🦲","name":""},{"codes":["1f9d1","1f3ff","200d","1f9b2"],"status":"fully-qualified","emoji":"🧑🏿‍🦲","name":""},{"codes":["1f9d1","200d","1f9b3"],"emoji":"🧑‍🦳","name":""},{"codes":["1f9d1","1f3fb","200d","1f9b3"],"status":"fully-qualified","emoji":"🧑🏻‍🦳","name":""},{"codes":["1f9d1","1f3fc","200d","1f9b3"],"status":"fully-qualified","emoji":"🧑🏼‍🦳","name":""},{"codes":["1f9d1","1f3fd","200d","1f9b3"],"status":"fully-qualified","emoji":"🧑🏽‍🦳","name":""},{"codes":["1f9d1","1f3fe","200d","1f9b3"],"status":"fully-qualified","emoji":"🧑🏾‍🦳","name":""},{"codes":["1f9d1","1f3ff","200d","1f9b3"],"status":"fully-qualified","emoji":"🧑🏿‍🦳","name":""},{"codes":["1f9d1","200d","1f9bc"],"emoji":"🧑‍🦼","name":""},{"codes":["1f9d1","1f3fb","200d","1f9bc"],"status":"fully-qualified","emoji":"🧑🏻‍🦼","name":""},{"codes":["1f9d1","1f3fc","200d","1f9bc"],"status":"fully-qualified","emoji":"🧑🏼‍🦼","name":""},{"codes":["1f9d1","1f3fd","200d","1f9bc"],"status":"fully-qualified","emoji":"🧑🏽‍🦼","name":""},{"codes":["1f9d1","1f3fe","200d","1f9bc"],"status":"fully-qualified","emoji":"🧑🏾‍🦼","name":""},{"codes":["1f9d1","1f3ff","200d","1f9bc"],"status":"fully-qualified","emoji":"🧑🏿‍🦼","name":""},{"codes":["1f9d1","200d","1f9bd"],"emoji":"🧑‍🦽","name":""},{"codes":["1f9d1","1f3fb","200d","1f9bd"],"status":"fully-qualified","emoji":"🧑🏻‍🦽","name":""},{"codes":["1f9d1","1f3fc","200d","1f9bd"],"status":"fully-qualified","emoji":"🧑🏼‍🦽","name":""},{"codes":["1f9d1","1f3fd","200d","1f9bd"],"status":"fully-qualified","emoji":"🧑🏽‍🦽","name":""},{"codes":["1f9d1","1f3fe","200d","1f9bd"],"status":"fully-qualified","emoji":"🧑🏾‍🦽","name":""},{"codes":["1f9d1","1f3ff","200d","1f9bd"],"status":"fully-qualified","emoji":"🧑🏿‍🦽","name":""},{"codes":["1f9d1","200d","2695","fe0f"],"emoji":"🧑‍⚕️","name":""},{"codes":["1f9d1","1f3fb","200d","2695","fe0f"],"status":"fully-qualified","emoji":"🧑🏻‍⚕️","name":""},{"codes":["1f9d1","1f3fc","200d","2695","fe0f"],"status":"fully-qualified","emoji":"🧑🏼‍⚕️","name":""},{"codes":["1f9d1","1f3fd","200d","2695","fe0f"],"status":"fully-qualified","emoji":"🧑🏽‍⚕️","name":""},{"codes":["1f9d1","1f3fe","200d","2695","fe0f"],"status":"fully-qualified","emoji":"🧑🏾‍⚕️","name":""},{"codes":["1f9d1","1f3ff","200d","2695","fe0f"],"status":"fully-qualified","emoji":"🧑🏿‍⚕️","name":""},{"codes":["1f9d1","200d","2696","fe0f"],"emoji":"🧑‍⚖️","name":""},{"codes":["1f9d1","1f3fb","200d","2696","fe0f"],"status":"fully-qualified","emoji":"🧑🏻‍⚖️","name":""},{"codes":["1f9d1","1f3fc","200d","2696","fe0f"],"status":"fully-qualified","emoji":"🧑🏼‍⚖️","name":""},{"codes":["1f9d1","1f3fd","200d","2696","fe0f"],"status":"fully-qualified","emoji":"🧑🏽‍⚖️","name":""},{"codes":["1f9d1","1f3fe","200d","2696","fe0f"],"status":"fully-qualified","emoji":"🧑🏾‍⚖️","name":""},{"codes":["1f9d1","1f3ff","200d","2696","fe0f"],"status":"fully-qualified","emoji":"🧑🏿‍⚖️","name":""},{"codes":["1f9d1","200d","2708","fe0f"],"emoji":"🧑‍✈️","name":""},{"codes":["1f9d1","1f3fb","200d","2708","fe0f"],"status":"fully-qualified","emoji":"🧑🏻‍✈️","name":""},{"codes":["1f9d1","1f3fc","200d","2708","fe0f"],"status":"fully-qualified","emoji":"🧑🏼‍✈️","name":""},{"codes":["1f9d1","1f3fd","200d","2708","fe0f"],"status":"fully-qualified","emoji":"🧑🏽‍✈️","name":""},{"codes":["1f9d1","1f3fe","200d","2708","fe0f"],"status":"fully-qualified","emoji":"🧑🏾‍✈️","name":""},{"codes":["1f9d1","1f3ff","200d","2708","fe0f"],"status":"fully-qualified","emoji":"🧑🏿‍✈️","name":""},{"codes":["1f9d1"],"emoji":"🧑","name":"adult"},{"codes":["1f9d1","1f3fb"],"status":"fully-qualified","emoji":"🧑🏻","name":""},{"codes":["1f9d1","1f3fc"],"status":"fully-qualified","emoji":"🧑🏼","name":""},{"codes":["1f9d1","1f3fd"],"status":"fully-qualified","emoji":"🧑🏽","name":""},{"codes":["1f9d1","1f3fe"],"status":"fully-qualified","emoji":"🧑🏾","name":""},{"codes":["1f9d1","1f3ff"],"status":"fully-qualified","emoji":"🧑🏿","name":""},{"codes":["1f9d2"],"emoji":"🧒","name":"child"},{"codes":["1f9d2","1f3fb"],"status":"fully-qualified","emoji":"🧒🏻","name":""},{"codes":["1f9d2","1f3fc"],"status":"fully-qualified","emoji":"🧒🏼","name":""},{"codes":["1f9d2","1f3fd"],"status":"fully-qualified","emoji":"🧒🏽","name":""},{"codes":["1f9d2","1f3fe"],"status":"fully-qualified","emoji":"🧒🏾","name":""},{"codes":["1f9d2","1f3ff"],"status":"fully-qualified","emoji":"🧒🏿","name":""},{"codes":["1f9d3"],"emoji":"🧓","name":"older adult"},{"codes":["1f9d3","1f3fb"],"status":"fully-qualified","emoji":"🧓🏻","name":""},{"codes":["1f9d3","1f3fc"],"status":"fully-qualified","emoji":"🧓🏼","name":""},{"codes":["1f9d3","1f3fd"],"status":"fully-qualified","emoji":"🧓🏽","name":""},{"codes":["1f9d3","1f3fe"],"status":"fully-qualified","emoji":"🧓🏾","name":""},{"codes":["1f9d3","1f3ff"],"status":"fully-qualified","emoji":"🧓🏿","name":""},{"codes":["1f9d4"],"emoji":"🧔","name":"bearded person"},{"codes":["1f9d4","1f3fb"],"status":"fully-qualified","emoji":"🧔🏻","name":""},{"codes":["1f9d4","1f3fc"],"status":"fully-qualified","emoji":"🧔🏼","name":""},{"codes":["1f9d4","1f3fd"],"status":"fully-qualified","emoji":"🧔🏽","name":""},{"codes":["1f9d4","1f3fe"],"status":"fully-qualified","emoji":"🧔🏾","name":""},{"codes":["1f9d4","1f3ff"],"status":"fully-qualified","emoji":"🧔🏿","name":""},{"codes":["1f9d5"],"emoji":"🧕","name":"person with headscarf"},{"codes":["1f9d5","1f3fb"],"status":"fully-qualified","emoji":"🧕🏻","name":""},{"codes":["1f9d5","1f3fc"],"status":"fully-qualified","emoji":"🧕🏼","name":""},{"codes":["1f9d5","1f3fd"],"status":"fully-qualified","emoji":"🧕🏽","name":""},{"codes":["1f9d5","1f3fe"],"status":"fully-qualified","emoji":"🧕🏾","name":""},{"codes":["1f9d5","1f3ff"],"status":"fully-qualified","emoji":"🧕🏿","name":""},{"codes":["1f9d6","200d","2640","fe0f"],"emoji":"🧖‍♀️","name":""},{"codes":["1f9d6","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧖🏻‍♀️","name":""},{"codes":["1f9d6","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧖🏼‍♀️","name":""},{"codes":["1f9d6","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧖🏽‍♀️","name":""},{"codes":["1f9d6","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧖🏾‍♀️","name":""},{"codes":["1f9d6","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧖🏿‍♀️","name":""},{"codes":["1f9d6","200d","2642","fe0f"],"emoji":"🧖‍♂️","name":""},{"codes":["1f9d6","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧖🏻‍♂️","name":""},{"codes":["1f9d6","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧖🏼‍♂️","name":""},{"codes":["1f9d6","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧖🏽‍♂️","name":""},{"codes":["1f9d6","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧖🏾‍♂️","name":""},{"codes":["1f9d6","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧖🏿‍♂️","name":""},{"codes":["1f9d6"],"emoji":"🧖","name":"person in steamy room"},{"codes":["1f9d6","1f3fb"],"status":"fully-qualified","emoji":"🧖🏻","name":""},{"codes":["1f9d6","1f3fc"],"status":"fully-qualified","emoji":"🧖🏼","name":""},{"codes":["1f9d6","1f3fd"],"status":"fully-qualified","emoji":"🧖🏽","name":""},{"codes":["1f9d6","1f3fe"],"status":"fully-qualified","emoji":"🧖🏾","name":""},{"codes":["1f9d6","1f3ff"],"status":"fully-qualified","emoji":"🧖🏿","name":""},{"codes":["1f9d7","200d","2640","fe0f"],"emoji":"🧗‍♀️","name":""},{"codes":["1f9d7","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧗🏻‍♀️","name":""},{"codes":["1f9d7","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧗🏼‍♀️","name":""},{"codes":["1f9d7","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧗🏽‍♀️","name":""},{"codes":["1f9d7","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧗🏾‍♀️","name":""},{"codes":["1f9d7","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧗🏿‍♀️","name":""},{"codes":["1f9d7","200d","2642","fe0f"],"emoji":"🧗‍♂️","name":""},{"codes":["1f9d7","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧗🏻‍♂️","name":""},{"codes":["1f9d7","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧗🏼‍♂️","name":""},{"codes":["1f9d7","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧗🏽‍♂️","name":""},{"codes":["1f9d7","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧗🏾‍♂️","name":""},{"codes":["1f9d7","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧗🏿‍♂️","name":""},{"codes":["1f9d7"],"emoji":"🧗","name":"person climbing"},{"codes":["1f9d7","1f3fb"],"status":"fully-qualified","emoji":"🧗🏻","name":""},{"codes":["1f9d7","1f3fc"],"status":"fully-qualified","emoji":"🧗🏼","name":""},{"codes":["1f9d7","1f3fd"],"status":"fully-qualified","emoji":"🧗🏽","name":""},{"codes":["1f9d7","1f3fe"],"status":"fully-qualified","emoji":"🧗🏾","name":""},{"codes":["1f9d7","1f3ff"],"status":"fully-qualified","emoji":"🧗🏿","name":""},{"codes":["1f9d8","200d","2640","fe0f"],"emoji":"🧘‍♀️","name":""},{"codes":["1f9d8","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧘🏻‍♀️","name":""},{"codes":["1f9d8","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧘🏼‍♀️","name":""},{"codes":["1f9d8","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧘🏽‍♀️","name":""},{"codes":["1f9d8","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧘🏾‍♀️","name":""},{"codes":["1f9d8","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧘🏿‍♀️","name":""},{"codes":["1f9d8","200d","2642","fe0f"],"emoji":"🧘‍♂️","name":""},{"codes":["1f9d8","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧘🏻‍♂️","name":""},{"codes":["1f9d8","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧘🏼‍♂️","name":""},{"codes":["1f9d8","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧘🏽‍♂️","name":""},{"codes":["1f9d8","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧘🏾‍♂️","name":""},{"codes":["1f9d8","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧘🏿‍♂️","name":""},{"codes":["1f9d8"],"emoji":"🧘","name":"person in lotus position"},{"codes":["1f9d8","1f3fb"],"status":"fully-qualified","emoji":"🧘🏻","name":""},{"codes":["1f9d8","1f3fc"],"status":"fully-qualified","emoji":"🧘🏼","name":""},{"codes":["1f9d8","1f3fd"],"status":"fully-qualified","emoji":"🧘🏽","name":""},{"codes":["1f9d8","1f3fe"],"status":"fully-qualified","emoji":"🧘🏾","name":""},{"codes":["1f9d8","1f3ff"],"status":"fully-qualified","emoji":"🧘🏿","name":""},{"codes":["1f9d9","200d","2640","fe0f"],"emoji":"🧙‍♀️","name":""},{"codes":["1f9d9","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧙🏻‍♀️","name":""},{"codes":["1f9d9","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧙🏼‍♀️","name":""},{"codes":["1f9d9","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧙🏽‍♀️","name":""},{"codes":["1f9d9","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧙🏾‍♀️","name":""},{"codes":["1f9d9","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧙🏿‍♀️","name":""},{"codes":["1f9d9","200d","2642","fe0f"],"emoji":"🧙‍♂️","name":""},{"codes":["1f9d9","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧙🏻‍♂️","name":""},{"codes":["1f9d9","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧙🏼‍♂️","name":""},{"codes":["1f9d9","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧙🏽‍♂️","name":""},{"codes":["1f9d9","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧙🏾‍♂️","name":""},{"codes":["1f9d9","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧙🏿‍♂️","name":""},{"codes":["1f9d9"],"emoji":"🧙","name":"mage"},{"codes":["1f9d9","1f3fb"],"status":"fully-qualified","emoji":"🧙🏻","name":""},{"codes":["1f9d9","1f3fc"],"status":"fully-qualified","emoji":"🧙🏼","name":""},{"codes":["1f9d9","1f3fd"],"status":"fully-qualified","emoji":"🧙🏽","name":""},{"codes":["1f9d9","1f3fe"],"status":"fully-qualified","emoji":"🧙🏾","name":""},{"codes":["1f9d9","1f3ff"],"status":"fully-qualified","emoji":"🧙🏿","name":""},{"codes":["1f9da","200d","2640","fe0f"],"emoji":"🧚‍♀️","name":""},{"codes":["1f9da","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧚🏻‍♀️","name":""},{"codes":["1f9da","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧚🏼‍♀️","name":""},{"codes":["1f9da","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧚🏽‍♀️","name":""},{"codes":["1f9da","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧚🏾‍♀️","name":""},{"codes":["1f9da","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧚🏿‍♀️","name":""},{"codes":["1f9da","200d","2642","fe0f"],"emoji":"🧚‍♂️","name":""},{"codes":["1f9da","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧚🏻‍♂️","name":""},{"codes":["1f9da","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧚🏼‍♂️","name":""},{"codes":["1f9da","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧚🏽‍♂️","name":""},{"codes":["1f9da","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧚🏾‍♂️","name":""},{"codes":["1f9da","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧚🏿‍♂️","name":""},{"codes":["1f9da"],"emoji":"🧚","name":"fairy"},{"codes":["1f9da","1f3fb"],"status":"fully-qualified","emoji":"🧚🏻","name":""},{"codes":["1f9da","1f3fc"],"status":"fully-qualified","emoji":"🧚🏼","name":""},{"codes":["1f9da","1f3fd"],"status":"fully-qualified","emoji":"🧚🏽","name":""},{"codes":["1f9da","1f3fe"],"status":"fully-qualified","emoji":"🧚🏾","name":""},{"codes":["1f9da","1f3ff"],"status":"fully-qualified","emoji":"🧚🏿","name":""},{"codes":["1f9db","200d","2640","fe0f"],"emoji":"🧛‍♀️","name":""},{"codes":["1f9db","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧛🏻‍♀️","name":""},{"codes":["1f9db","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧛🏼‍♀️","name":""},{"codes":["1f9db","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧛🏽‍♀️","name":""},{"codes":["1f9db","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧛🏾‍♀️","name":""},{"codes":["1f9db","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧛🏿‍♀️","name":""},{"codes":["1f9db","200d","2642","fe0f"],"emoji":"🧛‍♂️","name":""},{"codes":["1f9db","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧛🏻‍♂️","name":""},{"codes":["1f9db","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧛🏼‍♂️","name":""},{"codes":["1f9db","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧛🏽‍♂️","name":""},{"codes":["1f9db","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧛🏾‍♂️","name":""},{"codes":["1f9db","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧛🏿‍♂️","name":""},{"codes":["1f9db"],"emoji":"🧛","name":"vampire"},{"codes":["1f9db","1f3fb"],"status":"fully-qualified","emoji":"🧛🏻","name":""},{"codes":["1f9db","1f3fc"],"status":"fully-qualified","emoji":"🧛🏼","name":""},{"codes":["1f9db","1f3fd"],"status":"fully-qualified","emoji":"🧛🏽","name":""},{"codes":["1f9db","1f3fe"],"status":"fully-qualified","emoji":"🧛🏾","name":""},{"codes":["1f9db","1f3ff"],"status":"fully-qualified","emoji":"🧛🏿","name":""},{"codes":["1f9dc","200d","2640","fe0f"],"emoji":"🧜‍♀️","name":""},{"codes":["1f9dc","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧜🏻‍♀️","name":""},{"codes":["1f9dc","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧜🏼‍♀️","name":""},{"codes":["1f9dc","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧜🏽‍♀️","name":""},{"codes":["1f9dc","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧜🏾‍♀️","name":""},{"codes":["1f9dc","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧜🏿‍♀️","name":""},{"codes":["1f9dc","200d","2642","fe0f"],"emoji":"🧜‍♂️","name":""},{"codes":["1f9dc","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧜🏻‍♂️","name":""},{"codes":["1f9dc","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧜🏼‍♂️","name":""},{"codes":["1f9dc","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧜🏽‍♂️","name":""},{"codes":["1f9dc","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧜🏾‍♂️","name":""},{"codes":["1f9dc","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧜🏿‍♂️","name":""},{"codes":["1f9dc"],"emoji":"🧜","name":"merperson"},{"codes":["1f9dc","1f3fb"],"status":"fully-qualified","emoji":"🧜🏻","name":""},{"codes":["1f9dc","1f3fc"],"status":"fully-qualified","emoji":"🧜🏼","name":""},{"codes":["1f9dc","1f3fd"],"status":"fully-qualified","emoji":"🧜🏽","name":""},{"codes":["1f9dc","1f3fe"],"status":"fully-qualified","emoji":"🧜🏾","name":""},{"codes":["1f9dc","1f3ff"],"status":"fully-qualified","emoji":"🧜🏿","name":""},{"codes":["1f9dd","200d","2640","fe0f"],"emoji":"🧝‍♀️","name":""},{"codes":["1f9dd","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧝🏻‍♀️","name":""},{"codes":["1f9dd","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧝🏼‍♀️","name":""},{"codes":["1f9dd","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧝🏽‍♀️","name":""},{"codes":["1f9dd","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧝🏾‍♀️","name":""},{"codes":["1f9dd","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"🧝🏿‍♀️","name":""},{"codes":["1f9dd","200d","2642","fe0f"],"emoji":"🧝‍♂️","name":""},{"codes":["1f9dd","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧝🏻‍♂️","name":""},{"codes":["1f9dd","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧝🏼‍♂️","name":""},{"codes":["1f9dd","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧝🏽‍♂️","name":""},{"codes":["1f9dd","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧝🏾‍♂️","name":""},{"codes":["1f9dd","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"🧝🏿‍♂️","name":""},{"codes":["1f9dd"],"emoji":"🧝","name":"elf"},{"codes":["1f9dd","1f3fb"],"status":"fully-qualified","emoji":"🧝🏻","name":""},{"codes":["1f9dd","1f3fc"],"status":"fully-qualified","emoji":"🧝🏼","name":""},{"codes":["1f9dd","1f3fd"],"status":"fully-qualified","emoji":"🧝🏽","name":""},{"codes":["1f9dd","1f3fe"],"status":"fully-qualified","emoji":"🧝🏾","name":""},{"codes":["1f9dd","1f3ff"],"status":"fully-qualified","emoji":"🧝🏿","name":""},{"codes":["1f9de","200d","2640","fe0f"],"emoji":"🧞‍♀️","name":""},{"codes":["1f9de","200d","2642","fe0f"],"emoji":"🧞‍♂️","name":""},{"codes":["1f9de"],"emoji":"🧞","name":"genie"},{"codes":["1f9df","200d","2640","fe0f"],"emoji":"🧟‍♀️","name":""},{"codes":["1f9df","200d","2642","fe0f"],"emoji":"🧟‍♂️","name":""},{"codes":["1f9df"],"emoji":"🧟","name":"zombie"},{"codes":["1f9e0"],"emoji":"🧠","name":"brain"},{"codes":["1fac0"],"emoji":"🫀","name":"anatomical heart"},{"codes":["1fac1"],"emoji":"🫁","name":"lungs"},{"codes":["1fac2"],"emoji":"🫂","name":"people hugging"},{"codes":["261d","fe0f"],"emoji":"☝️","name":"white up pointing index"},{"codes":["261d","1f3fb"],"status":"fully-qualified","emoji":"☝🏻","name":""},{"codes":["261d","1f3fc"],"status":"fully-qualified","emoji":"☝🏼","name":""},{"codes":["261d","1f3fd"],"status":"fully-qualified","emoji":"☝🏽","name":""},{"codes":["261d","1f3fe"],"status":"fully-qualified","emoji":"☝🏾","name":""},{"codes":["261d","1f3ff"],"status":"fully-qualified","emoji":"☝🏿","name":""},{"codes":["26f7","fe0f"],"emoji":"⛷️","name":""},{"codes":["26f9","fe0f","200d","2640","fe0f"],"emoji":"⛹️‍♀️","name":""},{"codes":["26f9","1f3fb","200d","2640","fe0f"],"status":"fully-qualified","emoji":"⛹🏻‍♀️","name":""},{"codes":["26f9","1f3fc","200d","2640","fe0f"],"status":"fully-qualified","emoji":"⛹🏼‍♀️","name":""},{"codes":["26f9","1f3fd","200d","2640","fe0f"],"status":"fully-qualified","emoji":"⛹🏽‍♀️","name":""},{"codes":["26f9","1f3fe","200d","2640","fe0f"],"status":"fully-qualified","emoji":"⛹🏾‍♀️","name":""},{"codes":["26f9","1f3ff","200d","2640","fe0f"],"status":"fully-qualified","emoji":"⛹🏿‍♀️","name":""},{"codes":["26f9","fe0f","200d","2642","fe0f"],"emoji":"⛹️‍♂️","name":""},{"codes":["26f9","1f3fb","200d","2642","fe0f"],"status":"fully-qualified","emoji":"⛹🏻‍♂️","name":""},{"codes":["26f9","1f3fc","200d","2642","fe0f"],"status":"fully-qualified","emoji":"⛹🏼‍♂️","name":""},{"codes":["26f9","1f3fd","200d","2642","fe0f"],"status":"fully-qualified","emoji":"⛹🏽‍♂️","name":""},{"codes":["26f9","1f3fe","200d","2642","fe0f"],"status":"fully-qualified","emoji":"⛹🏾‍♂️","name":""},{"codes":["26f9","1f3ff","200d","2642","fe0f"],"status":"fully-qualified","emoji":"⛹🏿‍♂️","name":""},{"codes":["26f9","fe0f"],"emoji":"⛹️","name":""},{"codes":["26f9","1f3fb"],"status":"fully-qualified","emoji":"⛹🏻","name":""},{"codes":["26f9","1f3fc"],"status":"fully-qualified","emoji":"⛹🏼","name":""},{"codes":["26f9","1f3fd"],"status":"fully-qualified","emoji":"⛹🏽","name":""},{"codes":["26f9","1f3fe"],"status":"fully-qualified","emoji":"⛹🏾","name":""},{"codes":["26f9","1f3ff"],"status":"fully-qualified","emoji":"⛹🏿","name":""},{"codes":["270a"],"emoji":"✊","name":"raised fist"},{"codes":["270a","1f3fb"],"status":"fully-qualified","emoji":"✊🏻","name":""},{"codes":["270a","1f3fc"],"status":"fully-qualified","emoji":"✊🏼","name":""},{"codes":["270a","1f3fd"],"status":"fully-qualified","emoji":"✊🏽","name":""},{"codes":["270a","1f3fe"],"status":"fully-qualified","emoji":"✊🏾","name":""},{"codes":["270a","1f3ff"],"status":"fully-qualified","emoji":"✊🏿","name":""},{"codes":["270b"],"emoji":"✋","name":"raised hand"},{"codes":["270b","1f3fb"],"status":"fully-qualified","emoji":"✋🏻","name":""},{"codes":["270b","1f3fc"],"status":"fully-qualified","emoji":"✋🏼","name":""},{"codes":["270b","1f3fd"],"status":"fully-qualified","emoji":"✋🏽","name":""},{"codes":["270b","1f3fe"],"status":"fully-qualified","emoji":"✋🏾","name":""},{"codes":["270b","1f3ff"],"status":"fully-qualified","emoji":"✋🏿","name":""},{"codes":["270c","fe0f"],"emoji":"✌️","name":"victory hand"},{"codes":["270c","1f3fb"],"status":"fully-qualified","emoji":"✌🏻","name":""},{"codes":["270c","1f3fc"],"status":"fully-qualified","emoji":"✌🏼","name":""},{"codes":["270c","1f3fd"],"status":"fully-qualified","emoji":"✌🏽","name":""},{"codes":["270c","1f3fe"],"status":"fully-qualified","emoji":"✌🏾","name":""},{"codes":["270c","1f3ff"],"status":"fully-qualified","emoji":"✌🏿","name":""},{"codes":["270d","fe0f"],"emoji":"✍️","name":""},{"codes":["270d","1f3fb"],"status":"fully-qualified","emoji":"✍🏻","name":""},{"codes":["270d","1f3fc"],"status":"fully-qualified","emoji":"✍🏼","name":""},{"codes":["270d","1f3fd"],"status":"fully-qualified","emoji":"✍🏽","name":""},{"codes":["270d","1f3fe"],"status":"fully-qualified","emoji":"✍🏾","name":""},{"codes":["270d","1f3ff"],"status":"fully-qualified","emoji":"✍🏿","name":""}]}]},{"name":"Objects","subGroups":[{"name":"sub-cat","emojis":[{"codes":["1f392"],"emoji":"🎒","name":"school satchel"},{"codes":["1f393"],"emoji":"🎓","name":"graduation cap"},{"codes":["1f399","fe0f"],"emoji":"🎙️","name":""},{"codes":["1f39a","fe0f"],"emoji":"🎚️","name":""},{"codes":["1f39b","fe0f"],"emoji":"🎛️","name":""},{"codes":["1f39e","fe0f"],"emoji":"🎞️","name":""},{"codes":["1f3a4"],"emoji":"🎤","name":"microphone"},{"codes":["1f3a5"],"emoji":"🎥","name":"movie camera"},{"codes":["1f3a7"],"emoji":"🎧","name":"headphone"},{"codes":["1f3a9"],"emoji":"🎩","name":"top hat"},{"codes":["1f3ac"],"emoji":"🎬","name":"clapper board"},{"codes":["1f3b5"],"emoji":"🎵","name":"musical note"},{"codes":["1f3b6"],"emoji":"🎶","name":"multiple musical notes"},{"codes":["1f3b7"],"emoji":"🎷","name":"saxophone"},{"codes":["1f3b8"],"emoji":"🎸","name":"guitar"},{"codes":["1f3b9"],"emoji":"🎹","name":"musical keyboard"},{"codes":["1f3ba"],"emoji":"🎺","name":"trumpet"},{"codes":["1f3bb"],"emoji":"🎻","name":"violin"},{"codes":["1f3bc"],"emoji":"🎼","name":"musical score"},{"codes":["1f3ee"],"emoji":"🏮","name":"izakaya lantern"},{"codes":["1f3f7","fe0f"],"emoji":"🏷️","name":""},{"codes":["1f3f9"],"emoji":"🏹","name":"bow and arrow"},{"codes":["1f451"],"emoji":"👑","name":"crown"},{"codes":["1f452"],"emoji":"👒","name":"womans hat"},{"codes":["1f453"],"emoji":"👓","name":"eyeglasses"},{"codes":["1f454"],"emoji":"👔","name":"necktie"},{"codes":["1f455"],"emoji":"👕","name":"t-shirt"},{"codes":["1f456"],"emoji":"👖","name":"jeans"},{"codes":["1f457"],"emoji":"👗","name":"dress"},{"codes":["1f458"],"emoji":"👘","name":"kimono"},{"codes":["1f459"],"emoji":"👙","name":"bikini"},{"codes":["1f45a"],"emoji":"👚","name":"womans clothes"},{"codes":["1f45b"],"emoji":"👛","name":"purse"},{"codes":["1f45c"],"emoji":"👜","name":"handbag"},{"codes":["1f45d"],"emoji":"👝","name":"pouch"},{"codes":["1f45e"],"emoji":"👞","name":"mans shoe"},{"codes":["1f45f"],"emoji":"👟","name":"athletic shoe"},{"codes":["1f460"],"emoji":"👠","name":"high-heeled shoe"},{"codes":["1f461"],"emoji":"👡","name":"womans sandal"},{"codes":["1f462"],"emoji":"👢","name":"womans boots"},{"codes":["1f484"],"emoji":"💄","name":"lipstick"},{"codes":["1f489"],"emoji":"💉","name":"syringe"},{"codes":["1f48a"],"emoji":"💊","name":"pill"},{"codes":["1f48d"],"emoji":"💍","name":"ring"},{"codes":["1f48e"],"emoji":"💎","name":"gem stone"},{"codes":["1f4a1"],"emoji":"💡","name":"electric light bulb"},{"codes":["1f4b0"],"emoji":"💰","name":"money bag"},{"codes":["1f4b3"],"emoji":"💳","name":"credit card"},{"codes":["1f4b4"],"emoji":"💴","name":"banknote with yen sign"},{"codes":["1f4b5"],"emoji":"💵","name":"banknote with dollar sign"},{"codes":["1f4b6"],"emoji":"💶","name":"banknote with euro sign"},{"codes":["1f4b7"],"emoji":"💷","name":"banknote with pound sign"},{"codes":["1f4b8"],"emoji":"💸","name":"money with wings"},{"codes":["1f4b9"],"emoji":"💹","name":"chart with upwards trend and yen sign"},{"codes":["1f4bb"],"emoji":"💻","name":"personal computer"},{"codes":["1f4bc"],"emoji":"💼","name":"briefcase"},{"codes":["1f4bd"],"emoji":"💽","name":"minidisc"},{"codes":["1f4be"],"emoji":"💾","name":"floppy disk"},{"codes":["1f4bf"],"emoji":"💿","name":"optical disc"},{"codes":["1f4c0"],"emoji":"📀","name":"dvd"},{"codes":["1f4c1"],"emoji":"📁","name":"file folder"},{"codes":["1f4c2"],"emoji":"📂","name":"open file folder"},{"codes":["1f4c3"],"emoji":"📃","name":"page with curl"},{"codes":["1f4c4"],"emoji":"📄","name":"page facing up"},{"codes":["1f4c5"],"emoji":"📅","name":"calendar"},{"codes":["1f4c6"],"emoji":"📆","name":"tear-off calendar"},{"codes":["1f4c7"],"emoji":"📇","name":"card index"},{"codes":["1f4c8"],"emoji":"📈","name":"chart with upwards trend"},{"codes":["1f4c9"],"emoji":"📉","name":"chart with downwards trend"},{"codes":["1f4ca"],"emoji":"📊","name":"bar chart"},{"codes":["1f4cb"],"emoji":"📋","name":"clipboard"},{"codes":["1f4cc"],"emoji":"📌","name":"pushpin"},{"codes":["1f4cd"],"emoji":"📍","name":"round pushpin"},{"codes":["1f4ce"],"emoji":"📎","name":"paperclip"},{"codes":["1f4cf"],"emoji":"📏","name":"straight ruler"},{"codes":["1f4d0"],"emoji":"📐","name":"triangular ruler"},{"codes":["1f4d1"],"emoji":"📑","name":"bookmark tabs"},{"codes":["1f4d2"],"emoji":"📒","name":"ledger"},{"codes":["1f4d3"],"emoji":"📓","name":"notebook"},{"codes":["1f4d4"],"emoji":"📔","name":"notebook with decorative cover"},{"codes":["1f4d5"],"emoji":"📕","name":"closed book"},{"codes":["1f4d6"],"emoji":"📖","name":"open book"},{"codes":["1f4d7"],"emoji":"📗","name":"green book"},{"codes":["1f4d8"],"emoji":"📘","name":"blue book"},{"codes":["1f4d9"],"emoji":"📙","name":"orange book"},{"codes":["1f4da"],"emoji":"📚","name":"books"},{"codes":["1f4dc"],"emoji":"📜","name":"scroll"},{"codes":["1f4dd"],"emoji":"📝","name":"memo"},{"codes":["1f4de"],"emoji":"📞","name":"telephone receiver"},{"codes":["1f4df"],"emoji":"📟","name":"pager"},{"codes":["1f4e0"],"emoji":"📠","name":"fax machine"},{"codes":["1f4e1"],"emoji":"📡","name":"satellite antenna"},{"codes":["1f4e2"],"emoji":"📢","name":"public address loudspeaker"},{"codes":["1f4e3"],"emoji":"📣","name":"cheering megaphone"},{"codes":["1f4e4"],"emoji":"📤","name":"outbox tray"},{"codes":["1f4e5"],"emoji":"📥","name":"inbox tray"},{"codes":["1f4e6"],"emoji":"📦","name":"package"},{"codes":["1f4e7"],"emoji":"📧","name":"e-mail symbol"},{"codes":["1f4e8"],"emoji":"📨","name":"incoming envelope"},{"codes":["1f4e9"],"emoji":"📩","name":"envelope with downwards arrow above"},{"codes":["1f4ea"],"emoji":"📪","name":"closed mailbox with lowered flag"},{"codes":["1f4eb"],"emoji":"📫","name":"closed mailbox with raised flag"},{"codes":["1f4ec"],"emoji":"📬","name":"open mailbox with raised flag"},{"codes":["1f4ed"],"emoji":"📭","name":"open mailbox with lowered flag"},{"codes":["1f4ee"],"emoji":"📮","name":"postbox"},{"codes":["1f4ef"],"emoji":"📯","name":"postal horn"},{"codes":["1f4f0"],"emoji":"📰","name":"newspaper"},{"codes":["1f4f1"],"emoji":"📱","name":"mobile phone"},{"codes":["1f4f2"],"emoji":"📲","name":"mobile phone with rightwards arrow at left"},{"codes":["1f4f7"],"emoji":"📷","name":"camera"},{"codes":["1f4f8"],"emoji":"📸","name":"camera with flash"},{"codes":["1f4f9"],"emoji":"📹","name":"video camera"},{"codes":["1f4fa"],"emoji":"📺","name":"television"},{"codes":["1f4fb"],"emoji":"📻","name":"radio"},{"codes":["1f4fc"],"emoji":"📼","name":"videocassette"},{"codes":["1f4fd","fe0f"],"emoji":"📽️","name":""},{"codes":["1f4ff"],"emoji":"📿","name":"prayer beads"},{"codes":["1f507"],"emoji":"🔇","name":"speaker with cancellation stroke"},{"codes":["1f508"],"emoji":"🔈","name":"speaker"},{"codes":["1f509"],"emoji":"🔉","name":"speaker with one sound wave"},{"codes":["1f50a"],"emoji":"🔊","name":"speaker with three sound waves"},{"codes":["1f50b"],"emoji":"🔋","name":"battery"},{"codes":["1f50c"],"emoji":"🔌","name":"electric plug"},{"codes":["1f50d"],"emoji":"🔍","name":"left-pointing magnifying glass"},{"codes":["1f50e"],"emoji":"🔎","name":"right-pointing magnifying glass"},{"codes":["1f50f"],"emoji":"🔏","name":"lock with ink pen"},{"codes":["1f510"],"emoji":"🔐","name":"closed lock with key"},{"codes":["1f511"],"emoji":"🔑","name":"key"},{"codes":["1f512"],"emoji":"🔒","name":"lock"},{"codes":["1f513"],"emoji":"🔓","name":"open lock"},{"codes":["1f514"],"emoji":"🔔","name":"bell"},{"codes":["1f515"],"emoji":"🔕","name":"bell with cancellation stroke"},{"codes":["1f516"],"emoji":"🔖","name":"bookmark"},{"codes":["1f517"],"emoji":"🔗","name":"link symbol"},{"codes":["1f526"],"emoji":"🔦","name":"electric torch"},{"codes":["1f527"],"emoji":"🔧","name":"wrench"},{"codes":["1f528"],"emoji":"🔨","name":"hammer"},{"codes":["1f529"],"emoji":"🔩","name":"nut and bolt"},{"codes":["1f52b"],"emoji":"🔫","name":"pistol"},{"codes":["1f52c"],"emoji":"🔬","name":"microscope"},{"codes":["1f52d"],"emoji":"🔭","name":"telescope"},{"codes":["1f56f","fe0f"],"emoji":"🕯️","name":""},{"codes":["1f576","fe0f"],"emoji":"🕶️","name":""},{"codes":["1f587","fe0f"],"emoji":"🖇️","name":""},{"codes":["1f58a","fe0f"],"emoji":"🖊️","name":""},{"codes":["1f58b","fe0f"],"emoji":"🖋️","name":""},{"codes":["1f58c","fe0f"],"emoji":"🖌️","name":""},{"codes":["1f58d","fe0f"],"emoji":"🖍️","name":""},{"codes":["1f5a5","fe0f"],"emoji":"🖥️","name":""},{"codes":["1f5a8","fe0f"],"emoji":"🖨️","name":""},{"codes":["1f5b1","fe0f"],"emoji":"🖱️","name":""},{"codes":["1f5b2","fe0f"],"emoji":"🖲️","name":""},{"codes":["1f5c2","fe0f"],"emoji":"🗂️","name":""},{"codes":["1f5c3","fe0f"],"emoji":"🗃️","name":""},{"codes":["1f5c4","fe0f"],"emoji":"🗄️","name":""},{"codes":["1f5d1","fe0f"],"emoji":"🗑️","name":""},{"codes":["1f5d2","fe0f"],"emoji":"🗒️","name":""},{"codes":["1f5d3","fe0f"],"emoji":"🗓️","name":""},{"codes":["1f5dc","fe0f"],"emoji":"🗜️","name":""},{"codes":["1f5dd","fe0f"],"emoji":"🗝️","name":""},{"codes":["1f5de","fe0f"],"emoji":"🗞️","name":""},{"codes":["1f5e1","fe0f"],"emoji":"🗡️","name":""},{"codes":["1f5f3","fe0f"],"emoji":"🗳️","name":""},{"codes":["1f5ff"],"emoji":"🗿","name":"moyai"},{"codes":["1f6aa"],"emoji":"🚪","name":"door"},{"codes":["1f6ac"],"emoji":"🚬","name":"smoking symbol"},{"codes":["1f6bd"],"emoji":"🚽","name":"toilet"},{"codes":["1f6bf"],"emoji":"🚿","name":"shower"},{"codes":["1f6c1"],"emoji":"🛁","name":"bathtub"},{"codes":["1f6cb","fe0f"],"emoji":"🛋️","name":""},{"codes":["1f6cd","fe0f"],"emoji":"🛍️","name":""},{"codes":["1f6cf","fe0f"],"emoji":"🛏️","name":""},{"codes":["1f6d2"],"emoji":"🛒","name":"shopping trolley"},{"codes":["1f6d7"],"emoji":"🛗","name":"elevator"},{"codes":["1f6e0","fe0f"],"emoji":"🛠️","name":""},{"codes":["1f6e1","fe0f"],"emoji":"🛡️","name":""},{"codes":["1f941"],"emoji":"🥁","name":"drum with drumsticks"},{"codes":["1f97b"],"emoji":"🥻","name":"sari"},{"codes":["1f97c"],"emoji":"🥼","name":"lab coat"},{"codes":["1f97d"],"emoji":"🥽","name":"goggles"},{"codes":["1f97e"],"emoji":"🥾","name":"hiking boot"},{"codes":["1f97f"],"emoji":"🥿","name":"flat shoe"},{"codes":["1f9af"],"emoji":"🦯","name":"probing cane"},{"codes":["1f9ba"],"emoji":"🦺","name":"safety vest"},{"codes":["1f9e2"],"emoji":"🧢","name":"billed cap"},{"codes":["1f9e3"],"emoji":"🧣","name":"scarf"},{"codes":["1f9e4"],"emoji":"🧤","name":"gloves"},{"codes":["1f9e5"],"emoji":"🧥","name":"coat"},{"codes":["1f9e6"],"emoji":"🧦","name":"socks"},{"codes":["1f9ea"],"emoji":"🧪","name":"test tube"},{"codes":["1f9eb"],"emoji":"🧫","name":"petri dish"},{"codes":["1f9ec"],"emoji":"🧬","name":"dna double helix"},{"codes":["1f9ee"],"emoji":"🧮","name":"abacus"},{"codes":["1f9ef"],"emoji":"🧯","name":"fire extinguisher"},{"codes":["1f9f0"],"emoji":"🧰","name":"toolbox"},{"codes":["1f9f2"],"emoji":"🧲","name":"magnet"},{"codes":["1f9f4"],"emoji":"🧴","name":"lotion bottle"},{"codes":["1f9f7"],"emoji":"🧷","name":"safety pin"},{"codes":["1f9f9"],"emoji":"🧹","name":"broom"},{"codes":["1f9fa"],"emoji":"🧺","name":"basket"},{"codes":["1f9fb"],"emoji":"🧻","name":"roll of paper"},{"codes":["1f9fc"],"emoji":"🧼","name":"bar of soap"},{"codes":["1f9fd"],"emoji":"🧽","name":"sponge"},{"codes":["1f9fe"],"emoji":"🧾","name":"receipt"},{"codes":["1fa70"],"emoji":"🩰","name":"ballet shoes"},{"codes":["1fa71"],"emoji":"🩱","name":"one-piece swimsuit"},{"codes":["1fa72"],"emoji":"🩲","name":"briefs"},{"codes":["1fa73"],"emoji":"🩳","name":"shorts"},{"codes":["1fa74"],"emoji":"🩴","name":"thong sandal"},{"codes":["1fa78"],"emoji":"🩸","name":"drop of blood"},{"codes":["1fa79"],"emoji":"🩹","name":"adhesive bandage"},{"codes":["1fa7a"],"emoji":"🩺","name":"stethoscope"},{"codes":["1fa83"],"emoji":"🪃","name":"boomerang"},{"codes":["1fa91"],"emoji":"🪑","name":"chair"},{"codes":["1fa92"],"emoji":"🪒","name":"razor"},{"codes":["1fa93"],"emoji":"🪓","name":"axe"},{"codes":["1fa94"],"emoji":"🪔","name":"diya lamp"},{"codes":["1fa95"],"emoji":"🪕","name":"banjo"},{"codes":["1fa96"],"emoji":"🪖","name":"military helmet"},{"codes":["1fa97"],"emoji":"🪗","name":"accordion"},{"codes":["1fa98"],"emoji":"🪘","name":"long drum"},{"codes":["1fa99"],"emoji":"🪙","name":"coin"},{"codes":["1fa9a"],"emoji":"🪚","name":"carpentry saw"},{"codes":["1fa9b"],"emoji":"🪛","name":"screwdriver"},{"codes":["1fa9c"],"emoji":"🪜","name":"ladder"},{"codes":["1fa9d"],"emoji":"🪝","name":"hook"},{"codes":["1fa9e"],"emoji":"🪞","name":"mirror"},{"codes":["1fa9f"],"emoji":"🪟","name":"window"},{"codes":["1faa0"],"emoji":"🪠","name":"plunger"},{"codes":["1faa3"],"emoji":"🪣","name":"bucket"},{"codes":["1faa4"],"emoji":"🪤","name":"mouse trap"},{"codes":["1faa5"],"emoji":"🪥","name":"toothbrush"},{"codes":["1faa6"],"emoji":"🪦","name":"headstone"},{"codes":["1faa7"],"emoji":"🪧","name":"placard"},{"codes":["2328","fe0f"],"emoji":"⌨️","name":""},{"codes":["260e","fe0f"],"emoji":"☎️","name":"black telephone"},{"codes":["2692","fe0f"],"emoji":"⚒️","name":""},{"codes":["2694","fe0f"],"emoji":"⚔️","name":""},{"codes":["2696","fe0f"],"emoji":"⚖️","name":""},{"codes":["2697","fe0f"],"emoji":"⚗️","name":""},{"codes":["2699","fe0f"],"emoji":"⚙️","name":""},{"codes":["26b0","fe0f"],"emoji":"⚰️","name":""},{"codes":["26b1","fe0f"],"emoji":"⚱️","name":""},{"codes":["26cf","fe0f"],"emoji":"⛏️","name":""},{"codes":["26d1","fe0f"],"emoji":"⛑️","name":""},{"codes":["26d3","fe0f"],"emoji":"⛓️","name":""},{"codes":["2702","fe0f"],"emoji":"✂️","name":"black scissors"},{"codes":["2709","fe0f"],"emoji":"✉️","name":"envelope"},{"codes":["270f","fe0f"],"emoji":"✏️","name":"pencil"},{"codes":["2712","fe0f"],"emoji":"✒️","name":"black nib"}]}]},{"name":"Skin Tones","subGroups":[{"name":"sub-cat","emojis":[{"codes":["1f3fb"],"emoji":"🏻","name":"emoji modifier fitzpatrick type-1-2"},{"codes":["1f3fc"],"emoji":"🏼","name":"emoji modifier fitzpatrick type-3"},{"codes":["1f3fd"],"emoji":"🏽","name":"emoji modifier fitzpatrick type-4"},{"codes":["1f3fe"],"emoji":"🏾","name":"emoji modifier fitzpatrick type-5"},{"codes":["1f3ff"],"emoji":"🏿","name":"emoji modifier fitzpatrick type-6"}]}]},{"name":"Smileys & Emotion","subGroups":[{"name":"sub-cat","emojis":[{"codes":["1f441","fe0f","200d","1f5e8","fe0f"],"emoji":"👁️‍🗨️","name":""},{"codes":["1f479"],"emoji":"👹","name":"japanese ogre"},{"codes":["1f47a"],"emoji":"👺","name":"japanese goblin"},{"codes":["1f47b"],"emoji":"👻","name":"ghost"},{"codes":["1f47d"],"emoji":"👽","name":"extraterrestrial alien"},{"codes":["1f47e"],"emoji":"👾","name":"alien monster"},{"codes":["1f47f"],"emoji":"👿","name":"imp"},{"codes":["1f480"],"emoji":"💀","name":"skull"},{"codes":["1f48b"],"emoji":"💋","name":"kiss mark"},{"codes":["1f48c"],"emoji":"💌","name":"love letter"},{"codes":["1f493"],"emoji":"💓","name":"beating heart"},{"codes":["1f494"],"emoji":"💔","name":"broken heart"},{"codes":["1f495"],"emoji":"💕","name":"two hearts"},{"codes":["1f496"],"emoji":"💖","name":"sparkling heart"},{"codes":["1f497"],"emoji":"💗","name":"growing heart"},{"codes":["1f498"],"emoji":"💘","name":"heart with arrow"},{"codes":["1f499"],"emoji":"💙","name":"blue heart"},{"codes":["1f49a"],"emoji":"💚","name":"green heart"},{"codes":["1f49b"],"emoji":"💛","name":"yellow heart"},{"codes":["1f49c"],"emoji":"💜","name":"purple heart"},{"codes":["1f49d"],"emoji":"💝","name":"heart with ribbon"},{"codes":["1f49e"],"emoji":"💞","name":"revolving hearts"},{"codes":["1f49f"],"emoji":"💟","name":"heart decoration"},{"codes":["1f4a2"],"emoji":"💢","name":"anger symbol"},{"codes":["1f4a3"],"emoji":"💣","name":"bomb"},{"codes":["1f4a4"],"emoji":"💤","name":"sleeping symbol"},{"codes":["1f4a5"],"emoji":"💥","name":"collision symbol"},{"codes":["1f4a6"],"emoji":"💦","name":"splashing sweat symbol"},{"codes":["1f4a8"],"emoji":"💨","name":"dash symbol"},{"codes":["1f4a9"],"emoji":"💩","name":"pile of poo"},{"codes":["1f4ab"],"emoji":"💫","name":"dizzy symbol"},{"codes":["1f4ac"],"emoji":"💬","name":"speech balloon"},{"codes":["1f4ad"],"emoji":"💭","name":"thought balloon"},{"codes":["1f4af"],"emoji":"💯","name":"hundred points symbol"},{"codes":["1f573","fe0f"],"emoji":"🕳️","name":""},{"codes":["1f5a4"],"emoji":"🖤","name":"black heart"},{"codes":["1f5e8","fe0f"],"emoji":"🗨️","name":""},{"codes":["1f5ef","fe0f"],"emoji":"🗯️","name":""},{"codes":["1f600"],"emoji":"😀","name":"grinning face"},{"codes":["1f601"],"emoji":"😁","name":"grinning face with smiling eyes"},{"codes":["1f602"],"emoji":"😂","name":"face with tears of joy"},{"codes":["1f603"],"emoji":"😃","name":"smiling face with open mouth"},{"codes":["1f604"],"emoji":"😄","name":"smiling face with open mouth and smiling eyes"},{"codes":["1f605"],"emoji":"😅","name":"smiling face with open mouth and cold sweat"},{"codes":["1f606"],"emoji":"😆","name":"smiling face with open mouth and tightly-closed eyes"},{"codes":["1f607"],"emoji":"😇","name":"smiling face with halo"},{"codes":["1f608"],"emoji":"😈","name":"smiling face with horns"},{"codes":["1f609"],"emoji":"😉","name":"winking face"},{"codes":["1f60a"],"emoji":"😊","name":"smiling face with smiling eyes"},{"codes":["1f60b"],"emoji":"😋","name":"face savouring delicious food"},{"codes":["1f60c"],"emoji":"😌","name":"relieved face"},{"codes":["1f60d"],"emoji":"😍","name":"smiling face with heart-shaped eyes"},{"codes":["1f60e"],"emoji":"😎","name":"smiling face with sunglasses"},{"codes":["1f60f"],"emoji":"😏","name":"smirking face"},{"codes":["1f610"],"emoji":"😐","name":"neutral face"},{"codes":["1f611"],"emoji":"😑","name":"expressionless face"},{"codes":["1f612"],"emoji":"😒","name":"unamused face"},{"codes":["1f613"],"emoji":"😓","name":"face with cold sweat"},{"codes":["1f614"],"emoji":"😔","name":"pensive face"},{"codes":["1f615"],"emoji":"😕","name":"confused face"},{"codes":["1f616"],"emoji":"😖","name":"confounded face"},{"codes":["1f617"],"emoji":"😗","name":"kissing face"},{"codes":["1f618"],"emoji":"😘","name":"face throwing a kiss"},{"codes":["1f619"],"emoji":"😙","name":"kissing face with smiling eyes"},{"codes":["1f61a"],"emoji":"😚","name":"kissing face with closed eyes"},{"codes":["1f61b"],"emoji":"😛","name":"face with stuck-out tongue"},{"codes":["1f61c"],"emoji":"😜","name":"face with stuck-out tongue and winking eye"},{"codes":["1f61d"],"emoji":"😝","name":"face with stuck-out tongue and tightly-closed eyes"},{"codes":["1f61e"],"emoji":"😞","name":"disappointed face"},{"codes":["1f61f"],"emoji":"😟","name":"worried face"},{"codes":["1f620"],"emoji":"😠","name":"angry face"},{"codes":["1f621"],"emoji":"😡","name":"pouting face"},{"codes":["1f622"],"emoji":"😢","name":"crying face"},{"codes":["1f623"],"emoji":"😣","name":"persevering face"},{"codes":["1f624"],"emoji":"😤","name":"face with look of triumph"},{"codes":["1f625"],"emoji":"😥","name":"disappointed but relieved face"},{"codes":["1f626"],"emoji":"😦","name":"frowning face with open mouth"},{"codes":["1f627"],"emoji":"😧","name":"anguished face"},{"codes":["1f628"],"emoji":"😨","name":"fearful face"},{"codes":["1f629"],"emoji":"😩","name":"weary face"},{"codes":["1f62a"],"emoji":"😪","name":"sleepy face"},{"codes":["1f62b"],"emoji":"😫","name":"tired face"},{"codes":["1f62c"],"emoji":"😬","name":"grimacing face"},{"codes":["1f62d"],"emoji":"😭","name":"loudly crying face"},{"codes":["1f62e"],"emoji":"😮","name":"face with open mouth"},{"codes":["1f62f"],"emoji":"😯","name":"hushed face"},{"codes":["1f630"],"emoji":"😰","name":"face with open mouth and cold sweat"},{"codes":["1f631"],"emoji":"😱","name":"face screaming in fear"},{"codes":["1f632"],"emoji":"😲","name":"astonished face"},{"codes":["1f633"],"emoji":"😳","name":"flushed face"},{"codes":["1f634"],"emoji":"😴","name":"sleeping face"},{"codes":["1f635"],"emoji":"😵","name":"dizzy face"},{"codes":["1f636"],"emoji":"😶","name":"face without mouth"},{"codes":["1f637"],"emoji":"😷","name":"face with medical mask"},{"codes":["1f638"],"emoji":"😸","name":"grinning cat face with smiling eyes"},{"codes":["1f639"],"emoji":"😹","name":"cat face with tears of joy"},{"codes":["1f63a"],"emoji":"😺","name":"smiling cat face with open mouth"},{"codes":["1f63b"],"emoji":"😻","name":"smiling cat face with heart-shaped eyes"},{"codes":["1f63c"],"emoji":"😼","name":"cat face with wry smile"},{"codes":["1f63d"],"emoji":"😽","name":"kissing cat face with closed eyes"},{"codes":["1f63e"],"emoji":"😾","name":"pouting cat face"},{"codes":["1f63f"],"emoji":"😿","name":"crying cat face"},{"codes":["1f640"],"emoji":"🙀","name":"weary cat face"},{"codes":["1f641"],"emoji":"🙁","name":"slightly frowning face"},{"codes":["1f642"],"emoji":"🙂","name":"slightly smiling face"},{"codes":["1f643"],"emoji":"🙃","name":"upside-down face"},{"codes":["1f644"],"emoji":"🙄","name":"face with rolling eyes"},{"codes":["1f648"],"emoji":"🙈","name":"see-no-evil monkey"},{"codes":["1f649"],"emoji":"🙉","name":"hear-no-evil monkey"},{"codes":["1f64a"],"emoji":"🙊","name":"speak-no-evil monkey"},{"codes":["1f90d"],"emoji":"🤍","name":"white heart"},{"codes":["1f90e"],"emoji":"🤎","name":"brown heart"},{"codes":["1f910"],"emoji":"🤐","name":"zipper-mouth face"},{"codes":["1f911"],"emoji":"🤑","name":"money-mouth face"},{"codes":["1f912"],"emoji":"🤒","name":"face with thermometer"},{"codes":["1f913"],"emoji":"🤓","name":"nerd face"},{"codes":["1f914"],"emoji":"🤔","name":"thinking face"},{"codes":["1f915"],"emoji":"🤕","name":"face with head-bandage"},{"codes":["1f916"],"emoji":"🤖","name":"robot face"},{"codes":["1f917"],"emoji":"🤗","name":"hugging face"},{"codes":["1f920"],"emoji":"🤠","name":"face with cowboy hat"},{"codes":["1f921"],"emoji":"🤡","name":"clown face"},{"codes":["1f922"],"emoji":"🤢","name":"nauseated face"},{"codes":["1f923"],"emoji":"🤣","name":"rolling on the floor laughing"},{"codes":["1f924"],"emoji":"🤤","name":"drooling face"},{"codes":["1f925"],"emoji":"🤥","name":"lying face"},{"codes":["1f927"],"emoji":"🤧","name":"sneezing face"},{"codes":["1f928"],"emoji":"🤨","name":"face with one eyebrow raised"},{"codes":["1f929"],"emoji":"🤩","name":"grinning face with star eyes"},{"codes":["1f92a"],"emoji":"🤪","name":"grinning face with one large and one small eye"},{"codes":["1f92b"],"emoji":"🤫","name":"face with finger covering closed lips"},{"codes":["1f92c"],"emoji":"🤬","name":"serious face with symbols covering mouth"},{"codes":["1f92d"],"emoji":"🤭","name":"smiling face with smiling eyes and hand covering mouth"},{"codes":["1f92e"],"emoji":"🤮","name":"face with open mouth vomiting"},{"codes":["1f92f"],"emoji":"🤯","name":"shocked face with exploding head"},{"codes":["1f970"],"emoji":"🥰","name":"smiling face with smiling eyes and three hearts"},{"codes":["1f971"],"emoji":"🥱","name":"yawning face"},{"codes":["1f972"],"emoji":"🥲","name":"smiling face with tear"},{"codes":["1f973"],"emoji":"🥳","name":"face with party horn and party hat"},{"codes":["1f974"],"emoji":"🥴","name":"face with uneven eyes and wavy mouth"},{"codes":["1f975"],"emoji":"🥵","name":"overheated face"},{"codes":["1f976"],"emoji":"🥶","name":"freezing face"},{"codes":["1f978"],"emoji":"🥸","name":"disguised face"},{"codes":["1f97a"],"emoji":"🥺","name":"face with pleading eyes"},{"codes":["1f9d0"],"emoji":"🧐","name":"face with monocle"},{"codes":["1f9e1"],"emoji":"🧡","name":"orange heart"},{"codes":["2620","fe0f"],"emoji":"☠️","name":""},{"codes":["2639","fe0f"],"emoji":"☹️","name":""},{"codes":["263a","fe0f"],"emoji":"☺️","name":"white smiling face"},{"codes":["2763","fe0f"],"emoji":"❣️","name":""},{"codes":["2764","fe0f"],"emoji":"❤️","name":"heavy black heart"}]}]}];


        /***/
    }),
    /* 2 */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _plugin = __webpack_require__(0);

        var _plugin2 = _interopRequireDefault(_plugin);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        tinymce.PluginManager.add('tinymceEmoji', _plugin2.default);
        tinymce.PluginManager.requireLangPack('tinymceEmoji', 'ru,en');

        /***/
    }),
    /* 3 */
    /***/ (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global, module) {
            var __WEBPACK_AMD_DEFINE_RESULT__;
            /**
             * @license
             * Lodash <https://lodash.com/>
             * Copyright JS Foundation and other contributors <https://js.foundation/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */
            ;
            (function () {

                /** Used as a safe reference for `undefined` in pre-ES5 environments. */
                var undefined;

                /** Used as the semantic version number. */
                var VERSION = '4.17.4';

                /** Used as the size to enable large array optimizations. */
                var LARGE_ARRAY_SIZE = 200;

                /** Error message constants. */
                var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
                    FUNC_ERROR_TEXT = 'Expected a function';

                /** Used to stand-in for `undefined` hash values. */
                var HASH_UNDEFINED = '__lodash_hash_undefined__';

                /** Used as the maximum memoize cache size. */
                var MAX_MEMOIZE_SIZE = 500;

                /** Used as the internal argument placeholder. */
                var PLACEHOLDER = '__lodash_placeholder__';

                /** Used to compose bitmasks for cloning. */
                var CLONE_DEEP_FLAG = 1,
                    CLONE_FLAT_FLAG = 2,
                    CLONE_SYMBOLS_FLAG = 4;

                /** Used to compose bitmasks for value comparisons. */
                var COMPARE_PARTIAL_FLAG = 1,
                    COMPARE_UNORDERED_FLAG = 2;

                /** Used to compose bitmasks for function metadata. */
                var WRAP_BIND_FLAG = 1,
                    WRAP_BIND_KEY_FLAG = 2,
                    WRAP_CURRY_BOUND_FLAG = 4,
                    WRAP_CURRY_FLAG = 8,
                    WRAP_CURRY_RIGHT_FLAG = 16,
                    WRAP_PARTIAL_FLAG = 32,
                    WRAP_PARTIAL_RIGHT_FLAG = 64,
                    WRAP_ARY_FLAG = 128,
                    WRAP_REARG_FLAG = 256,
                    WRAP_FLIP_FLAG = 512;

                /** Used as default options for `_.truncate`. */
                var DEFAULT_TRUNC_LENGTH = 30,
                    DEFAULT_TRUNC_OMISSION = '...';

                /** Used to detect hot functions by number of calls within a span of milliseconds. */
                var HOT_COUNT = 800,
                    HOT_SPAN = 16;

                /** Used to indicate the type of lazy iteratees. */
                var LAZY_FILTER_FLAG = 1,
                    LAZY_MAP_FLAG = 2,
                    LAZY_WHILE_FLAG = 3;

                /** Used as references for various `Number` constants. */
                var INFINITY = 1 / 0,
                    MAX_SAFE_INTEGER = 9007199254740991,
                    MAX_INTEGER = 1.7976931348623157e+308,
                    NAN = 0 / 0;

                /** Used as references for the maximum length and index of an array. */
                var MAX_ARRAY_LENGTH = 4294967295,
                    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

                /** Used to associate wrap methods with their bit flags. */
                var wrapFlags = [
                    ['ary', WRAP_ARY_FLAG],
                    ['bind', WRAP_BIND_FLAG],
                    ['bindKey', WRAP_BIND_KEY_FLAG],
                    ['curry', WRAP_CURRY_FLAG],
                    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                    ['flip', WRAP_FLIP_FLAG],
                    ['partial', WRAP_PARTIAL_FLAG],
                    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                    ['rearg', WRAP_REARG_FLAG]
                ];

                /** `Object#toString` result references. */
                var argsTag = '[object Arguments]',
                    arrayTag = '[object Array]',
                    asyncTag = '[object AsyncFunction]',
                    boolTag = '[object Boolean]',
                    dateTag = '[object Date]',
                    domExcTag = '[object DOMException]',
                    errorTag = '[object Error]',
                    funcTag = '[object Function]',
                    genTag = '[object GeneratorFunction]',
                    mapTag = '[object Map]',
                    numberTag = '[object Number]',
                    nullTag = '[object Null]',
                    objectTag = '[object Object]',
                    promiseTag = '[object Promise]',
                    proxyTag = '[object Proxy]',
                    regexpTag = '[object RegExp]',
                    setTag = '[object Set]',
                    stringTag = '[object String]',
                    symbolTag = '[object Symbol]',
                    undefinedTag = '[object Undefined]',
                    weakMapTag = '[object WeakMap]',
                    weakSetTag = '[object WeakSet]';

                var arrayBufferTag = '[object ArrayBuffer]',
                    dataViewTag = '[object DataView]',
                    float32Tag = '[object Float32Array]',
                    float64Tag = '[object Float64Array]',
                    int8Tag = '[object Int8Array]',
                    int16Tag = '[object Int16Array]',
                    int32Tag = '[object Int32Array]',
                    uint8Tag = '[object Uint8Array]',
                    uint8ClampedTag = '[object Uint8ClampedArray]',
                    uint16Tag = '[object Uint16Array]',
                    uint32Tag = '[object Uint32Array]';

                /** Used to match empty string literals in compiled template source. */
                var reEmptyStringLeading = /\b__p \+= '';/g,
                    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

                /** Used to match HTML entities and HTML characters. */
                var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                    reUnescapedHtml = /[&<>"']/g,
                    reHasEscapedHtml = RegExp(reEscapedHtml.source),
                    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

                /** Used to match template delimiters. */
                var reEscape = /<%-([\s\S]+?)%>/g,
                    reEvaluate = /<%([\s\S]+?)%>/g,
                    reInterpolate = /<%=([\s\S]+?)%>/g;

                /** Used to match property names within property paths. */
                var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                    reIsPlainProp = /^\w*$/,
                    reLeadingDot = /^\./,
                    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

                /**
                 * Used to match `RegExp`
                 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                 */
                var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                    reHasRegExpChar = RegExp(reRegExpChar.source);

                /** Used to match leading and trailing whitespace. */
                var reTrim = /^\s+|\s+$/g,
                    reTrimStart = /^\s+/,
                    reTrimEnd = /\s+$/;

                /** Used to match wrap detail comments. */
                var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                    reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                    reSplitDetails = /,? & /;

                /** Used to match words composed of alphanumeric characters. */
                var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

                /** Used to match backslashes in property paths. */
                var reEscapeChar = /\\(\\)?/g;

                /**
                 * Used to match
                 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
                 */
                var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

                /** Used to match `RegExp` flags from their coerced string values. */
                var reFlags = /\w*$/;

                /** Used to detect bad signed hexadecimal string values. */
                var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

                /** Used to detect binary string values. */
                var reIsBinary = /^0b[01]+$/i;

                /** Used to detect host constructors (Safari). */
                var reIsHostCtor = /^\[object .+?Constructor\]$/;

                /** Used to detect octal string values. */
                var reIsOctal = /^0o[0-7]+$/i;

                /** Used to detect unsigned integer values. */
                var reIsUint = /^(?:0|[1-9]\d*)$/;

                /** Used to match Latin Unicode letters (excluding mathematical operators). */
                var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

                /** Used to ensure capturing order of template delimiters. */
                var reNoMatch = /($^)/;

                /** Used to match unescaped characters in compiled string literals. */
                var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

                /** Used to compose unicode character classes. */
                var rsAstralRange = '\\ud800-\\udfff',
                    rsComboMarksRange = '\\u0300-\\u036f',
                    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                    rsComboSymbolsRange = '\\u20d0-\\u20ff',
                    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
                    rsDingbatRange = '\\u2700-\\u27bf',
                    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                    rsPunctuationRange = '\\u2000-\\u206f',
                    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                    rsVarRange = '\\ufe0e\\ufe0f',
                    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

                /** Used to compose unicode capture groups. */
                var rsApos = "['\u2019]",
                    rsAstral = '[' + rsAstralRange + ']',
                    rsBreak = '[' + rsBreakRange + ']',
                    rsCombo = '[' + rsComboRange + ']',
                    rsDigits = '\\d+',
                    rsDingbat = '[' + rsDingbatRange + ']',
                    rsLower = '[' + rsLowerRange + ']',
                    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
                    rsFitz = '\\ud83c[\\udffb-\\udfff]',
                    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                    rsNonAstral = '[^' + rsAstralRange + ']',
                    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                    rsUpper = '[' + rsUpperRange + ']',
                    rsZWJ = '\\u200d';

                /** Used to compose unicode regexes. */
                var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                    reOptMod = rsModifier + '?',
                    rsOptVar = '[' + rsVarRange + ']?',
                    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
                    rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
                    rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
                    rsSeq = rsOptVar + reOptMod + rsOptJoin,
                    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
                    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

                /** Used to match apostrophes. */
                var reApos = RegExp(rsApos, 'g');

                /**
                 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
                 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
                 */
                var reComboMark = RegExp(rsCombo, 'g');

                /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
                var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

                /** Used to match complex or compound words. */
                var reUnicodeWord = RegExp([
                    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                    rsUpper + '+' + rsOptContrUpper,
                    rsOrdUpper,
                    rsOrdLower,
                    rsDigits,
                    rsEmoji
                ].join('|'), 'g');

                /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
                var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

                /** Used to detect strings that need a more robust regexp to match words. */
                var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

                /** Used to assign default `context` object properties. */
                var contextProps = [
                    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
                    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
                    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
                    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
                    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
                ];

                /** Used to make template sourceURLs easier to identify. */
                var templateCounter = -1;

                /** Used to identify `toStringTag` values of typed arrays. */
                var typedArrayTags = {};
                typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
                    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                        typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                            typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                                typedArrayTags[uint32Tag] = true;
                typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
                    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                        typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                            typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                                typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                                    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                                        typedArrayTags[setTag] = typedArrayTags[stringTag] =
                                            typedArrayTags[weakMapTag] = false;

                /** Used to identify `toStringTag` values supported by `_.clone`. */
                var cloneableTags = {};
                cloneableTags[argsTag] = cloneableTags[arrayTag] =
                    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
                        cloneableTags[boolTag] = cloneableTags[dateTag] =
                            cloneableTags[float32Tag] = cloneableTags[float64Tag] =
                                cloneableTags[int8Tag] = cloneableTags[int16Tag] =
                                    cloneableTags[int32Tag] = cloneableTags[mapTag] =
                                        cloneableTags[numberTag] = cloneableTags[objectTag] =
                                            cloneableTags[regexpTag] = cloneableTags[setTag] =
                                                cloneableTags[stringTag] = cloneableTags[symbolTag] =
                                                    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                                                        cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
                cloneableTags[errorTag] = cloneableTags[funcTag] =
                    cloneableTags[weakMapTag] = false;

                /** Used to map Latin Unicode letters to basic Latin letters. */
                var deburredLetters = {
                    // Latin-1 Supplement block.
                    '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
                    '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
                    '\xc7': 'C', '\xe7': 'c',
                    '\xd0': 'D', '\xf0': 'd',
                    '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
                    '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
                    '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
                    '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
                    '\xd1': 'N', '\xf1': 'n',
                    '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
                    '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
                    '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
                    '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
                    '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
                    '\xc6': 'Ae', '\xe6': 'ae',
                    '\xde': 'Th', '\xfe': 'th',
                    '\xdf': 'ss',
                    // Latin Extended-A block.
                    '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
                    '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
                    '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
                    '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
                    '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
                    '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
                    '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
                    '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
                    '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
                    '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
                    '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
                    '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
                    '\u0134': 'J', '\u0135': 'j',
                    '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
                    '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
                    '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
                    '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
                    '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
                    '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
                    '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
                    '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
                    '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
                    '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
                    '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
                    '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
                    '\u0163': 't', '\u0165': 't', '\u0167': 't',
                    '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
                    '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
                    '\u0174': 'W', '\u0175': 'w',
                    '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
                    '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
                    '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
                    '\u0132': 'IJ', '\u0133': 'ij',
                    '\u0152': 'Oe', '\u0153': 'oe',
                    '\u0149': "'n", '\u017f': 's'
                };

                /** Used to map characters to HTML entities. */
                var htmlEscapes = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#39;'
                };

                /** Used to map HTML entities to characters. */
                var htmlUnescapes = {
                    '&amp;': '&',
                    '&lt;': '<',
                    '&gt;': '>',
                    '&quot;': '"',
                    '&#39;': "'"
                };

                /** Used to escape characters for inclusion in compiled string literals. */
                var stringEscapes = {
                    '\\': '\\',
                    "'": "'",
                    '\n': 'n',
                    '\r': 'r',
                    '\u2028': 'u2028',
                    '\u2029': 'u2029'
                };

                /** Built-in method references without a dependency on `root`. */
                var freeParseFloat = parseFloat,
                    freeParseInt = parseInt;

                /** Detect free variable `global` from Node.js. */
                var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

                /** Detect free variable `self`. */
                var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

                /** Used as a reference to the global object. */
                var root = freeGlobal || freeSelf || Function('return this')();

                /** Detect free variable `exports`. */
                var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

                /** Detect free variable `module`. */
                var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

                /** Detect the popular CommonJS extension `module.exports`. */
                var moduleExports = freeModule && freeModule.exports === freeExports;

                /** Detect free variable `process` from Node.js. */
                var freeProcess = moduleExports && freeGlobal.process;

                /** Used to access faster Node.js helpers. */
                var nodeUtil = (function () {
                    try {
                        return freeProcess && freeProcess.binding && freeProcess.binding('util');
                    } catch (e) {
                    }
                }());

                /* Node.js helper references. */
                var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                    nodeIsDate = nodeUtil && nodeUtil.isDate,
                    nodeIsMap = nodeUtil && nodeUtil.isMap,
                    nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                    nodeIsSet = nodeUtil && nodeUtil.isSet,
                    nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

                /*--------------------------------------------------------------------------*/

                /**
                 * Adds the key-value `pair` to `map`.
                 *
                 * @private
                 * @param {Object} map The map to modify.
                 * @param {Array} pair The key-value pair to add.
                 * @returns {Object} Returns `map`.
                 */
                function addMapEntry(map, pair) {
                    // Don't return `map.set` because it's not chainable in IE 11.
                    map.set(pair[0], pair[1]);
                    return map;
                }

                /**
                 * Adds `value` to `set`.
                 *
                 * @private
                 * @param {Object} set The set to modify.
                 * @param {*} value The value to add.
                 * @returns {Object} Returns `set`.
                 */
                function addSetEntry(set, value) {
                    // Don't return `set.add` because it's not chainable in IE 11.
                    set.add(value);
                    return set;
                }

                /**
                 * A faster alternative to `Function#apply`, this function invokes `func`
                 * with the `this` binding of `thisArg` and the arguments of `args`.
                 *
                 * @private
                 * @param {Function} func The function to invoke.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} args The arguments to invoke `func` with.
                 * @returns {*} Returns the result of `func`.
                 */
                function apply(func, thisArg, args) {
                    switch (args.length) {
                        case 0:
                            return func.call(thisArg);
                        case 1:
                            return func.call(thisArg, args[0]);
                        case 2:
                            return func.call(thisArg, args[0], args[1]);
                        case 3:
                            return func.call(thisArg, args[0], args[1], args[2]);
                    }
                    return func.apply(thisArg, args);
                }

                /**
                 * A specialized version of `baseAggregator` for arrays.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform keys.
                 * @param {Object} accumulator The initial aggregated object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function arrayAggregator(array, setter, iteratee, accumulator) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        var value = array[index];
                        setter(accumulator, value, iteratee(value), array);
                    }
                    return accumulator;
                }

                /**
                 * A specialized version of `_.forEach` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns `array`.
                 */
                function arrayEach(array, iteratee) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (iteratee(array[index], index, array) === false) {
                            break;
                        }
                    }
                    return array;
                }

                /**
                 * A specialized version of `_.forEachRight` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns `array`.
                 */
                function arrayEachRight(array, iteratee) {
                    var length = array == null ? 0 : array.length;

                    while (length--) {
                        if (iteratee(array[length], length, array) === false) {
                            break;
                        }
                    }
                    return array;
                }

                /**
                 * A specialized version of `_.every` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`.
                 */
                function arrayEvery(array, predicate) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (!predicate(array[index], index, array)) {
                            return false;
                        }
                    }
                    return true;
                }

                /**
                 * A specialized version of `_.filter` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 */
                function arrayFilter(array, predicate) {
                    var index = -1,
                        length = array == null ? 0 : array.length,
                        resIndex = 0,
                        result = [];

                    while (++index < length) {
                        var value = array[index];
                        if (predicate(value, index, array)) {
                            result[resIndex++] = value;
                        }
                    }
                    return result;
                }

                /**
                 * A specialized version of `_.includes` for arrays without support for
                 * specifying an index to search from.
                 *
                 * @private
                 * @param {Array} [array] The array to inspect.
                 * @param {*} target The value to search for.
                 * @returns {boolean} Returns `true` if `target` is found, else `false`.
                 */
                function arrayIncludes(array, value) {
                    var length = array == null ? 0 : array.length;
                    return !!length && baseIndexOf(array, value, 0) > -1;
                }

                /**
                 * This function is like `arrayIncludes` except that it accepts a comparator.
                 *
                 * @private
                 * @param {Array} [array] The array to inspect.
                 * @param {*} target The value to search for.
                 * @param {Function} comparator The comparator invoked per element.
                 * @returns {boolean} Returns `true` if `target` is found, else `false`.
                 */
                function arrayIncludesWith(array, value, comparator) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (comparator(value, array[index])) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 * A specialized version of `_.map` for arrays without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 */
                function arrayMap(array, iteratee) {
                    var index = -1,
                        length = array == null ? 0 : array.length,
                        result = Array(length);

                    while (++index < length) {
                        result[index] = iteratee(array[index], index, array);
                    }
                    return result;
                }

                /**
                 * Appends the elements of `values` to `array`.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to append.
                 * @returns {Array} Returns `array`.
                 */
                function arrayPush(array, values) {
                    var index = -1,
                        length = values.length,
                        offset = array.length;

                    while (++index < length) {
                        array[offset + index] = values[index];
                    }
                    return array;
                }

                /**
                 * A specialized version of `_.reduce` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @param {boolean} [initAccum] Specify using the first element of `array` as
                 *  the initial value.
                 * @returns {*} Returns the accumulated value.
                 */
                function arrayReduce(array, iteratee, accumulator, initAccum) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    if (initAccum && length) {
                        accumulator = array[++index];
                    }
                    while (++index < length) {
                        accumulator = iteratee(accumulator, array[index], index, array);
                    }
                    return accumulator;
                }

                /**
                 * A specialized version of `_.reduceRight` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @param {boolean} [initAccum] Specify using the last element of `array` as
                 *  the initial value.
                 * @returns {*} Returns the accumulated value.
                 */
                function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                    var length = array == null ? 0 : array.length;
                    if (initAccum && length) {
                        accumulator = array[--length];
                    }
                    while (length--) {
                        accumulator = iteratee(accumulator, array[length], length, array);
                    }
                    return accumulator;
                }

                /**
                 * A specialized version of `_.some` for arrays without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 */
                function arraySome(array, predicate) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (predicate(array[index], index, array)) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 * Gets the size of an ASCII `string`.
                 *
                 * @private
                 * @param {string} string The string inspect.
                 * @returns {number} Returns the string size.
                 */
                var asciiSize = baseProperty('length');

                /**
                 * Converts an ASCII `string` to an array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function asciiToArray(string) {
                    return string.split('');
                }

                /**
                 * Splits an ASCII `string` into an array of its words.
                 *
                 * @private
                 * @param {string} The string to inspect.
                 * @returns {Array} Returns the words of `string`.
                 */
                function asciiWords(string) {
                    return string.match(reAsciiWord) || [];
                }

                /**
                 * The base implementation of methods like `_.findKey` and `_.findLastKey`,
                 * without support for iteratee shorthands, which iterates over `collection`
                 * using `eachFunc`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {Function} eachFunc The function to iterate over `collection`.
                 * @returns {*} Returns the found element or its key, else `undefined`.
                 */
                function baseFindKey(collection, predicate, eachFunc) {
                    var result;
                    eachFunc(collection, function (value, key, collection) {
                        if (predicate(value, key, collection)) {
                            result = key;
                            return false;
                        }
                    });
                    return result;
                }

                /**
                 * The base implementation of `_.findIndex` and `_.findLastIndex` without
                 * support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {number} fromIndex The index to search from.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function baseFindIndex(array, predicate, fromIndex, fromRight) {
                    var length = array.length,
                        index = fromIndex + (fromRight ? 1 : -1);

                    while ((fromRight ? index-- : ++index < length)) {
                        if (predicate(array[index], index, array)) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function baseIndexOf(array, value, fromIndex) {
                    return value === value
                        ? strictIndexOf(array, value, fromIndex)
                        : baseFindIndex(array, baseIsNaN, fromIndex);
                }

                /**
                 * This function is like `baseIndexOf` except that it accepts a comparator.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @param {Function} comparator The comparator invoked per element.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function baseIndexOfWith(array, value, fromIndex, comparator) {
                    var index = fromIndex - 1,
                        length = array.length;

                    while (++index < length) {
                        if (comparator(array[index], value)) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * The base implementation of `_.isNaN` without support for number objects.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                 */
                function baseIsNaN(value) {
                    return value !== value;
                }

                /**
                 * The base implementation of `_.mean` and `_.meanBy` without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {number} Returns the mean.
                 */
                function baseMean(array, iteratee) {
                    var length = array == null ? 0 : array.length;
                    return length ? (baseSum(array, iteratee) / length) : NAN;
                }

                /**
                 * The base implementation of `_.property` without support for deep paths.
                 *
                 * @private
                 * @param {string} key The key of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 */
                function baseProperty(key) {
                    return function (object) {
                        return object == null ? undefined : object[key];
                    };
                }

                /**
                 * The base implementation of `_.propertyOf` without support for deep paths.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Function} Returns the new accessor function.
                 */
                function basePropertyOf(object) {
                    return function (key) {
                        return object == null ? undefined : object[key];
                    };
                }

                /**
                 * The base implementation of `_.reduce` and `_.reduceRight`, without support
                 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {*} accumulator The initial value.
                 * @param {boolean} initAccum Specify using the first or last element of
                 *  `collection` as the initial value.
                 * @param {Function} eachFunc The function to iterate over `collection`.
                 * @returns {*} Returns the accumulated value.
                 */
                function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                    eachFunc(collection, function (value, index, collection) {
                        accumulator = initAccum
                            ? (initAccum = false, value)
                            : iteratee(accumulator, value, index, collection);
                    });
                    return accumulator;
                }

                /**
                 * The base implementation of `_.sortBy` which uses `comparer` to define the
                 * sort order of `array` and replaces criteria objects with their corresponding
                 * values.
                 *
                 * @private
                 * @param {Array} array The array to sort.
                 * @param {Function} comparer The function to define sort order.
                 * @returns {Array} Returns `array`.
                 */
                function baseSortBy(array, comparer) {
                    var length = array.length;

                    array.sort(comparer);
                    while (length--) {
                        array[length] = array[length].value;
                    }
                    return array;
                }

                /**
                 * The base implementation of `_.sum` and `_.sumBy` without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {number} Returns the sum.
                 */
                function baseSum(array, iteratee) {
                    var result,
                        index = -1,
                        length = array.length;

                    while (++index < length) {
                        var current = iteratee(array[index]);
                        if (current !== undefined) {
                            result = result === undefined ? current : (result + current);
                        }
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.times` without support for iteratee shorthands
                 * or max array length checks.
                 *
                 * @private
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 */
                function baseTimes(n, iteratee) {
                    var index = -1,
                        result = Array(n);

                    while (++index < n) {
                        result[index] = iteratee(index);
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
                 * of key-value pairs for `object` corresponding to the property names of `props`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} props The property names to get values for.
                 * @returns {Object} Returns the key-value pairs.
                 */
                function baseToPairs(object, props) {
                    return arrayMap(props, function (key) {
                        return [key, object[key]];
                    });
                }

                /**
                 * The base implementation of `_.unary` without support for storing metadata.
                 *
                 * @private
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 */
                function baseUnary(func) {
                    return function (value) {
                        return func(value);
                    };
                }

                /**
                 * The base implementation of `_.values` and `_.valuesIn` which creates an
                 * array of `object` property values corresponding to the property names
                 * of `props`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} props The property names to get values for.
                 * @returns {Object} Returns the array of property values.
                 */
                function baseValues(object, props) {
                    return arrayMap(props, function (key) {
                        return object[key];
                    });
                }

                /**
                 * Checks if a `cache` value for `key` exists.
                 *
                 * @private
                 * @param {Object} cache The cache to query.
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function cacheHas(cache, key) {
                    return cache.has(key);
                }

                /**
                 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
                 * that is not found in the character symbols.
                 *
                 * @private
                 * @param {Array} strSymbols The string symbols to inspect.
                 * @param {Array} chrSymbols The character symbols to find.
                 * @returns {number} Returns the index of the first unmatched string symbol.
                 */
                function charsStartIndex(strSymbols, chrSymbols) {
                    var index = -1,
                        length = strSymbols.length;

                    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
                    }
                    return index;
                }

                /**
                 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
                 * that is not found in the character symbols.
                 *
                 * @private
                 * @param {Array} strSymbols The string symbols to inspect.
                 * @param {Array} chrSymbols The character symbols to find.
                 * @returns {number} Returns the index of the last unmatched string symbol.
                 */
                function charsEndIndex(strSymbols, chrSymbols) {
                    var index = strSymbols.length;

                    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
                    }
                    return index;
                }

                /**
                 * Gets the number of `placeholder` occurrences in `array`.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} placeholder The placeholder to search for.
                 * @returns {number} Returns the placeholder count.
                 */
                function countHolders(array, placeholder) {
                    var length = array.length,
                        result = 0;

                    while (length--) {
                        if (array[length] === placeholder) {
                            ++result;
                        }
                    }
                    return result;
                }

                /**
                 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
                 * letters to basic Latin letters.
                 *
                 * @private
                 * @param {string} letter The matched letter to deburr.
                 * @returns {string} Returns the deburred letter.
                 */
                var deburrLetter = basePropertyOf(deburredLetters);

                /**
                 * Used by `_.escape` to convert characters to HTML entities.
                 *
                 * @private
                 * @param {string} chr The matched character to escape.
                 * @returns {string} Returns the escaped character.
                 */
                var escapeHtmlChar = basePropertyOf(htmlEscapes);

                /**
                 * Used by `_.template` to escape characters for inclusion in compiled string literals.
                 *
                 * @private
                 * @param {string} chr The matched character to escape.
                 * @returns {string} Returns the escaped character.
                 */
                function escapeStringChar(chr) {
                    return '\\' + stringEscapes[chr];
                }

                /**
                 * Gets the value at `key` of `object`.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function getValue(object, key) {
                    return object == null ? undefined : object[key];
                }

                /**
                 * Checks if `string` contains Unicode symbols.
                 *
                 * @private
                 * @param {string} string The string to inspect.
                 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
                 */
                function hasUnicode(string) {
                    return reHasUnicode.test(string);
                }

                /**
                 * Checks if `string` contains a word composed of Unicode symbols.
                 *
                 * @private
                 * @param {string} string The string to inspect.
                 * @returns {boolean} Returns `true` if a word is found, else `false`.
                 */
                function hasUnicodeWord(string) {
                    return reHasUnicodeWord.test(string);
                }

                /**
                 * Converts `iterator` to an array.
                 *
                 * @private
                 * @param {Object} iterator The iterator to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function iteratorToArray(iterator) {
                    var data,
                        result = [];

                    while (!(data = iterator.next()).done) {
                        result.push(data.value);
                    }
                    return result;
                }

                /**
                 * Converts `map` to its key-value pairs.
                 *
                 * @private
                 * @param {Object} map The map to convert.
                 * @returns {Array} Returns the key-value pairs.
                 */
                function mapToArray(map) {
                    var index = -1,
                        result = Array(map.size);

                    map.forEach(function (value, key) {
                        result[++index] = [key, value];
                    });
                    return result;
                }

                /**
                 * Creates a unary function that invokes `func` with its argument transformed.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {Function} transform The argument transform.
                 * @returns {Function} Returns the new function.
                 */
                function overArg(func, transform) {
                    return function (arg) {
                        return func(transform(arg));
                    };
                }

                /**
                 * Replaces all `placeholder` elements in `array` with an internal placeholder
                 * and returns an array of their indexes.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {*} placeholder The placeholder to replace.
                 * @returns {Array} Returns the new array of placeholder indexes.
                 */
                function replaceHolders(array, placeholder) {
                    var index = -1,
                        length = array.length,
                        resIndex = 0,
                        result = [];

                    while (++index < length) {
                        var value = array[index];
                        if (value === placeholder || value === PLACEHOLDER) {
                            array[index] = PLACEHOLDER;
                            result[resIndex++] = index;
                        }
                    }
                    return result;
                }

                /**
                 * Converts `set` to an array of its values.
                 *
                 * @private
                 * @param {Object} set The set to convert.
                 * @returns {Array} Returns the values.
                 */
                function setToArray(set) {
                    var index = -1,
                        result = Array(set.size);

                    set.forEach(function (value) {
                        result[++index] = value;
                    });
                    return result;
                }

                /**
                 * Converts `set` to its value-value pairs.
                 *
                 * @private
                 * @param {Object} set The set to convert.
                 * @returns {Array} Returns the value-value pairs.
                 */
                function setToPairs(set) {
                    var index = -1,
                        result = Array(set.size);

                    set.forEach(function (value) {
                        result[++index] = [value, value];
                    });
                    return result;
                }

                /**
                 * A specialized version of `_.indexOf` which performs strict equality
                 * comparisons of values, i.e. `===`.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function strictIndexOf(array, value, fromIndex) {
                    var index = fromIndex - 1,
                        length = array.length;

                    while (++index < length) {
                        if (array[index] === value) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * A specialized version of `_.lastIndexOf` which performs strict equality
                 * comparisons of values, i.e. `===`.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function strictLastIndexOf(array, value, fromIndex) {
                    var index = fromIndex + 1;
                    while (index--) {
                        if (array[index] === value) {
                            return index;
                        }
                    }
                    return index;
                }

                /**
                 * Gets the number of symbols in `string`.
                 *
                 * @private
                 * @param {string} string The string to inspect.
                 * @returns {number} Returns the string size.
                 */
                function stringSize(string) {
                    return hasUnicode(string)
                        ? unicodeSize(string)
                        : asciiSize(string);
                }

                /**
                 * Converts `string` to an array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function stringToArray(string) {
                    return hasUnicode(string)
                        ? unicodeToArray(string)
                        : asciiToArray(string);
                }

                /**
                 * Used by `_.unescape` to convert HTML entities to characters.
                 *
                 * @private
                 * @param {string} chr The matched character to unescape.
                 * @returns {string} Returns the unescaped character.
                 */
                var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

                /**
                 * Gets the size of a Unicode `string`.
                 *
                 * @private
                 * @param {string} string The string inspect.
                 * @returns {number} Returns the string size.
                 */
                function unicodeSize(string) {
                    var result = reUnicode.lastIndex = 0;
                    while (reUnicode.test(string)) {
                        ++result;
                    }
                    return result;
                }

                /**
                 * Converts a Unicode `string` to an array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function unicodeToArray(string) {
                    return string.match(reUnicode) || [];
                }

                /**
                 * Splits a Unicode `string` into an array of its words.
                 *
                 * @private
                 * @param {string} The string to inspect.
                 * @returns {Array} Returns the words of `string`.
                 */
                function unicodeWords(string) {
                    return string.match(reUnicodeWord) || [];
                }

                /*--------------------------------------------------------------------------*/

                /**
                 * Create a new pristine `lodash` function using the `context` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Util
                 * @param {Object} [context=root] The context object.
                 * @returns {Function} Returns a new `lodash` function.
                 * @example
                 *
                 * _.mixin({ 'foo': _.constant('foo') });
                 *
                 * var lodash = _.runInContext();
                 * lodash.mixin({ 'bar': lodash.constant('bar') });
                 *
                 * _.isFunction(_.foo);
                 * // => true
                 * _.isFunction(_.bar);
                 * // => false
                 *
                 * lodash.isFunction(lodash.foo);
                 * // => false
                 * lodash.isFunction(lodash.bar);
                 * // => true
                 *
                 * // Create a suped-up `defer` in Node.js.
                 * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
                 */
                var runInContext = (function runInContext(context) {
                    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

                    /** Built-in constructor references. */
                    var Array = context.Array,
                        Date = context.Date,
                        Error = context.Error,
                        Function = context.Function,
                        Math = context.Math,
                        Object = context.Object,
                        RegExp = context.RegExp,
                        String = context.String,
                        TypeError = context.TypeError;

                    /** Used for built-in method references. */
                    var arrayProto = Array.prototype,
                        funcProto = Function.prototype,
                        objectProto = Object.prototype;

                    /** Used to detect overreaching core-js shims. */
                    var coreJsData = context['__core-js_shared__'];

                    /** Used to resolve the decompiled source of functions. */
                    var funcToString = funcProto.toString;

                    /** Used to check objects for own properties. */
                    var hasOwnProperty = objectProto.hasOwnProperty;

                    /** Used to generate unique IDs. */
                    var idCounter = 0;

                    /** Used to detect methods masquerading as native. */
                    var maskSrcKey = (function () {
                        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                        return uid ? ('Symbol(src)_1.' + uid) : '';
                    }());

                    /**
                     * Used to resolve the
                     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                     * of values.
                     */
                    var nativeObjectToString = objectProto.toString;

                    /** Used to infer the `Object` constructor. */
                    var objectCtorString = funcToString.call(Object);

                    /** Used to restore the original `_` reference in `_.noConflict`. */
                    var oldDash = root._;

                    /** Used to detect if a method is native. */
                    var reIsNative = RegExp('^' +
                        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
                    );

                    /** Built-in value references. */
                    var Buffer = moduleExports ? context.Buffer : undefined,
                        Symbol = context.Symbol,
                        Uint8Array = context.Uint8Array,
                        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                        getPrototype = overArg(Object.getPrototypeOf, Object),
                        objectCreate = Object.create,
                        propertyIsEnumerable = objectProto.propertyIsEnumerable,
                        splice = arrayProto.splice,
                        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
                        symIterator = Symbol ? Symbol.iterator : undefined,
                        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                    var defineProperty = (function () {
                        try {
                            var func = getNative(Object, 'defineProperty');
                            func({}, '', {});
                            return func;
                        } catch (e) {
                        }
                    }());

                    /** Mocked built-ins. */
                    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                        ctxNow = Date && Date.now !== root.Date.now && Date.now,
                        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

                    /* Built-in method references for those with the same name as other `lodash` methods. */
                    var nativeCeil = Math.ceil,
                        nativeFloor = Math.floor,
                        nativeGetSymbols = Object.getOwnPropertySymbols,
                        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                        nativeIsFinite = context.isFinite,
                        nativeJoin = arrayProto.join,
                        nativeKeys = overArg(Object.keys, Object),
                        nativeMax = Math.max,
                        nativeMin = Math.min,
                        nativeNow = Date.now,
                        nativeParseInt = context.parseInt,
                        nativeRandom = Math.random,
                        nativeReverse = arrayProto.reverse;

                    /* Built-in method references that are verified to be native. */
                    var DataView = getNative(context, 'DataView'),
                        Map = getNative(context, 'Map'),
                        Promise = getNative(context, 'Promise'),
                        Set = getNative(context, 'Set'),
                        WeakMap = getNative(context, 'WeakMap'),
                        nativeCreate = getNative(Object, 'create');

                    /** Used to store function metadata. */
                    var metaMap = WeakMap && new WeakMap;

                    /** Used to lookup unminified function names. */
                    var realNames = {};

                    /** Used to detect maps, sets, and weakmaps. */
                    var dataViewCtorString = toSource(DataView),
                        mapCtorString = toSource(Map),
                        promiseCtorString = toSource(Promise),
                        setCtorString = toSource(Set),
                        weakMapCtorString = toSource(WeakMap);

                    /** Used to convert symbols to primitives and strings. */
                    var symbolProto = Symbol ? Symbol.prototype : undefined,
                        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                        symbolToString = symbolProto ? symbolProto.toString : undefined;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a `lodash` object which wraps `value` to enable implicit method
                     * chain sequences. Methods that operate on and return arrays, collections,
                     * and functions can be chained together. Methods that retrieve a single value
                     * or may return a primitive value will automatically end the chain sequence
                     * and return the unwrapped value. Otherwise, the value must be unwrapped
                     * with `_#value`.
                     *
                     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                     * enabled using `_.chain`.
                     *
                     * The execution of chained methods is lazy, that is, it's deferred until
                     * `_#value` is implicitly or explicitly called.
                     *
                     * Lazy evaluation allows several methods to support shortcut fusion.
                     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                     * the creation of intermediate arrays and can greatly reduce the number of
                     * iteratee executions. Sections of a chain sequence qualify for shortcut
                     * fusion if the section is applied to an array and iteratees accept only
                     * one argument. The heuristic for whether a section qualifies for shortcut
                     * fusion is subject to change.
                     *
                     * Chaining is supported in custom builds as long as the `_#value` method is
                     * directly or indirectly included in the build.
                     *
                     * In addition to lodash methods, wrappers have `Array` and `String` methods.
                     *
                     * The wrapper `Array` methods are:
                     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                     *
                     * The wrapper `String` methods are:
                     * `replace` and `split`
                     *
                     * The wrapper methods that support shortcut fusion are:
                     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                     *
                     * The chainable wrapper methods are:
                     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                     * `zipObject`, `zipObjectDeep`, and `zipWith`
                     *
                     * The wrapper methods that are **not** chainable by default are:
                     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                     * `upperFirst`, `value`, and `words`
                     *
                     * @name _
                     * @constructor
                     * @category Seq
                     * @param {*} value The value to wrap in a `lodash` instance.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * function square(n) {
     *   return n * n;
     * }
                     *
                     * var wrapped = _([1, 2, 3]);
                     *
                     * // Returns an unwrapped value.
                     * wrapped.reduce(_.add);
                     * // => 6
                     *
                     * // Returns a wrapped value.
                     * var squares = wrapped.map(square);
                     *
                     * _.isArray(squares);
                     * // => false
                     *
                     * _.isArray(squares.value());
                     * // => true
                     */
                    function lodash(value) {
                        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                            if (value instanceof LodashWrapper) {
                                return value;
                            }
                            if (hasOwnProperty.call(value, '__wrapped__')) {
                                return wrapperClone(value);
                            }
                        }
                        return new LodashWrapper(value);
                    }

                    /**
                     * The base implementation of `_.create` without support for assigning
                     * properties to the created object.
                     *
                     * @private
                     * @param {Object} proto The object to inherit from.
                     * @returns {Object} Returns the new object.
                     */
                    var baseCreate = (function () {
                        function object() {
                        }

                        return function (proto) {
                            if (!isObject(proto)) {
                                return {};
                            }
                            if (objectCreate) {
                                return objectCreate(proto);
                            }
                            object.prototype = proto;
                            var result = new object;
                            object.prototype = undefined;
                            return result;
                        };
                    }());

                    /**
                     * The function whose prototype chain sequence wrappers inherit from.
                     *
                     * @private
                     */
                    function baseLodash() {
                        // No operation performed.
                    }

                    /**
                     * The base constructor for creating `lodash` wrapper objects.
                     *
                     * @private
                     * @param {*} value The value to wrap.
                     * @param {boolean} [chainAll] Enable explicit method chain sequences.
                     */
                    function LodashWrapper(value, chainAll) {
                        this.__wrapped__ = value;
                        this.__actions__ = [];
                        this.__chain__ = !!chainAll;
                        this.__index__ = 0;
                        this.__values__ = undefined;
                    }

                    /**
                     * By default, the template delimiters used by lodash are like those in
                     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                     * following template settings to use alternative delimiters.
                     *
                     * @static
                     * @memberOf _
                     * @type {Object}
                     */
                    lodash.templateSettings = {

                        /**
                         * Used to detect `data` property values to be HTML-escaped.
                         *
                         * @memberOf _.templateSettings
                         * @type {RegExp}
                         */
                        'escape': reEscape,

                        /**
                         * Used to detect code to be evaluated.
                         *
                         * @memberOf _.templateSettings
                         * @type {RegExp}
                         */
                        'evaluate': reEvaluate,

                        /**
                         * Used to detect `data` property values to inject.
                         *
                         * @memberOf _.templateSettings
                         * @type {RegExp}
                         */
                        'interpolate': reInterpolate,

                        /**
                         * Used to reference the data object in the template text.
                         *
                         * @memberOf _.templateSettings
                         * @type {string}
                         */
                        'variable': '',

                        /**
                         * Used to import variables into the compiled template.
                         *
                         * @memberOf _.templateSettings
                         * @type {Object}
                         */
                        'imports': {

                            /**
                             * A reference to the `lodash` function.
                             *
                             * @memberOf _.templateSettings.imports
                             * @type {Function}
                             */
                            '_': lodash
                        }
                    };

                    // Ensure wrappers are instances of `baseLodash`.
                    lodash.prototype = baseLodash.prototype;
                    lodash.prototype.constructor = lodash;

                    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                    LodashWrapper.prototype.constructor = LodashWrapper;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                     *
                     * @private
                     * @constructor
                     * @param {*} value The value to wrap.
                     */
                    function LazyWrapper(value) {
                        this.__wrapped__ = value;
                        this.__actions__ = [];
                        this.__dir__ = 1;
                        this.__filtered__ = false;
                        this.__iteratees__ = [];
                        this.__takeCount__ = MAX_ARRAY_LENGTH;
                        this.__views__ = [];
                    }

                    /**
                     * Creates a clone of the lazy wrapper object.
                     *
                     * @private
                     * @name clone
                     * @memberOf LazyWrapper
                     * @returns {Object} Returns the cloned `LazyWrapper` object.
                     */
                    function lazyClone() {
                        var result = new LazyWrapper(this.__wrapped__);
                        result.__actions__ = copyArray(this.__actions__);
                        result.__dir__ = this.__dir__;
                        result.__filtered__ = this.__filtered__;
                        result.__iteratees__ = copyArray(this.__iteratees__);
                        result.__takeCount__ = this.__takeCount__;
                        result.__views__ = copyArray(this.__views__);
                        return result;
                    }

                    /**
                     * Reverses the direction of lazy iteration.
                     *
                     * @private
                     * @name reverse
                     * @memberOf LazyWrapper
                     * @returns {Object} Returns the new reversed `LazyWrapper` object.
                     */
                    function lazyReverse() {
                        if (this.__filtered__) {
                            var result = new LazyWrapper(this);
                            result.__dir__ = -1;
                            result.__filtered__ = true;
                        } else {
                            result = this.clone();
                            result.__dir__ *= -1;
                        }
                        return result;
                    }

                    /**
                     * Extracts the unwrapped value from its lazy wrapper.
                     *
                     * @private
                     * @name value
                     * @memberOf LazyWrapper
                     * @returns {*} Returns the unwrapped value.
                     */
                    function lazyValue() {
                        var array = this.__wrapped__.value(),
                            dir = this.__dir__,
                            isArr = isArray(array),
                            isRight = dir < 0,
                            arrLength = isArr ? array.length : 0,
                            view = getView(0, arrLength, this.__views__),
                            start = view.start,
                            end = view.end,
                            length = end - start,
                            index = isRight ? end : (start - 1),
                            iteratees = this.__iteratees__,
                            iterLength = iteratees.length,
                            resIndex = 0,
                            takeCount = nativeMin(length, this.__takeCount__);

                        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                            return baseWrapperValue(array, this.__actions__);
                        }
                        var result = [];

                        outer:
                            while (length-- && resIndex < takeCount) {
                                index += dir;

                                var iterIndex = -1,
                                    value = array[index];

                                while (++iterIndex < iterLength) {
                                    var data = iteratees[iterIndex],
                                        iteratee = data.iteratee,
                                        type = data.type,
                                        computed = iteratee(value);

                                    if (type == LAZY_MAP_FLAG) {
                                        value = computed;
                                    } else if (!computed) {
                                        if (type == LAZY_FILTER_FLAG) {
                                            continue outer;
                                        } else {
                                            break outer;
                                        }
                                    }
                                }
                                result[resIndex++] = value;
                            }
                        return result;
                    }

                    // Ensure `LazyWrapper` is an instance of `baseLodash`.
                    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                    LazyWrapper.prototype.constructor = LazyWrapper;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a hash object.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function Hash(entries) {
                        var index = -1,
                            length = entries == null ? 0 : entries.length;

                        this.clear();
                        while (++index < length) {
                            var entry = entries[index];
                            this.set(entry[0], entry[1]);
                        }
                    }

                    /**
                     * Removes all key-value entries from the hash.
                     *
                     * @private
                     * @name clear
                     * @memberOf Hash
                     */
                    function hashClear() {
                        this.__data__ = nativeCreate ? nativeCreate(null) : {};
                        this.size = 0;
                    }

                    /**
                     * Removes `key` and its value from the hash.
                     *
                     * @private
                     * @name delete
                     * @memberOf Hash
                     * @param {Object} hash The hash to modify.
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function hashDelete(key) {
                        var result = this.has(key) && delete this.__data__[key];
                        this.size -= result ? 1 : 0;
                        return result;
                    }

                    /**
                     * Gets the hash value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf Hash
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function hashGet(key) {
                        var data = this.__data__;
                        if (nativeCreate) {
                            var result = data[key];
                            return result === HASH_UNDEFINED ? undefined : result;
                        }
                        return hasOwnProperty.call(data, key) ? data[key] : undefined;
                    }

                    /**
                     * Checks if a hash value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf Hash
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function hashHas(key) {
                        var data = this.__data__;
                        return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
                    }

                    /**
                     * Sets the hash `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf Hash
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the hash instance.
                     */
                    function hashSet(key, value) {
                        var data = this.__data__;
                        this.size += this.has(key) ? 0 : 1;
                        data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                        return this;
                    }

                    // Add methods to `Hash`.
                    Hash.prototype.clear = hashClear;
                    Hash.prototype['delete'] = hashDelete;
                    Hash.prototype.get = hashGet;
                    Hash.prototype.has = hashHas;
                    Hash.prototype.set = hashSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an list cache object.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function ListCache(entries) {
                        var index = -1,
                            length = entries == null ? 0 : entries.length;

                        this.clear();
                        while (++index < length) {
                            var entry = entries[index];
                            this.set(entry[0], entry[1]);
                        }
                    }

                    /**
                     * Removes all key-value entries from the list cache.
                     *
                     * @private
                     * @name clear
                     * @memberOf ListCache
                     */
                    function listCacheClear() {
                        this.__data__ = [];
                        this.size = 0;
                    }

                    /**
                     * Removes `key` and its value from the list cache.
                     *
                     * @private
                     * @name delete
                     * @memberOf ListCache
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function listCacheDelete(key) {
                        var data = this.__data__,
                            index = assocIndexOf(data, key);

                        if (index < 0) {
                            return false;
                        }
                        var lastIndex = data.length - 1;
                        if (index == lastIndex) {
                            data.pop();
                        } else {
                            splice.call(data, index, 1);
                        }
                        --this.size;
                        return true;
                    }

                    /**
                     * Gets the list cache value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf ListCache
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function listCacheGet(key) {
                        var data = this.__data__,
                            index = assocIndexOf(data, key);

                        return index < 0 ? undefined : data[index][1];
                    }

                    /**
                     * Checks if a list cache value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf ListCache
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function listCacheHas(key) {
                        return assocIndexOf(this.__data__, key) > -1;
                    }

                    /**
                     * Sets the list cache `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf ListCache
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the list cache instance.
                     */
                    function listCacheSet(key, value) {
                        var data = this.__data__,
                            index = assocIndexOf(data, key);

                        if (index < 0) {
                            ++this.size;
                            data.push([key, value]);
                        } else {
                            data[index][1] = value;
                        }
                        return this;
                    }

                    // Add methods to `ListCache`.
                    ListCache.prototype.clear = listCacheClear;
                    ListCache.prototype['delete'] = listCacheDelete;
                    ListCache.prototype.get = listCacheGet;
                    ListCache.prototype.has = listCacheHas;
                    ListCache.prototype.set = listCacheSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a map cache object to store key-value pairs.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function MapCache(entries) {
                        var index = -1,
                            length = entries == null ? 0 : entries.length;

                        this.clear();
                        while (++index < length) {
                            var entry = entries[index];
                            this.set(entry[0], entry[1]);
                        }
                    }

                    /**
                     * Removes all key-value entries from the map.
                     *
                     * @private
                     * @name clear
                     * @memberOf MapCache
                     */
                    function mapCacheClear() {
                        this.size = 0;
                        this.__data__ = {
                            'hash': new Hash,
                            'map': new (Map || ListCache),
                            'string': new Hash
                        };
                    }

                    /**
                     * Removes `key` and its value from the map.
                     *
                     * @private
                     * @name delete
                     * @memberOf MapCache
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function mapCacheDelete(key) {
                        var result = getMapData(this, key)['delete'](key);
                        this.size -= result ? 1 : 0;
                        return result;
                    }

                    /**
                     * Gets the map value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf MapCache
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function mapCacheGet(key) {
                        return getMapData(this, key).get(key);
                    }

                    /**
                     * Checks if a map value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf MapCache
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function mapCacheHas(key) {
                        return getMapData(this, key).has(key);
                    }

                    /**
                     * Sets the map `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf MapCache
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the map cache instance.
                     */
                    function mapCacheSet(key, value) {
                        var data = getMapData(this, key),
                            size = data.size;

                        data.set(key, value);
                        this.size += data.size == size ? 0 : 1;
                        return this;
                    }

                    // Add methods to `MapCache`.
                    MapCache.prototype.clear = mapCacheClear;
                    MapCache.prototype['delete'] = mapCacheDelete;
                    MapCache.prototype.get = mapCacheGet;
                    MapCache.prototype.has = mapCacheHas;
                    MapCache.prototype.set = mapCacheSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     *
                     * Creates an array cache object to store unique values.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [values] The values to cache.
                     */
                    function SetCache(values) {
                        var index = -1,
                            length = values == null ? 0 : values.length;

                        this.__data__ = new MapCache;
                        while (++index < length) {
                            this.add(values[index]);
                        }
                    }

                    /**
                     * Adds `value` to the array cache.
                     *
                     * @private
                     * @name add
                     * @memberOf SetCache
                     * @alias push
                     * @param {*} value The value to cache.
                     * @returns {Object} Returns the cache instance.
                     */
                    function setCacheAdd(value) {
                        this.__data__.set(value, HASH_UNDEFINED);
                        return this;
                    }

                    /**
                     * Checks if `value` is in the array cache.
                     *
                     * @private
                     * @name has
                     * @memberOf SetCache
                     * @param {*} value The value to search for.
                     * @returns {number} Returns `true` if `value` is found, else `false`.
                     */
                    function setCacheHas(value) {
                        return this.__data__.has(value);
                    }

                    // Add methods to `SetCache`.
                    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                    SetCache.prototype.has = setCacheHas;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a stack cache object to store key-value pairs.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function Stack(entries) {
                        var data = this.__data__ = new ListCache(entries);
                        this.size = data.size;
                    }

                    /**
                     * Removes all key-value entries from the stack.
                     *
                     * @private
                     * @name clear
                     * @memberOf Stack
                     */
                    function stackClear() {
                        this.__data__ = new ListCache;
                        this.size = 0;
                    }

                    /**
                     * Removes `key` and its value from the stack.
                     *
                     * @private
                     * @name delete
                     * @memberOf Stack
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function stackDelete(key) {
                        var data = this.__data__,
                            result = data['delete'](key);

                        this.size = data.size;
                        return result;
                    }

                    /**
                     * Gets the stack value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf Stack
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function stackGet(key) {
                        return this.__data__.get(key);
                    }

                    /**
                     * Checks if a stack value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf Stack
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function stackHas(key) {
                        return this.__data__.has(key);
                    }

                    /**
                     * Sets the stack `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf Stack
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the stack cache instance.
                     */
                    function stackSet(key, value) {
                        var data = this.__data__;
                        if (data instanceof ListCache) {
                            var pairs = data.__data__;
                            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                                pairs.push([key, value]);
                                this.size = ++data.size;
                                return this;
                            }
                            data = this.__data__ = new MapCache(pairs);
                        }
                        data.set(key, value);
                        this.size = data.size;
                        return this;
                    }

                    // Add methods to `Stack`.
                    Stack.prototype.clear = stackClear;
                    Stack.prototype['delete'] = stackDelete;
                    Stack.prototype.get = stackGet;
                    Stack.prototype.has = stackHas;
                    Stack.prototype.set = stackSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an array of the enumerable property names of the array-like `value`.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @param {boolean} inherited Specify returning inherited property names.
                     * @returns {Array} Returns the array of property names.
                     */
                    function arrayLikeKeys(value, inherited) {
                        var isArr = isArray(value),
                            isArg = !isArr && isArguments(value),
                            isBuff = !isArr && !isArg && isBuffer(value),
                            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                            skipIndexes = isArr || isArg || isBuff || isType,
                            result = skipIndexes ? baseTimes(value.length, String) : [],
                            length = result.length;

                        for (var key in value) {
                            if ((inherited || hasOwnProperty.call(value, key)) &&
                                !(skipIndexes && (
                                    // Safari 9 has enumerable `arguments.length` in strict mode.
                                    key == 'length' ||
                                    // Node.js 0.10 has enumerable non-index properties on buffers.
                                    (isBuff && (key == 'offset' || key == 'parent')) ||
                                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                    (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                                    // Skip index properties.
                                    isIndex(key, length)
                                ))) {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * A specialized version of `_.sample` for arrays.
                     *
                     * @private
                     * @param {Array} array The array to sample.
                     * @returns {*} Returns the random element.
                     */
                    function arraySample(array) {
                        var length = array.length;
                        return length ? array[baseRandom(0, length - 1)] : undefined;
                    }

                    /**
                     * A specialized version of `_.sampleSize` for arrays.
                     *
                     * @private
                     * @param {Array} array The array to sample.
                     * @param {number} n The number of elements to sample.
                     * @returns {Array} Returns the random elements.
                     */
                    function arraySampleSize(array, n) {
                        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                    }

                    /**
                     * A specialized version of `_.shuffle` for arrays.
                     *
                     * @private
                     * @param {Array} array The array to shuffle.
                     * @returns {Array} Returns the new shuffled array.
                     */
                    function arrayShuffle(array) {
                        return shuffleSelf(copyArray(array));
                    }

                    /**
                     * This function is like `assignValue` except that it doesn't assign
                     * `undefined` values.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {string} key The key of the property to assign.
                     * @param {*} value The value to assign.
                     */
                    function assignMergeValue(object, key, value) {
                        if ((value !== undefined && !eq(object[key], value)) ||
                            (value === undefined && !(key in object))) {
                            baseAssignValue(object, key, value);
                        }
                    }

                    /**
                     * Assigns `value` to `key` of `object` if the existing value is not equivalent
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {string} key The key of the property to assign.
                     * @param {*} value The value to assign.
                     */
                    function assignValue(object, key, value) {
                        var objValue = object[key];
                        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                            (value === undefined && !(key in object))) {
                            baseAssignValue(object, key, value);
                        }
                    }

                    /**
                     * Gets the index at which the `key` is found in `array` of key-value pairs.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} key The key to search for.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function assocIndexOf(array, key) {
                        var length = array.length;
                        while (length--) {
                            if (eq(array[length][0], key)) {
                                return length;
                            }
                        }
                        return -1;
                    }

                    /**
                     * Aggregates elements of `collection` on `accumulator` with keys transformed
                     * by `iteratee` and values set by `setter`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} setter The function to set `accumulator` values.
                     * @param {Function} iteratee The iteratee to transform keys.
                     * @param {Object} accumulator The initial aggregated object.
                     * @returns {Function} Returns `accumulator`.
                     */
                    function baseAggregator(collection, setter, iteratee, accumulator) {
                        baseEach(collection, function (value, key, collection) {
                            setter(accumulator, value, iteratee(value), collection);
                        });
                        return accumulator;
                    }

                    /**
                     * The base implementation of `_.assign` without support for multiple sources
                     * or `customizer` functions.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @returns {Object} Returns `object`.
                     */
                    function baseAssign(object, source) {
                        return object && copyObject(source, keys(source), object);
                    }

                    /**
                     * The base implementation of `_.assignIn` without support for multiple sources
                     * or `customizer` functions.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @returns {Object} Returns `object`.
                     */
                    function baseAssignIn(object, source) {
                        return object && copyObject(source, keysIn(source), object);
                    }

                    /**
                     * The base implementation of `assignValue` and `assignMergeValue` without
                     * value checks.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {string} key The key of the property to assign.
                     * @param {*} value The value to assign.
                     */
                    function baseAssignValue(object, key, value) {
                        if (key == '__proto__' && defineProperty) {
                            defineProperty(object, key, {
                                'configurable': true,
                                'enumerable': true,
                                'value': value,
                                'writable': true
                            });
                        } else {
                            object[key] = value;
                        }
                    }

                    /**
                     * The base implementation of `_.at` without support for individual paths.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {string[]} paths The property paths to pick.
                     * @returns {Array} Returns the picked elements.
                     */
                    function baseAt(object, paths) {
                        var index = -1,
                            length = paths.length,
                            result = Array(length),
                            skip = object == null;

                        while (++index < length) {
                            result[index] = skip ? undefined : get(object, paths[index]);
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.clamp` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {number} number The number to clamp.
                     * @param {number} [lower] The lower bound.
                     * @param {number} upper The upper bound.
                     * @returns {number} Returns the clamped number.
                     */
                    function baseClamp(number, lower, upper) {
                        if (number === number) {
                            if (upper !== undefined) {
                                number = number <= upper ? number : upper;
                            }
                            if (lower !== undefined) {
                                number = number >= lower ? number : lower;
                            }
                        }
                        return number;
                    }

                    /**
                     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                     * traversed objects.
                     *
                     * @private
                     * @param {*} value The value to clone.
                     * @param {boolean} bitmask The bitmask flags.
                     *  1 - Deep clone
                     *  2 - Flatten inherited properties
                     *  4 - Clone symbols
                     * @param {Function} [customizer] The function to customize cloning.
                     * @param {string} [key] The key of `value`.
                     * @param {Object} [object] The parent object of `value`.
                     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                     * @returns {*} Returns the cloned value.
                     */
                    function baseClone(value, bitmask, customizer, key, object, stack) {
                        var result,
                            isDeep = bitmask & CLONE_DEEP_FLAG,
                            isFlat = bitmask & CLONE_FLAT_FLAG,
                            isFull = bitmask & CLONE_SYMBOLS_FLAG;

                        if (customizer) {
                            result = object ? customizer(value, key, object, stack) : customizer(value);
                        }
                        if (result !== undefined) {
                            return result;
                        }
                        if (!isObject(value)) {
                            return value;
                        }
                        var isArr = isArray(value);
                        if (isArr) {
                            result = initCloneArray(value);
                            if (!isDeep) {
                                return copyArray(value, result);
                            }
                        } else {
                            var tag = getTag(value),
                                isFunc = tag == funcTag || tag == genTag;

                            if (isBuffer(value)) {
                                return cloneBuffer(value, isDeep);
                            }
                            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                                result = (isFlat || isFunc) ? {} : initCloneObject(value);
                                if (!isDeep) {
                                    return isFlat
                                        ? copySymbolsIn(value, baseAssignIn(result, value))
                                        : copySymbols(value, baseAssign(result, value));
                                }
                            } else {
                                if (!cloneableTags[tag]) {
                                    return object ? value : {};
                                }
                                result = initCloneByTag(value, tag, baseClone, isDeep);
                            }
                        }
                        // Check for circular references and return its corresponding clone.
                        stack || (stack = new Stack);
                        var stacked = stack.get(value);
                        if (stacked) {
                            return stacked;
                        }
                        stack.set(value, result);

                        var keysFunc = isFull
                            ? (isFlat ? getAllKeysIn : getAllKeys)
                            : (isFlat ? keysIn : keys);

                        var props = isArr ? undefined : keysFunc(value);
                        arrayEach(props || value, function (subValue, key) {
                            if (props) {
                                key = subValue;
                                subValue = value[key];
                            }
                            // Recursively populate clone (susceptible to call stack limits).
                            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.conforms` which doesn't clone `source`.
                     *
                     * @private
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {Function} Returns the new spec function.
                     */
                    function baseConforms(source) {
                        var props = keys(source);
                        return function (object) {
                            return baseConformsTo(object, source, props);
                        };
                    }

                    /**
                     * The base implementation of `_.conformsTo` which accepts `props` to check.
                     *
                     * @private
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                     */
                    function baseConformsTo(object, source, props) {
                        var length = props.length;
                        if (object == null) {
                            return !length;
                        }
                        object = Object(object);
                        while (length--) {
                            var key = props[length],
                                predicate = source[key],
                                value = object[key];

                            if ((value === undefined && !(key in object)) || !predicate(value)) {
                                return false;
                            }
                        }
                        return true;
                    }

                    /**
                     * The base implementation of `_.delay` and `_.defer` which accepts `args`
                     * to provide to `func`.
                     *
                     * @private
                     * @param {Function} func The function to delay.
                     * @param {number} wait The number of milliseconds to delay invocation.
                     * @param {Array} args The arguments to provide to `func`.
                     * @returns {number|Object} Returns the timer id or timeout object.
                     */
                    function baseDelay(func, wait, args) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        return setTimeout(function () {
                            func.apply(undefined, args);
                        }, wait);
                    }

                    /**
                     * The base implementation of methods like `_.difference` without support
                     * for excluding multiple arrays or iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Array} values The values to exclude.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     */
                    function baseDifference(array, values, iteratee, comparator) {
                        var index = -1,
                            includes = arrayIncludes,
                            isCommon = true,
                            length = array.length,
                            result = [],
                            valuesLength = values.length;

                        if (!length) {
                            return result;
                        }
                        if (iteratee) {
                            values = arrayMap(values, baseUnary(iteratee));
                        }
                        if (comparator) {
                            includes = arrayIncludesWith;
                            isCommon = false;
                        }
                        else if (values.length >= LARGE_ARRAY_SIZE) {
                            includes = cacheHas;
                            isCommon = false;
                            values = new SetCache(values);
                        }
                        outer:
                            while (++index < length) {
                                var value = array[index],
                                    computed = iteratee == null ? value : iteratee(value);

                                value = (comparator || value !== 0) ? value : 0;
                                if (isCommon && computed === computed) {
                                    var valuesIndex = valuesLength;
                                    while (valuesIndex--) {
                                        if (values[valuesIndex] === computed) {
                                            continue outer;
                                        }
                                    }
                                    result.push(value);
                                }
                                else if (!includes(values, computed, comparator)) {
                                    result.push(value);
                                }
                            }
                        return result;
                    }

                    /**
                     * The base implementation of `_.forEach` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     */
                    var baseEach = createBaseEach(baseForOwn);

                    /**
                     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     */
                    var baseEachRight = createBaseEach(baseForOwnRight, true);

                    /**
                     * The base implementation of `_.every` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if all elements pass the predicate check,
                     *  else `false`
                     */
                    function baseEvery(collection, predicate) {
                        var result = true;
                        baseEach(collection, function (value, index, collection) {
                            result = !!predicate(value, index, collection);
                            return result;
                        });
                        return result;
                    }

                    /**
                     * The base implementation of methods like `_.max` and `_.min` which accepts a
                     * `comparator` to determine the extremum value.
                     *
                     * @private
                     * @param {Array} array The array to iterate over.
                     * @param {Function} iteratee The iteratee invoked per iteration.
                     * @param {Function} comparator The comparator used to compare values.
                     * @returns {*} Returns the extremum value.
                     */
                    function baseExtremum(array, iteratee, comparator) {
                        var index = -1,
                            length = array.length;

                        while (++index < length) {
                            var value = array[index],
                                current = iteratee(value);

                            if (current != null && (computed === undefined
                                        ? (current === current && !isSymbol(current))
                                        : comparator(current, computed)
                                )) {
                                var computed = current,
                                    result = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.fill` without an iteratee call guard.
                     *
                     * @private
                     * @param {Array} array The array to fill.
                     * @param {*} value The value to fill `array` with.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns `array`.
                     */
                    function baseFill(array, value, start, end) {
                        var length = array.length;

                        start = toInteger(start);
                        if (start < 0) {
                            start = -start > length ? 0 : (length + start);
                        }
                        end = (end === undefined || end > length) ? length : toInteger(end);
                        if (end < 0) {
                            end += length;
                        }
                        end = start > end ? 0 : toLength(end);
                        while (start < end) {
                            array[start++] = value;
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.filter` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     */
                    function baseFilter(collection, predicate) {
                        var result = [];
                        baseEach(collection, function (value, index, collection) {
                            if (predicate(value, index, collection)) {
                                result.push(value);
                            }
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.flatten` with support for restricting flattening.
                     *
                     * @private
                     * @param {Array} array The array to flatten.
                     * @param {number} depth The maximum recursion depth.
                     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                     * @param {Array} [result=[]] The initial result value.
                     * @returns {Array} Returns the new flattened array.
                     */
                    function baseFlatten(array, depth, predicate, isStrict, result) {
                        var index = -1,
                            length = array.length;

                        predicate || (predicate = isFlattenable);
                        result || (result = []);

                        while (++index < length) {
                            var value = array[index];
                            if (depth > 0 && predicate(value)) {
                                if (depth > 1) {
                                    // Recursively flatten arrays (susceptible to call stack limits).
                                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                                } else {
                                    arrayPush(result, value);
                                }
                            } else if (!isStrict) {
                                result[result.length] = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `baseForOwn` which iterates over `object`
                     * properties returned by `keysFunc` and invokes `iteratee` for each property.
                     * Iteratee functions may exit iteration early by explicitly returning `false`.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {Function} keysFunc The function to get the keys of `object`.
                     * @returns {Object} Returns `object`.
                     */
                    var baseFor = createBaseFor();

                    /**
                     * This function is like `baseFor` except that it iterates over properties
                     * in the opposite order.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {Function} keysFunc The function to get the keys of `object`.
                     * @returns {Object} Returns `object`.
                     */
                    var baseForRight = createBaseFor(true);

                    /**
                     * The base implementation of `_.forOwn` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     */
                    function baseForOwn(object, iteratee) {
                        return object && baseFor(object, iteratee, keys);
                    }

                    /**
                     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     */
                    function baseForOwnRight(object, iteratee) {
                        return object && baseForRight(object, iteratee, keys);
                    }

                    /**
                     * The base implementation of `_.functions` which creates an array of
                     * `object` function property names filtered from `props`.
                     *
                     * @private
                     * @param {Object} object The object to inspect.
                     * @param {Array} props The property names to filter.
                     * @returns {Array} Returns the function names.
                     */
                    function baseFunctions(object, props) {
                        return arrayFilter(props, function (key) {
                            return isFunction(object[key]);
                        });
                    }

                    /**
                     * The base implementation of `_.get` without support for default values.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the property to get.
                     * @returns {*} Returns the resolved value.
                     */
                    function baseGet(object, path) {
                        path = castPath(path, object);

                        var index = 0,
                            length = path.length;

                        while (object != null && index < length) {
                            object = object[toKey(path[index++])];
                        }
                        return (index && index == length) ? object : undefined;
                    }

                    /**
                     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                     * symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Function} keysFunc The function to get the keys of `object`.
                     * @param {Function} symbolsFunc The function to get the symbols of `object`.
                     * @returns {Array} Returns the array of property names and symbols.
                     */
                    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                        var result = keysFunc(object);
                        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                    }

                    /**
                     * The base implementation of `getTag` without fallbacks for buggy environments.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @returns {string} Returns the `toStringTag`.
                     */
                    function baseGetTag(value) {
                        if (value == null) {
                            return value === undefined ? undefinedTag : nullTag;
                        }
                        return (symToStringTag && symToStringTag in Object(value))
                            ? getRawTag(value)
                            : objectToString(value);
                    }

                    /**
                     * The base implementation of `_.gt` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is greater than `other`,
                     *  else `false`.
                     */
                    function baseGt(value, other) {
                        return value > other;
                    }

                    /**
                     * The base implementation of `_.has` without support for deep paths.
                     *
                     * @private
                     * @param {Object} [object] The object to query.
                     * @param {Array|string} key The key to check.
                     * @returns {boolean} Returns `true` if `key` exists, else `false`.
                     */
                    function baseHas(object, key) {
                        return object != null && hasOwnProperty.call(object, key);
                    }

                    /**
                     * The base implementation of `_.hasIn` without support for deep paths.
                     *
                     * @private
                     * @param {Object} [object] The object to query.
                     * @param {Array|string} key The key to check.
                     * @returns {boolean} Returns `true` if `key` exists, else `false`.
                     */
                    function baseHasIn(object, key) {
                        return object != null && key in Object(object);
                    }

                    /**
                     * The base implementation of `_.inRange` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {number} number The number to check.
                     * @param {number} start The start of the range.
                     * @param {number} end The end of the range.
                     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                     */
                    function baseInRange(number, start, end) {
                        return number >= nativeMin(start, end) && number < nativeMax(start, end);
                    }

                    /**
                     * The base implementation of methods like `_.intersection`, without support
                     * for iteratee shorthands, that accepts an array of arrays to inspect.
                     *
                     * @private
                     * @param {Array} arrays The arrays to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of shared values.
                     */
                    function baseIntersection(arrays, iteratee, comparator) {
                        var includes = comparator ? arrayIncludesWith : arrayIncludes,
                            length = arrays[0].length,
                            othLength = arrays.length,
                            othIndex = othLength,
                            caches = Array(othLength),
                            maxLength = Infinity,
                            result = [];

                        while (othIndex--) {
                            var array = arrays[othIndex];
                            if (othIndex && iteratee) {
                                array = arrayMap(array, baseUnary(iteratee));
                            }
                            maxLength = nativeMin(array.length, maxLength);
                            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
                                ? new SetCache(othIndex && array)
                                : undefined;
                        }
                        array = arrays[0];

                        var index = -1,
                            seen = caches[0];

                        outer:
                            while (++index < length && result.length < maxLength) {
                                var value = array[index],
                                    computed = iteratee ? iteratee(value) : value;

                                value = (comparator || value !== 0) ? value : 0;
                                if (!(seen
                                            ? cacheHas(seen, computed)
                                            : includes(result, computed, comparator)
                                    )) {
                                    othIndex = othLength;
                                    while (--othIndex) {
                                        var cache = caches[othIndex];
                                        if (!(cache
                                                ? cacheHas(cache, computed)
                                                : includes(arrays[othIndex], computed, comparator))
                                        ) {
                                            continue outer;
                                        }
                                    }
                                    if (seen) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                            }
                        return result;
                    }

                    /**
                     * The base implementation of `_.invert` and `_.invertBy` which inverts
                     * `object` with values transformed by `iteratee` and set by `setter`.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} setter The function to set `accumulator` values.
                     * @param {Function} iteratee The iteratee to transform values.
                     * @param {Object} accumulator The initial inverted object.
                     * @returns {Function} Returns `accumulator`.
                     */
                    function baseInverter(object, setter, iteratee, accumulator) {
                        baseForOwn(object, function (value, key, object) {
                            setter(accumulator, iteratee(value), key, object);
                        });
                        return accumulator;
                    }

                    /**
                     * The base implementation of `_.invoke` without support for individual
                     * method arguments.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the method to invoke.
                     * @param {Array} args The arguments to invoke the method with.
                     * @returns {*} Returns the result of the invoked method.
                     */
                    function baseInvoke(object, path, args) {
                        path = castPath(path, object);
                        object = parent(object, path);
                        var func = object == null ? object : object[toKey(last(path))];
                        return func == null ? undefined : apply(func, object, args);
                    }

                    /**
                     * The base implementation of `_.isArguments`.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                     */
                    function baseIsArguments(value) {
                        return isObjectLike(value) && baseGetTag(value) == argsTag;
                    }

                    /**
                     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                     */
                    function baseIsArrayBuffer(value) {
                        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                    }

                    /**
                     * The base implementation of `_.isDate` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                     */
                    function baseIsDate(value) {
                        return isObjectLike(value) && baseGetTag(value) == dateTag;
                    }

                    /**
                     * The base implementation of `_.isEqual` which supports partial comparisons
                     * and tracks traversed objects.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @param {boolean} bitmask The bitmask flags.
                     *  1 - Unordered comparison
                     *  2 - Partial comparison
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     */
                    function baseIsEqual(value, other, bitmask, customizer, stack) {
                        if (value === other) {
                            return true;
                        }
                        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                            return value !== value && other !== other;
                        }
                        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                    }

                    /**
                     * A specialized version of `baseIsEqual` for arrays and objects which performs
                     * deep comparisons and tracks traversed objects enabling objects with circular
                     * references to be compared.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                     */
                    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                        var objIsArr = isArray(object),
                            othIsArr = isArray(other),
                            objTag = objIsArr ? arrayTag : getTag(object),
                            othTag = othIsArr ? arrayTag : getTag(other);

                        objTag = objTag == argsTag ? objectTag : objTag;
                        othTag = othTag == argsTag ? objectTag : othTag;

                        var objIsObj = objTag == objectTag,
                            othIsObj = othTag == objectTag,
                            isSameTag = objTag == othTag;

                        if (isSameTag && isBuffer(object)) {
                            if (!isBuffer(other)) {
                                return false;
                            }
                            objIsArr = true;
                            objIsObj = false;
                        }
                        if (isSameTag && !objIsObj) {
                            stack || (stack = new Stack);
                            return (objIsArr || isTypedArray(object))
                                ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                                : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                        }
                        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                            if (objIsWrapped || othIsWrapped) {
                                var objUnwrapped = objIsWrapped ? object.value() : object,
                                    othUnwrapped = othIsWrapped ? other.value() : other;

                                stack || (stack = new Stack);
                                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                            }
                        }
                        if (!isSameTag) {
                            return false;
                        }
                        stack || (stack = new Stack);
                        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                    }

                    /**
                     * The base implementation of `_.isMap` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                     */
                    function baseIsMap(value) {
                        return isObjectLike(value) && getTag(value) == mapTag;
                    }

                    /**
                     * The base implementation of `_.isMatch` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property values to match.
                     * @param {Array} matchData The property names, values, and compare flags to match.
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                     */
                    function baseIsMatch(object, source, matchData, customizer) {
                        var index = matchData.length,
                            length = index,
                            noCustomizer = !customizer;

                        if (object == null) {
                            return !length;
                        }
                        object = Object(object);
                        while (index--) {
                            var data = matchData[index];
                            if ((noCustomizer && data[2])
                                    ? data[1] !== object[data[0]]
                                    : !(data[0] in object)
                            ) {
                                return false;
                            }
                        }
                        while (++index < length) {
                            data = matchData[index];
                            var key = data[0],
                                objValue = object[key],
                                srcValue = data[1];

                            if (noCustomizer && data[2]) {
                                if (objValue === undefined && !(key in object)) {
                                    return false;
                                }
                            } else {
                                var stack = new Stack;
                                if (customizer) {
                                    var result = customizer(objValue, srcValue, key, object, source, stack);
                                }
                                if (!(result === undefined
                                            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                                            : result
                                    )) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }

                    /**
                     * The base implementation of `_.isNative` without bad shim checks.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a native function,
                     *  else `false`.
                     */
                    function baseIsNative(value) {
                        if (!isObject(value) || isMasked(value)) {
                            return false;
                        }
                        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                        return pattern.test(toSource(value));
                    }

                    /**
                     * The base implementation of `_.isRegExp` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                     */
                    function baseIsRegExp(value) {
                        return isObjectLike(value) && baseGetTag(value) == regexpTag;
                    }

                    /**
                     * The base implementation of `_.isSet` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                     */
                    function baseIsSet(value) {
                        return isObjectLike(value) && getTag(value) == setTag;
                    }

                    /**
                     * The base implementation of `_.isTypedArray` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                     */
                    function baseIsTypedArray(value) {
                        return isObjectLike(value) &&
                            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                    }

                    /**
                     * The base implementation of `_.iteratee`.
                     *
                     * @private
                     * @param {*} [value=_.identity] The value to convert to an iteratee.
                     * @returns {Function} Returns the iteratee.
                     */
                    function baseIteratee(value) {
                        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                        if (typeof value == 'function') {
                            return value;
                        }
                        if (value == null) {
                            return identity;
                        }
                        if (typeof value == 'object') {
                            return isArray(value)
                                ? baseMatchesProperty(value[0], value[1])
                                : baseMatches(value);
                        }
                        return property(value);
                    }

                    /**
                     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     */
                    function baseKeys(object) {
                        if (!isPrototype(object)) {
                            return nativeKeys(object);
                        }
                        var result = [];
                        for (var key in Object(object)) {
                            if (hasOwnProperty.call(object, key) && key != 'constructor') {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     */
                    function baseKeysIn(object) {
                        if (!isObject(object)) {
                            return nativeKeysIn(object);
                        }
                        var isProto = isPrototype(object),
                            result = [];

                        for (var key in object) {
                            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.lt` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is less than `other`,
                     *  else `false`.
                     */
                    function baseLt(value, other) {
                        return value < other;
                    }

                    /**
                     * The base implementation of `_.map` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns the new mapped array.
                     */
                    function baseMap(collection, iteratee) {
                        var index = -1,
                            result = isArrayLike(collection) ? Array(collection.length) : [];

                        baseEach(collection, function (value, key, collection) {
                            result[++index] = iteratee(value, key, collection);
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.matches` which doesn't clone `source`.
                     *
                     * @private
                     * @param {Object} source The object of property values to match.
                     * @returns {Function} Returns the new spec function.
                     */
                    function baseMatches(source) {
                        var matchData = getMatchData(source);
                        if (matchData.length == 1 && matchData[0][2]) {
                            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                        }
                        return function (object) {
                            return object === source || baseIsMatch(object, source, matchData);
                        };
                    }

                    /**
                     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                     *
                     * @private
                     * @param {string} path The path of the property to get.
                     * @param {*} srcValue The value to match.
                     * @returns {Function} Returns the new spec function.
                     */
                    function baseMatchesProperty(path, srcValue) {
                        if (isKey(path) && isStrictComparable(srcValue)) {
                            return matchesStrictComparable(toKey(path), srcValue);
                        }
                        return function (object) {
                            var objValue = get(object, path);
                            return (objValue === undefined && objValue === srcValue)
                                ? hasIn(object, path)
                                : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                        };
                    }

                    /**
                     * The base implementation of `_.merge` without support for multiple sources.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @param {number} srcIndex The index of `source`.
                     * @param {Function} [customizer] The function to customize merged values.
                     * @param {Object} [stack] Tracks traversed source values and their merged
                     *  counterparts.
                     */
                    function baseMerge(object, source, srcIndex, customizer, stack) {
                        if (object === source) {
                            return;
                        }
                        baseFor(source, function (srcValue, key) {
                            if (isObject(srcValue)) {
                                stack || (stack = new Stack);
                                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                            }
                            else {
                                var newValue = customizer
                                    ? customizer(object[key], srcValue, (key + ''), object, source, stack)
                                    : undefined;

                                if (newValue === undefined) {
                                    newValue = srcValue;
                                }
                                assignMergeValue(object, key, newValue);
                            }
                        }, keysIn);
                    }

                    /**
                     * A specialized version of `baseMerge` for arrays and objects which performs
                     * deep merges and tracks traversed objects enabling objects with circular
                     * references to be merged.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @param {string} key The key of the value to merge.
                     * @param {number} srcIndex The index of `source`.
                     * @param {Function} mergeFunc The function to merge values.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @param {Object} [stack] Tracks traversed source values and their merged
                     *  counterparts.
                     */
                    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                        var objValue = object[key],
                            srcValue = source[key],
                            stacked = stack.get(srcValue);

                        if (stacked) {
                            assignMergeValue(object, key, stacked);
                            return;
                        }
                        var newValue = customizer
                            ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                            : undefined;

                        var isCommon = newValue === undefined;

                        if (isCommon) {
                            var isArr = isArray(srcValue),
                                isBuff = !isArr && isBuffer(srcValue),
                                isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                            newValue = srcValue;
                            if (isArr || isBuff || isTyped) {
                                if (isArray(objValue)) {
                                    newValue = objValue;
                                }
                                else if (isArrayLikeObject(objValue)) {
                                    newValue = copyArray(objValue);
                                }
                                else if (isBuff) {
                                    isCommon = false;
                                    newValue = cloneBuffer(srcValue, true);
                                }
                                else if (isTyped) {
                                    isCommon = false;
                                    newValue = cloneTypedArray(srcValue, true);
                                }
                                else {
                                    newValue = [];
                                }
                            }
                            else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                                newValue = objValue;
                                if (isArguments(objValue)) {
                                    newValue = toPlainObject(objValue);
                                }
                                else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
                                    newValue = initCloneObject(srcValue);
                                }
                            }
                            else {
                                isCommon = false;
                            }
                        }
                        if (isCommon) {
                            // Recursively merge objects and arrays (susceptible to call stack limits).
                            stack.set(srcValue, newValue);
                            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                            stack['delete'](srcValue);
                        }
                        assignMergeValue(object, key, newValue);
                    }

                    /**
                     * The base implementation of `_.nth` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {Array} array The array to query.
                     * @param {number} n The index of the element to return.
                     * @returns {*} Returns the nth element of `array`.
                     */
                    function baseNth(array, n) {
                        var length = array.length;
                        if (!length) {
                            return;
                        }
                        n += n < 0 ? length : 0;
                        return isIndex(n, length) ? array[n] : undefined;
                    }

                    /**
                     * The base implementation of `_.orderBy` without param guards.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                     * @param {string[]} orders The sort orders of `iteratees`.
                     * @returns {Array} Returns the new sorted array.
                     */
                    function baseOrderBy(collection, iteratees, orders) {
                        var index = -1;
                        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

                        var result = baseMap(collection, function (value, key, collection) {
                            var criteria = arrayMap(iteratees, function (iteratee) {
                                return iteratee(value);
                            });
                            return {'criteria': criteria, 'index': ++index, 'value': value};
                        });

                        return baseSortBy(result, function (object, other) {
                            return compareMultiple(object, other, orders);
                        });
                    }

                    /**
                     * The base implementation of `_.pick` without support for individual
                     * property identifiers.
                     *
                     * @private
                     * @param {Object} object The source object.
                     * @param {string[]} paths The property paths to pick.
                     * @returns {Object} Returns the new object.
                     */
                    function basePick(object, paths) {
                        return basePickBy(object, paths, function (value, path) {
                            return hasIn(object, path);
                        });
                    }

                    /**
                     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The source object.
                     * @param {string[]} paths The property paths to pick.
                     * @param {Function} predicate The function invoked per property.
                     * @returns {Object} Returns the new object.
                     */
                    function basePickBy(object, paths, predicate) {
                        var index = -1,
                            length = paths.length,
                            result = {};

                        while (++index < length) {
                            var path = paths[index],
                                value = baseGet(object, path);

                            if (predicate(value, path)) {
                                baseSet(result, castPath(path, object), value);
                            }
                        }
                        return result;
                    }

                    /**
                     * A specialized version of `baseProperty` which supports deep paths.
                     *
                     * @private
                     * @param {Array|string} path The path of the property to get.
                     * @returns {Function} Returns the new accessor function.
                     */
                    function basePropertyDeep(path) {
                        return function (object) {
                            return baseGet(object, path);
                        };
                    }

                    /**
                     * The base implementation of `_.pullAllBy` without support for iteratee
                     * shorthands.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns `array`.
                     */
                    function basePullAll(array, values, iteratee, comparator) {
                        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                            index = -1,
                            length = values.length,
                            seen = array;

                        if (array === values) {
                            values = copyArray(values);
                        }
                        if (iteratee) {
                            seen = arrayMap(array, baseUnary(iteratee));
                        }
                        while (++index < length) {
                            var fromIndex = 0,
                                value = values[index],
                                computed = iteratee ? iteratee(value) : value;

                            while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                                if (seen !== array) {
                                    splice.call(seen, fromIndex, 1);
                                }
                                splice.call(array, fromIndex, 1);
                            }
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.pullAt` without support for individual
                     * indexes or capturing the removed elements.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {number[]} indexes The indexes of elements to remove.
                     * @returns {Array} Returns `array`.
                     */
                    function basePullAt(array, indexes) {
                        var length = array ? indexes.length : 0,
                            lastIndex = length - 1;

                        while (length--) {
                            var index = indexes[length];
                            if (length == lastIndex || index !== previous) {
                                var previous = index;
                                if (isIndex(index)) {
                                    splice.call(array, index, 1);
                                } else {
                                    baseUnset(array, index);
                                }
                            }
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.random` without support for returning
                     * floating-point numbers.
                     *
                     * @private
                     * @param {number} lower The lower bound.
                     * @param {number} upper The upper bound.
                     * @returns {number} Returns the random number.
                     */
                    function baseRandom(lower, upper) {
                        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                    }

                    /**
                     * The base implementation of `_.range` and `_.rangeRight` which doesn't
                     * coerce arguments.
                     *
                     * @private
                     * @param {number} start The start of the range.
                     * @param {number} end The end of the range.
                     * @param {number} step The value to increment or decrement by.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Array} Returns the range of numbers.
                     */
                    function baseRange(start, end, step, fromRight) {
                        var index = -1,
                            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                            result = Array(length);

                        while (length--) {
                            result[fromRight ? length : ++index] = start;
                            start += step;
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.repeat` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {string} string The string to repeat.
                     * @param {number} n The number of times to repeat the string.
                     * @returns {string} Returns the repeated string.
                     */
                    function baseRepeat(string, n) {
                        var result = '';
                        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                            return result;
                        }
                        // Leverage the exponentiation by squaring algorithm for a faster repeat.
                        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                        do {
                            if (n % 2) {
                                result += string;
                            }
                            n = nativeFloor(n / 2);
                            if (n) {
                                string += string;
                            }
                        } while (n);

                        return result;
                    }

                    /**
                     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                     *
                     * @private
                     * @param {Function} func The function to apply a rest parameter to.
                     * @param {number} [start=func.length-1] The start position of the rest parameter.
                     * @returns {Function} Returns the new function.
                     */
                    function baseRest(func, start) {
                        return setToString(overRest(func, start, identity), func + '');
                    }

                    /**
                     * The base implementation of `_.sample`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to sample.
                     * @returns {*} Returns the random element.
                     */
                    function baseSample(collection) {
                        return arraySample(values(collection));
                    }

                    /**
                     * The base implementation of `_.sampleSize` without param guards.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to sample.
                     * @param {number} n The number of elements to sample.
                     * @returns {Array} Returns the random elements.
                     */
                    function baseSampleSize(collection, n) {
                        var array = values(collection);
                        return shuffleSelf(array, baseClamp(n, 0, array.length));
                    }

                    /**
                     * The base implementation of `_.set`.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {*} value The value to set.
                     * @param {Function} [customizer] The function to customize path creation.
                     * @returns {Object} Returns `object`.
                     */
                    function baseSet(object, path, value, customizer) {
                        if (!isObject(object)) {
                            return object;
                        }
                        path = castPath(path, object);

                        var index = -1,
                            length = path.length,
                            lastIndex = length - 1,
                            nested = object;

                        while (nested != null && ++index < length) {
                            var key = toKey(path[index]),
                                newValue = value;

                            if (index != lastIndex) {
                                var objValue = nested[key];
                                newValue = customizer ? customizer(objValue, key, nested) : undefined;
                                if (newValue === undefined) {
                                    newValue = isObject(objValue)
                                        ? objValue
                                        : (isIndex(path[index + 1]) ? [] : {});
                                }
                            }
                            assignValue(nested, key, newValue);
                            nested = nested[key];
                        }
                        return object;
                    }

                    /**
                     * The base implementation of `setData` without support for hot loop shorting.
                     *
                     * @private
                     * @param {Function} func The function to associate metadata with.
                     * @param {*} data The metadata.
                     * @returns {Function} Returns `func`.
                     */
                    var baseSetData = !metaMap ? identity : function (func, data) {
                        metaMap.set(func, data);
                        return func;
                    };

                    /**
                     * The base implementation of `setToString` without support for hot loop shorting.
                     *
                     * @private
                     * @param {Function} func The function to modify.
                     * @param {Function} string The `toString` result.
                     * @returns {Function} Returns `func`.
                     */
                    var baseSetToString = !defineProperty ? identity : function (func, string) {
                        return defineProperty(func, 'toString', {
                            'configurable': true,
                            'enumerable': false,
                            'value': constant(string),
                            'writable': true
                        });
                    };

                    /**
                     * The base implementation of `_.shuffle`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to shuffle.
                     * @returns {Array} Returns the new shuffled array.
                     */
                    function baseShuffle(collection) {
                        return shuffleSelf(values(collection));
                    }

                    /**
                     * The base implementation of `_.slice` without an iteratee call guard.
                     *
                     * @private
                     * @param {Array} array The array to slice.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns the slice of `array`.
                     */
                    function baseSlice(array, start, end) {
                        var index = -1,
                            length = array.length;

                        if (start < 0) {
                            start = -start > length ? 0 : (length + start);
                        }
                        end = end > length ? length : end;
                        if (end < 0) {
                            end += length;
                        }
                        length = start > end ? 0 : ((end - start) >>> 0);
                        start >>>= 0;

                        var result = Array(length);
                        while (++index < length) {
                            result[index] = array[index + start];
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.some` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if any element passes the predicate check,
                     *  else `false`.
                     */
                    function baseSome(collection, predicate) {
                        var result;

                        baseEach(collection, function (value, index, collection) {
                            result = predicate(value, index, collection);
                            return !result;
                        });
                        return !!result;
                    }

                    /**
                     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                     * performs a binary search of `array` to determine the index at which `value`
                     * should be inserted into `array` in order to maintain its sort order.
                     *
                     * @private
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {boolean} [retHighest] Specify returning the highest qualified index.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     */
                    function baseSortedIndex(array, value, retHighest) {
                        var low = 0,
                            high = array == null ? low : array.length;

                        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                            while (low < high) {
                                var mid = (low + high) >>> 1,
                                    computed = array[mid];

                                if (computed !== null && !isSymbol(computed) &&
                                    (retHighest ? (computed <= value) : (computed < value))) {
                                    low = mid + 1;
                                } else {
                                    high = mid;
                                }
                            }
                            return high;
                        }
                        return baseSortedIndexBy(array, value, identity, retHighest);
                    }

                    /**
                     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                     * which invokes `iteratee` for `value` and each element of `array` to compute
                     * their sort ranking. The iteratee is invoked with one argument; (value).
                     *
                     * @private
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {Function} iteratee The iteratee invoked per element.
                     * @param {boolean} [retHighest] Specify returning the highest qualified index.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     */
                    function baseSortedIndexBy(array, value, iteratee, retHighest) {
                        value = iteratee(value);

                        var low = 0,
                            high = array == null ? 0 : array.length,
                            valIsNaN = value !== value,
                            valIsNull = value === null,
                            valIsSymbol = isSymbol(value),
                            valIsUndefined = value === undefined;

                        while (low < high) {
                            var mid = nativeFloor((low + high) / 2),
                                computed = iteratee(array[mid]),
                                othIsDefined = computed !== undefined,
                                othIsNull = computed === null,
                                othIsReflexive = computed === computed,
                                othIsSymbol = isSymbol(computed);

                            if (valIsNaN) {
                                var setLow = retHighest || othIsReflexive;
                            } else if (valIsUndefined) {
                                setLow = othIsReflexive && (retHighest || othIsDefined);
                            } else if (valIsNull) {
                                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                            } else if (valIsSymbol) {
                                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                            } else if (othIsNull || othIsSymbol) {
                                setLow = false;
                            } else {
                                setLow = retHighest ? (computed <= value) : (computed < value);
                            }
                            if (setLow) {
                                low = mid + 1;
                            } else {
                                high = mid;
                            }
                        }
                        return nativeMin(high, MAX_ARRAY_INDEX);
                    }

                    /**
                     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                     * support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     */
                    function baseSortedUniq(array, iteratee) {
                        var index = -1,
                            length = array.length,
                            resIndex = 0,
                            result = [];

                        while (++index < length) {
                            var value = array[index],
                                computed = iteratee ? iteratee(value) : value;

                            if (!index || !eq(computed, seen)) {
                                var seen = computed;
                                result[resIndex++] = value === 0 ? 0 : value;
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.toNumber` which doesn't ensure correct
                     * conversions of binary, hexadecimal, or octal string values.
                     *
                     * @private
                     * @param {*} value The value to process.
                     * @returns {number} Returns the number.
                     */
                    function baseToNumber(value) {
                        if (typeof value == 'number') {
                            return value;
                        }
                        if (isSymbol(value)) {
                            return NAN;
                        }
                        return +value;
                    }

                    /**
                     * The base implementation of `_.toString` which doesn't convert nullish
                     * values to empty strings.
                     *
                     * @private
                     * @param {*} value The value to process.
                     * @returns {string} Returns the string.
                     */
                    function baseToString(value) {
                        // Exit early for strings to avoid a performance hit in some environments.
                        if (typeof value == 'string') {
                            return value;
                        }
                        if (isArray(value)) {
                            // Recursively convert values (susceptible to call stack limits).
                            return arrayMap(value, baseToString) + '';
                        }
                        if (isSymbol(value)) {
                            return symbolToString ? symbolToString.call(value) : '';
                        }
                        var result = (value + '');
                        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                    }

                    /**
                     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     */
                    function baseUniq(array, iteratee, comparator) {
                        var index = -1,
                            includes = arrayIncludes,
                            length = array.length,
                            isCommon = true,
                            result = [],
                            seen = result;

                        if (comparator) {
                            isCommon = false;
                            includes = arrayIncludesWith;
                        }
                        else if (length >= LARGE_ARRAY_SIZE) {
                            var set = iteratee ? null : createSet(array);
                            if (set) {
                                return setToArray(set);
                            }
                            isCommon = false;
                            includes = cacheHas;
                            seen = new SetCache;
                        }
                        else {
                            seen = iteratee ? [] : result;
                        }
                        outer:
                            while (++index < length) {
                                var value = array[index],
                                    computed = iteratee ? iteratee(value) : value;

                                value = (comparator || value !== 0) ? value : 0;
                                if (isCommon && computed === computed) {
                                    var seenIndex = seen.length;
                                    while (seenIndex--) {
                                        if (seen[seenIndex] === computed) {
                                            continue outer;
                                        }
                                    }
                                    if (iteratee) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                                else if (!includes(seen, computed, comparator)) {
                                    if (seen !== result) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                            }
                        return result;
                    }

                    /**
                     * The base implementation of `_.unset`.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The property path to unset.
                     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                     */
                    function baseUnset(object, path) {
                        path = castPath(path, object);
                        object = parent(object, path);
                        return object == null || delete object[toKey(last(path))];
                    }

                    /**
                     * The base implementation of `_.update`.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to update.
                     * @param {Function} updater The function to produce the updated value.
                     * @param {Function} [customizer] The function to customize path creation.
                     * @returns {Object} Returns `object`.
                     */
                    function baseUpdate(object, path, updater, customizer) {
                        return baseSet(object, path, updater(baseGet(object, path)), customizer);
                    }

                    /**
                     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                     * without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to query.
                     * @param {Function} predicate The function invoked per iteration.
                     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Array} Returns the slice of `array`.
                     */
                    function baseWhile(array, predicate, isDrop, fromRight) {
                        var length = array.length,
                            index = fromRight ? length : -1;

                        while ((fromRight ? index-- : ++index < length) &&
                        predicate(array[index], index, array)) {
                        }

                        return isDrop
                            ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
                            : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
                    }

                    /**
                     * The base implementation of `wrapperValue` which returns the result of
                     * performing a sequence of actions on the unwrapped `value`, where each
                     * successive action is supplied the return value of the previous.
                     *
                     * @private
                     * @param {*} value The unwrapped value.
                     * @param {Array} actions Actions to perform to resolve the unwrapped value.
                     * @returns {*} Returns the resolved value.
                     */
                    function baseWrapperValue(value, actions) {
                        var result = value;
                        if (result instanceof LazyWrapper) {
                            result = result.value();
                        }
                        return arrayReduce(actions, function (result, action) {
                            return action.func.apply(action.thisArg, arrayPush([result], action.args));
                        }, result);
                    }

                    /**
                     * The base implementation of methods like `_.xor`, without support for
                     * iteratee shorthands, that accepts an array of arrays to inspect.
                     *
                     * @private
                     * @param {Array} arrays The arrays to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of values.
                     */
                    function baseXor(arrays, iteratee, comparator) {
                        var length = arrays.length;
                        if (length < 2) {
                            return length ? baseUniq(arrays[0]) : [];
                        }
                        var index = -1,
                            result = Array(length);

                        while (++index < length) {
                            var array = arrays[index],
                                othIndex = -1;

                            while (++othIndex < length) {
                                if (othIndex != index) {
                                    result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                                }
                            }
                        }
                        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                    }

                    /**
                     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                     *
                     * @private
                     * @param {Array} props The property identifiers.
                     * @param {Array} values The property values.
                     * @param {Function} assignFunc The function to assign values.
                     * @returns {Object} Returns the new object.
                     */
                    function baseZipObject(props, values, assignFunc) {
                        var index = -1,
                            length = props.length,
                            valsLength = values.length,
                            result = {};

                        while (++index < length) {
                            var value = index < valsLength ? values[index] : undefined;
                            assignFunc(result, props[index], value);
                        }
                        return result;
                    }

                    /**
                     * Casts `value` to an empty array if it's not an array like object.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @returns {Array|Object} Returns the cast array-like object.
                     */
                    function castArrayLikeObject(value) {
                        return isArrayLikeObject(value) ? value : [];
                    }

                    /**
                     * Casts `value` to `identity` if it's not a function.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @returns {Function} Returns cast function.
                     */
                    function castFunction(value) {
                        return typeof value == 'function' ? value : identity;
                    }

                    /**
                     * Casts `value` to a path array if it's not one.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @param {Object} [object] The object to query keys on.
                     * @returns {Array} Returns the cast property path array.
                     */
                    function castPath(value, object) {
                        if (isArray(value)) {
                            return value;
                        }
                        return isKey(value, object) ? [value] : stringToPath(toString(value));
                    }

                    /**
                     * A `baseRest` alias which can be replaced with `identity` by module
                     * replacement plugins.
                     *
                     * @private
                     * @type {Function}
                     * @param {Function} func The function to apply a rest parameter to.
                     * @returns {Function} Returns the new function.
                     */
                    var castRest = baseRest;

                    /**
                     * Casts `array` to a slice if it's needed.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {number} start The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns the cast slice.
                     */
                    function castSlice(array, start, end) {
                        var length = array.length;
                        end = end === undefined ? length : end;
                        return (!start && end >= length) ? array : baseSlice(array, start, end);
                    }

                    /**
                     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                     *
                     * @private
                     * @param {number|Object} id The timer id or timeout object of the timer to clear.
                     */
                    var clearTimeout = ctxClearTimeout || function (id) {
                            return root.clearTimeout(id);
                        };

                    /**
                     * Creates a clone of  `buffer`.
                     *
                     * @private
                     * @param {Buffer} buffer The buffer to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Buffer} Returns the cloned buffer.
                     */
                    function cloneBuffer(buffer, isDeep) {
                        if (isDeep) {
                            return buffer.slice();
                        }
                        var length = buffer.length,
                            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                        buffer.copy(result);
                        return result;
                    }

                    /**
                     * Creates a clone of `arrayBuffer`.
                     *
                     * @private
                     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                     * @returns {ArrayBuffer} Returns the cloned array buffer.
                     */
                    function cloneArrayBuffer(arrayBuffer) {
                        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                        return result;
                    }

                    /**
                     * Creates a clone of `dataView`.
                     *
                     * @private
                     * @param {Object} dataView The data view to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned data view.
                     */
                    function cloneDataView(dataView, isDeep) {
                        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                    }

                    /**
                     * Creates a clone of `map`.
                     *
                     * @private
                     * @param {Object} map The map to clone.
                     * @param {Function} cloneFunc The function to clone values.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned map.
                     */
                    function cloneMap(map, isDeep, cloneFunc) {
                        var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
                        return arrayReduce(array, addMapEntry, new map.constructor);
                    }

                    /**
                     * Creates a clone of `regexp`.
                     *
                     * @private
                     * @param {Object} regexp The regexp to clone.
                     * @returns {Object} Returns the cloned regexp.
                     */
                    function cloneRegExp(regexp) {
                        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                        result.lastIndex = regexp.lastIndex;
                        return result;
                    }

                    /**
                     * Creates a clone of `set`.
                     *
                     * @private
                     * @param {Object} set The set to clone.
                     * @param {Function} cloneFunc The function to clone values.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned set.
                     */
                    function cloneSet(set, isDeep, cloneFunc) {
                        var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
                        return arrayReduce(array, addSetEntry, new set.constructor);
                    }

                    /**
                     * Creates a clone of the `symbol` object.
                     *
                     * @private
                     * @param {Object} symbol The symbol object to clone.
                     * @returns {Object} Returns the cloned symbol object.
                     */
                    function cloneSymbol(symbol) {
                        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                    }

                    /**
                     * Creates a clone of `typedArray`.
                     *
                     * @private
                     * @param {Object} typedArray The typed array to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned typed array.
                     */
                    function cloneTypedArray(typedArray, isDeep) {
                        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                    }

                    /**
                     * Compares values to sort them in ascending order.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {number} Returns the sort order indicator for `value`.
                     */
                    function compareAscending(value, other) {
                        if (value !== other) {
                            var valIsDefined = value !== undefined,
                                valIsNull = value === null,
                                valIsReflexive = value === value,
                                valIsSymbol = isSymbol(value);

                            var othIsDefined = other !== undefined,
                                othIsNull = other === null,
                                othIsReflexive = other === other,
                                othIsSymbol = isSymbol(other);

                            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                                (valIsNull && othIsDefined && othIsReflexive) ||
                                (!valIsDefined && othIsReflexive) ||
                                !valIsReflexive) {
                                return 1;
                            }
                            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                                (othIsNull && valIsDefined && valIsReflexive) ||
                                (!othIsDefined && valIsReflexive) ||
                                !othIsReflexive) {
                                return -1;
                            }
                        }
                        return 0;
                    }

                    /**
                     * Used by `_.orderBy` to compare multiple properties of a value to another
                     * and stable sort them.
                     *
                     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                     * specify an order of "desc" for descending or "asc" for ascending sort order
                     * of corresponding values.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {boolean[]|string[]} orders The order to sort by for each property.
                     * @returns {number} Returns the sort order indicator for `object`.
                     */
                    function compareMultiple(object, other, orders) {
                        var index = -1,
                            objCriteria = object.criteria,
                            othCriteria = other.criteria,
                            length = objCriteria.length,
                            ordersLength = orders.length;

                        while (++index < length) {
                            var result = compareAscending(objCriteria[index], othCriteria[index]);
                            if (result) {
                                if (index >= ordersLength) {
                                    return result;
                                }
                                var order = orders[index];
                                return result * (order == 'desc' ? -1 : 1);
                            }
                        }
                        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                        // that causes it, under certain circumstances, to provide the same value for
                        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                        // for more details.
                        //
                        // This also ensures a stable sort in V8 and other engines.
                        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                        return object.index - other.index;
                    }

                    /**
                     * Creates an array that is the composition of partially applied arguments,
                     * placeholders, and provided arguments into a single array of arguments.
                     *
                     * @private
                     * @param {Array} args The provided arguments.
                     * @param {Array} partials The arguments to prepend to those provided.
                     * @param {Array} holders The `partials` placeholder indexes.
                     * @params {boolean} [isCurried] Specify composing for a curried function.
                     * @returns {Array} Returns the new array of composed arguments.
                     */
                    function composeArgs(args, partials, holders, isCurried) {
                        var argsIndex = -1,
                            argsLength = args.length,
                            holdersLength = holders.length,
                            leftIndex = -1,
                            leftLength = partials.length,
                            rangeLength = nativeMax(argsLength - holdersLength, 0),
                            result = Array(leftLength + rangeLength),
                            isUncurried = !isCurried;

                        while (++leftIndex < leftLength) {
                            result[leftIndex] = partials[leftIndex];
                        }
                        while (++argsIndex < holdersLength) {
                            if (isUncurried || argsIndex < argsLength) {
                                result[holders[argsIndex]] = args[argsIndex];
                            }
                        }
                        while (rangeLength--) {
                            result[leftIndex++] = args[argsIndex++];
                        }
                        return result;
                    }

                    /**
                     * This function is like `composeArgs` except that the arguments composition
                     * is tailored for `_.partialRight`.
                     *
                     * @private
                     * @param {Array} args The provided arguments.
                     * @param {Array} partials The arguments to append to those provided.
                     * @param {Array} holders The `partials` placeholder indexes.
                     * @params {boolean} [isCurried] Specify composing for a curried function.
                     * @returns {Array} Returns the new array of composed arguments.
                     */
                    function composeArgsRight(args, partials, holders, isCurried) {
                        var argsIndex = -1,
                            argsLength = args.length,
                            holdersIndex = -1,
                            holdersLength = holders.length,
                            rightIndex = -1,
                            rightLength = partials.length,
                            rangeLength = nativeMax(argsLength - holdersLength, 0),
                            result = Array(rangeLength + rightLength),
                            isUncurried = !isCurried;

                        while (++argsIndex < rangeLength) {
                            result[argsIndex] = args[argsIndex];
                        }
                        var offset = argsIndex;
                        while (++rightIndex < rightLength) {
                            result[offset + rightIndex] = partials[rightIndex];
                        }
                        while (++holdersIndex < holdersLength) {
                            if (isUncurried || argsIndex < argsLength) {
                                result[offset + holders[holdersIndex]] = args[argsIndex++];
                            }
                        }
                        return result;
                    }

                    /**
                     * Copies the values of `source` to `array`.
                     *
                     * @private
                     * @param {Array} source The array to copy values from.
                     * @param {Array} [array=[]] The array to copy values to.
                     * @returns {Array} Returns `array`.
                     */
                    function copyArray(source, array) {
                        var index = -1,
                            length = source.length;

                        array || (array = Array(length));
                        while (++index < length) {
                            array[index] = source[index];
                        }
                        return array;
                    }

                    /**
                     * Copies properties of `source` to `object`.
                     *
                     * @private
                     * @param {Object} source The object to copy properties from.
                     * @param {Array} props The property identifiers to copy.
                     * @param {Object} [object={}] The object to copy properties to.
                     * @param {Function} [customizer] The function to customize copied values.
                     * @returns {Object} Returns `object`.
                     */
                    function copyObject(source, props, object, customizer) {
                        var isNew = !object;
                        object || (object = {});

                        var index = -1,
                            length = props.length;

                        while (++index < length) {
                            var key = props[index];

                            var newValue = customizer
                                ? customizer(object[key], source[key], key, object, source)
                                : undefined;

                            if (newValue === undefined) {
                                newValue = source[key];
                            }
                            if (isNew) {
                                baseAssignValue(object, key, newValue);
                            } else {
                                assignValue(object, key, newValue);
                            }
                        }
                        return object;
                    }

                    /**
                     * Copies own symbols of `source` to `object`.
                     *
                     * @private
                     * @param {Object} source The object to copy symbols from.
                     * @param {Object} [object={}] The object to copy symbols to.
                     * @returns {Object} Returns `object`.
                     */
                    function copySymbols(source, object) {
                        return copyObject(source, getSymbols(source), object);
                    }

                    /**
                     * Copies own and inherited symbols of `source` to `object`.
                     *
                     * @private
                     * @param {Object} source The object to copy symbols from.
                     * @param {Object} [object={}] The object to copy symbols to.
                     * @returns {Object} Returns `object`.
                     */
                    function copySymbolsIn(source, object) {
                        return copyObject(source, getSymbolsIn(source), object);
                    }

                    /**
                     * Creates a function like `_.groupBy`.
                     *
                     * @private
                     * @param {Function} setter The function to set accumulator values.
                     * @param {Function} [initializer] The accumulator object initializer.
                     * @returns {Function} Returns the new aggregator function.
                     */
                    function createAggregator(setter, initializer) {
                        return function (collection, iteratee) {
                            var func = isArray(collection) ? arrayAggregator : baseAggregator,
                                accumulator = initializer ? initializer() : {};

                            return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                        };
                    }

                    /**
                     * Creates a function like `_.assign`.
                     *
                     * @private
                     * @param {Function} assigner The function to assign values.
                     * @returns {Function} Returns the new assigner function.
                     */
                    function createAssigner(assigner) {
                        return baseRest(function (object, sources) {
                            var index = -1,
                                length = sources.length,
                                customizer = length > 1 ? sources[length - 1] : undefined,
                                guard = length > 2 ? sources[2] : undefined;

                            customizer = (assigner.length > 3 && typeof customizer == 'function')
                                ? (length--, customizer)
                                : undefined;

                            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                customizer = length < 3 ? undefined : customizer;
                                length = 1;
                            }
                            object = Object(object);
                            while (++index < length) {
                                var source = sources[index];
                                if (source) {
                                    assigner(object, source, index, customizer);
                                }
                            }
                            return object;
                        });
                    }

                    /**
                     * Creates a `baseEach` or `baseEachRight` function.
                     *
                     * @private
                     * @param {Function} eachFunc The function to iterate over a collection.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new base function.
                     */
                    function createBaseEach(eachFunc, fromRight) {
                        return function (collection, iteratee) {
                            if (collection == null) {
                                return collection;
                            }
                            if (!isArrayLike(collection)) {
                                return eachFunc(collection, iteratee);
                            }
                            var length = collection.length,
                                index = fromRight ? length : -1,
                                iterable = Object(collection);

                            while ((fromRight ? index-- : ++index < length)) {
                                if (iteratee(iterable[index], index, iterable) === false) {
                                    break;
                                }
                            }
                            return collection;
                        };
                    }

                    /**
                     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                     *
                     * @private
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new base function.
                     */
                    function createBaseFor(fromRight) {
                        return function (object, iteratee, keysFunc) {
                            var index = -1,
                                iterable = Object(object),
                                props = keysFunc(object),
                                length = props.length;

                            while (length--) {
                                var key = props[fromRight ? length : ++index];
                                if (iteratee(iterable[key], key, iterable) === false) {
                                    break;
                                }
                            }
                            return object;
                        };
                    }

                    /**
                     * Creates a function that wraps `func` to invoke it with the optional `this`
                     * binding of `thisArg`.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createBind(func, bitmask, thisArg) {
                        var isBind = bitmask & WRAP_BIND_FLAG,
                            Ctor = createCtor(func);

                        function wrapper() {
                            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                            return fn.apply(isBind ? thisArg : this, arguments);
                        }

                        return wrapper;
                    }

                    /**
                     * Creates a function like `_.lowerFirst`.
                     *
                     * @private
                     * @param {string} methodName The name of the `String` case method to use.
                     * @returns {Function} Returns the new case function.
                     */
                    function createCaseFirst(methodName) {
                        return function (string) {
                            string = toString(string);

                            var strSymbols = hasUnicode(string)
                                ? stringToArray(string)
                                : undefined;

                            var chr = strSymbols
                                ? strSymbols[0]
                                : string.charAt(0);

                            var trailing = strSymbols
                                ? castSlice(strSymbols, 1).join('')
                                : string.slice(1);

                            return chr[methodName]() + trailing;
                        };
                    }

                    /**
                     * Creates a function like `_.camelCase`.
                     *
                     * @private
                     * @param {Function} callback The function to combine each word.
                     * @returns {Function} Returns the new compounder function.
                     */
                    function createCompounder(callback) {
                        return function (string) {
                            return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                        };
                    }

                    /**
                     * Creates a function that produces an instance of `Ctor` regardless of
                     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                     *
                     * @private
                     * @param {Function} Ctor The constructor to wrap.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createCtor(Ctor) {
                        return function () {
                            // Use a `switch` statement to work with class constructors. See
                            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                            // for more details.
                            var args = arguments;
                            switch (args.length) {
                                case 0:
                                    return new Ctor;
                                case 1:
                                    return new Ctor(args[0]);
                                case 2:
                                    return new Ctor(args[0], args[1]);
                                case 3:
                                    return new Ctor(args[0], args[1], args[2]);
                                case 4:
                                    return new Ctor(args[0], args[1], args[2], args[3]);
                                case 5:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                                case 6:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                                case 7:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                            }
                            var thisBinding = baseCreate(Ctor.prototype),
                                result = Ctor.apply(thisBinding, args);

                            // Mimic the constructor's `return` behavior.
                            // See https://es5.github.io/#x13.2.2 for more details.
                            return isObject(result) ? result : thisBinding;
                        };
                    }

                    /**
                     * Creates a function that wraps `func` to enable currying.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {number} arity The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createCurry(func, bitmask, arity) {
                        var Ctor = createCtor(func);

                        function wrapper() {
                            var length = arguments.length,
                                args = Array(length),
                                index = length,
                                placeholder = getHolder(wrapper);

                            while (index--) {
                                args[index] = arguments[index];
                            }
                            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
                                ? []
                                : replaceHolders(args, placeholder);

                            length -= holders.length;
                            if (length < arity) {
                                return createRecurry(
                                    func, bitmask, createHybrid, wrapper.placeholder, undefined,
                                    args, holders, undefined, undefined, arity - length);
                            }
                            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                            return apply(fn, this, args);
                        }

                        return wrapper;
                    }

                    /**
                     * Creates a `_.find` or `_.findLast` function.
                     *
                     * @private
                     * @param {Function} findIndexFunc The function to find the collection index.
                     * @returns {Function} Returns the new find function.
                     */
                    function createFind(findIndexFunc) {
                        return function (collection, predicate, fromIndex) {
                            var iterable = Object(collection);
                            if (!isArrayLike(collection)) {
                                var iteratee = getIteratee(predicate, 3);
                                collection = keys(collection);
                                predicate = function (key) {
                                    return iteratee(iterable[key], key, iterable);
                                };
                            }
                            var index = findIndexFunc(collection, predicate, fromIndex);
                            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
                        };
                    }

                    /**
                     * Creates a `_.flow` or `_.flowRight` function.
                     *
                     * @private
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new flow function.
                     */
                    function createFlow(fromRight) {
                        return flatRest(function (funcs) {
                            var length = funcs.length,
                                index = length,
                                prereq = LodashWrapper.prototype.thru;

                            if (fromRight) {
                                funcs.reverse();
                            }
                            while (index--) {
                                var func = funcs[index];
                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                                    var wrapper = new LodashWrapper([], true);
                                }
                            }
                            index = wrapper ? index : length;
                            while (++index < length) {
                                func = funcs[index];

                                var funcName = getFuncName(func),
                                    data = funcName == 'wrapper' ? getData(func) : undefined;

                                if (data && isLaziable(data[0]) &&
                                    data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                                    !data[4].length && data[9] == 1
                                ) {
                                    wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                                } else {
                                    wrapper = (func.length == 1 && isLaziable(func))
                                        ? wrapper[funcName]()
                                        : wrapper.thru(func);
                                }
                            }
                            return function () {
                                var args = arguments,
                                    value = args[0];

                                if (wrapper && args.length == 1 && isArray(value)) {
                                    return wrapper.plant(value).value();
                                }
                                var index = 0,
                                    result = length ? funcs[index].apply(this, args) : value;

                                while (++index < length) {
                                    result = funcs[index].call(this, result);
                                }
                                return result;
                            };
                        });
                    }

                    /**
                     * Creates a function that wraps `func` to invoke it with optional `this`
                     * binding of `thisArg`, partial application, and currying.
                     *
                     * @private
                     * @param {Function|string} func The function or method name to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @param {Array} [partials] The arguments to prepend to those provided to
                     *  the new function.
                     * @param {Array} [holders] The `partials` placeholder indexes.
                     * @param {Array} [partialsRight] The arguments to append to those provided
                     *  to the new function.
                     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                     * @param {Array} [argPos] The argument positions of the new function.
                     * @param {number} [ary] The arity cap of `func`.
                     * @param {number} [arity] The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                        var isAry = bitmask & WRAP_ARY_FLAG,
                            isBind = bitmask & WRAP_BIND_FLAG,
                            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                            isFlip = bitmask & WRAP_FLIP_FLAG,
                            Ctor = isBindKey ? undefined : createCtor(func);

                        function wrapper() {
                            var length = arguments.length,
                                args = Array(length),
                                index = length;

                            while (index--) {
                                args[index] = arguments[index];
                            }
                            if (isCurried) {
                                var placeholder = getHolder(wrapper),
                                    holdersCount = countHolders(args, placeholder);
                            }
                            if (partials) {
                                args = composeArgs(args, partials, holders, isCurried);
                            }
                            if (partialsRight) {
                                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                            }
                            length -= holdersCount;
                            if (isCurried && length < arity) {
                                var newHolders = replaceHolders(args, placeholder);
                                return createRecurry(
                                    func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                                    args, newHolders, argPos, ary, arity - length
                                );
                            }
                            var thisBinding = isBind ? thisArg : this,
                                fn = isBindKey ? thisBinding[func] : func;

                            length = args.length;
                            if (argPos) {
                                args = reorder(args, argPos);
                            } else if (isFlip && length > 1) {
                                args.reverse();
                            }
                            if (isAry && ary < length) {
                                args.length = ary;
                            }
                            if (this && this !== root && this instanceof wrapper) {
                                fn = Ctor || createCtor(fn);
                            }
                            return fn.apply(thisBinding, args);
                        }

                        return wrapper;
                    }

                    /**
                     * Creates a function like `_.invertBy`.
                     *
                     * @private
                     * @param {Function} setter The function to set accumulator values.
                     * @param {Function} toIteratee The function to resolve iteratees.
                     * @returns {Function} Returns the new inverter function.
                     */
                    function createInverter(setter, toIteratee) {
                        return function (object, iteratee) {
                            return baseInverter(object, setter, toIteratee(iteratee), {});
                        };
                    }

                    /**
                     * Creates a function that performs a mathematical operation on two values.
                     *
                     * @private
                     * @param {Function} operator The function to perform the operation.
                     * @param {number} [defaultValue] The value used for `undefined` arguments.
                     * @returns {Function} Returns the new mathematical operation function.
                     */
                    function createMathOperation(operator, defaultValue) {
                        return function (value, other) {
                            var result;
                            if (value === undefined && other === undefined) {
                                return defaultValue;
                            }
                            if (value !== undefined) {
                                result = value;
                            }
                            if (other !== undefined) {
                                if (result === undefined) {
                                    return other;
                                }
                                if (typeof value == 'string' || typeof other == 'string') {
                                    value = baseToString(value);
                                    other = baseToString(other);
                                } else {
                                    value = baseToNumber(value);
                                    other = baseToNumber(other);
                                }
                                result = operator(value, other);
                            }
                            return result;
                        };
                    }

                    /**
                     * Creates a function like `_.over`.
                     *
                     * @private
                     * @param {Function} arrayFunc The function to iterate over iteratees.
                     * @returns {Function} Returns the new over function.
                     */
                    function createOver(arrayFunc) {
                        return flatRest(function (iteratees) {
                            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                            return baseRest(function (args) {
                                var thisArg = this;
                                return arrayFunc(iteratees, function (iteratee) {
                                    return apply(iteratee, thisArg, args);
                                });
                            });
                        });
                    }

                    /**
                     * Creates the padding for `string` based on `length`. The `chars` string
                     * is truncated if the number of characters exceeds `length`.
                     *
                     * @private
                     * @param {number} length The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padding for `string`.
                     */
                    function createPadding(length, chars) {
                        chars = chars === undefined ? ' ' : baseToString(chars);

                        var charsLength = chars.length;
                        if (charsLength < 2) {
                            return charsLength ? baseRepeat(chars, length) : chars;
                        }
                        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                        return hasUnicode(chars)
                            ? castSlice(stringToArray(result), 0, length).join('')
                            : result.slice(0, length);
                    }

                    /**
                     * Creates a function that wraps `func` to invoke it with the `this` binding
                     * of `thisArg` and `partials` prepended to the arguments it receives.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {*} thisArg The `this` binding of `func`.
                     * @param {Array} partials The arguments to prepend to those provided to
                     *  the new function.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createPartial(func, bitmask, thisArg, partials) {
                        var isBind = bitmask & WRAP_BIND_FLAG,
                            Ctor = createCtor(func);

                        function wrapper() {
                            var argsIndex = -1,
                                argsLength = arguments.length,
                                leftIndex = -1,
                                leftLength = partials.length,
                                args = Array(leftLength + argsLength),
                                fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

                            while (++leftIndex < leftLength) {
                                args[leftIndex] = partials[leftIndex];
                            }
                            while (argsLength--) {
                                args[leftIndex++] = arguments[++argsIndex];
                            }
                            return apply(fn, isBind ? thisArg : this, args);
                        }

                        return wrapper;
                    }

                    /**
                     * Creates a `_.range` or `_.rangeRight` function.
                     *
                     * @private
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new range function.
                     */
                    function createRange(fromRight) {
                        return function (start, end, step) {
                            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                                end = step = undefined;
                            }
                            // Ensure the sign of `-0` is preserved.
                            start = toFinite(start);
                            if (end === undefined) {
                                end = start;
                                start = 0;
                            } else {
                                end = toFinite(end);
                            }
                            step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                            return baseRange(start, end, step, fromRight);
                        };
                    }

                    /**
                     * Creates a function that performs a relational operation on two values.
                     *
                     * @private
                     * @param {Function} operator The function to perform the operation.
                     * @returns {Function} Returns the new relational operation function.
                     */
                    function createRelationalOperation(operator) {
                        return function (value, other) {
                            if (!(typeof value == 'string' && typeof other == 'string')) {
                                value = toNumber(value);
                                other = toNumber(other);
                            }
                            return operator(value, other);
                        };
                    }

                    /**
                     * Creates a function that wraps `func` to continue currying.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {Function} wrapFunc The function to create the `func` wrapper.
                     * @param {*} placeholder The placeholder value.
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @param {Array} [partials] The arguments to prepend to those provided to
                     *  the new function.
                     * @param {Array} [holders] The `partials` placeholder indexes.
                     * @param {Array} [argPos] The argument positions of the new function.
                     * @param {number} [ary] The arity cap of `func`.
                     * @param {number} [arity] The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                        var isCurry = bitmask & WRAP_CURRY_FLAG,
                            newHolders = isCurry ? holders : undefined,
                            newHoldersRight = isCurry ? undefined : holders,
                            newPartials = isCurry ? partials : undefined,
                            newPartialsRight = isCurry ? undefined : partials;

                        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                        }
                        var newData = [
                            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                            newHoldersRight, argPos, ary, arity
                        ];

                        var result = wrapFunc.apply(undefined, newData);
                        if (isLaziable(func)) {
                            setData(result, newData);
                        }
                        result.placeholder = placeholder;
                        return setWrapToString(result, func, bitmask);
                    }

                    /**
                     * Creates a function like `_.round`.
                     *
                     * @private
                     * @param {string} methodName The name of the `Math` method to use when rounding.
                     * @returns {Function} Returns the new round function.
                     */
                    function createRound(methodName) {
                        var func = Math[methodName];
                        return function (number, precision) {
                            number = toNumber(number);
                            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                            if (precision) {
                                // Shift with exponential notation to avoid floating-point issues.
                                // See [MDN](https://mdn.io/round#Examples) for more details.
                                var pair = (toString(number) + 'e').split('e'),
                                    value = func(pair[0] + 'e' + (+pair[1] + precision));

                                pair = (toString(value) + 'e').split('e');
                                return +(pair[0] + 'e' + (+pair[1] - precision));
                            }
                            return func(number);
                        };
                    }

                    /**
                     * Creates a set object of `values`.
                     *
                     * @private
                     * @param {Array} values The values to add to the set.
                     * @returns {Object} Returns the new set.
                     */
                    var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function (values) {
                        return new Set(values);
                    };

                    /**
                     * Creates a `_.toPairs` or `_.toPairsIn` function.
                     *
                     * @private
                     * @param {Function} keysFunc The function to get the keys of a given object.
                     * @returns {Function} Returns the new pairs function.
                     */
                    function createToPairs(keysFunc) {
                        return function (object) {
                            var tag = getTag(object);
                            if (tag == mapTag) {
                                return mapToArray(object);
                            }
                            if (tag == setTag) {
                                return setToPairs(object);
                            }
                            return baseToPairs(object, keysFunc(object));
                        };
                    }

                    /**
                     * Creates a function that either curries or invokes `func` with optional
                     * `this` binding and partially applied arguments.
                     *
                     * @private
                     * @param {Function|string} func The function or method name to wrap.
                     * @param {number} bitmask The bitmask flags.
                     *    1 - `_.bind`
                     *    2 - `_.bindKey`
                     *    4 - `_.curry` or `_.curryRight` of a bound function
                     *    8 - `_.curry`
                     *   16 - `_.curryRight`
                     *   32 - `_.partial`
                     *   64 - `_.partialRight`
                     *  128 - `_.rearg`
                     *  256 - `_.ary`
                     *  512 - `_.flip`
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @param {Array} [partials] The arguments to be partially applied.
                     * @param {Array} [holders] The `partials` placeholder indexes.
                     * @param {Array} [argPos] The argument positions of the new function.
                     * @param {number} [ary] The arity cap of `func`.
                     * @param {number} [arity] The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                        if (!isBindKey && typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        var length = partials ? partials.length : 0;
                        if (!length) {
                            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                            partials = holders = undefined;
                        }
                        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                        arity = arity === undefined ? arity : toInteger(arity);
                        length -= holders ? holders.length : 0;

                        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                            var partialsRight = partials,
                                holdersRight = holders;

                            partials = holders = undefined;
                        }
                        var data = isBindKey ? undefined : getData(func);

                        var newData = [
                            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                            argPos, ary, arity
                        ];

                        if (data) {
                            mergeData(newData, data);
                        }
                        func = newData[0];
                        bitmask = newData[1];
                        thisArg = newData[2];
                        partials = newData[3];
                        holders = newData[4];
                        arity = newData[9] = newData[9] === undefined
                            ? (isBindKey ? 0 : func.length)
                            : nativeMax(newData[9] - length, 0);

                        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                        }
                        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                            var result = createBind(func, bitmask, thisArg);
                        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                            result = createCurry(func, bitmask, arity);
                        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                            result = createPartial(func, bitmask, thisArg, partials);
                        } else {
                            result = createHybrid.apply(undefined, newData);
                        }
                        var setter = data ? baseSetData : setData;
                        return setWrapToString(setter(result, newData), func, bitmask);
                    }

                    /**
                     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                     * of source objects to the destination object for all destination properties
                     * that resolve to `undefined`.
                     *
                     * @private
                     * @param {*} objValue The destination value.
                     * @param {*} srcValue The source value.
                     * @param {string} key The key of the property to assign.
                     * @param {Object} object The parent object of `objValue`.
                     * @returns {*} Returns the value to assign.
                     */
                    function customDefaultsAssignIn(objValue, srcValue, key, object) {
                        if (objValue === undefined ||
                            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                            return srcValue;
                        }
                        return objValue;
                    }

                    /**
                     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                     * objects into destination objects that are passed thru.
                     *
                     * @private
                     * @param {*} objValue The destination value.
                     * @param {*} srcValue The source value.
                     * @param {string} key The key of the property to merge.
                     * @param {Object} object The parent object of `objValue`.
                     * @param {Object} source The parent object of `srcValue`.
                     * @param {Object} [stack] Tracks traversed source values and their merged
                     *  counterparts.
                     * @returns {*} Returns the value to assign.
                     */
                    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                        if (isObject(objValue) && isObject(srcValue)) {
                            // Recursively merge objects and arrays (susceptible to call stack limits).
                            stack.set(srcValue, objValue);
                            baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                            stack['delete'](srcValue);
                        }
                        return objValue;
                    }

                    /**
                     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                     * objects.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @param {string} key The key of the property to inspect.
                     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                     */
                    function customOmitClone(value) {
                        return isPlainObject(value) ? undefined : value;
                    }

                    /**
                     * A specialized version of `baseIsEqualDeep` for arrays with support for
                     * partial deep comparisons.
                     *
                     * @private
                     * @param {Array} array The array to compare.
                     * @param {Array} other The other array to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} stack Tracks traversed `array` and `other` objects.
                     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                     */
                    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                            arrLength = array.length,
                            othLength = other.length;

                        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                            return false;
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(array);
                        if (stacked && stack.get(other)) {
                            return stacked == other;
                        }
                        var index = -1,
                            result = true,
                            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                        stack.set(array, other);
                        stack.set(other, array);

                        // Ignore non-index properties.
                        while (++index < arrLength) {
                            var arrValue = array[index],
                                othValue = other[index];

                            if (customizer) {
                                var compared = isPartial
                                    ? customizer(othValue, arrValue, index, other, array, stack)
                                    : customizer(arrValue, othValue, index, array, other, stack);
                            }
                            if (compared !== undefined) {
                                if (compared) {
                                    continue;
                                }
                                result = false;
                                break;
                            }
                            // Recursively compare arrays (susceptible to call stack limits).
                            if (seen) {
                                if (!arraySome(other, function (othValue, othIndex) {
                                        if (!cacheHas(seen, othIndex) &&
                                            (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                            return seen.push(othIndex);
                                        }
                                    })) {
                                    result = false;
                                    break;
                                }
                            } else if (!(
                                    arrValue === othValue ||
                                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                                )) {
                                result = false;
                                break;
                            }
                        }
                        stack['delete'](array);
                        stack['delete'](other);
                        return result;
                    }

                    /**
                     * A specialized version of `baseIsEqualDeep` for comparing objects of
                     * the same `toStringTag`.
                     *
                     * **Note:** This function only supports comparing values with tags of
                     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {string} tag The `toStringTag` of the objects to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} stack Tracks traversed `object` and `other` objects.
                     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                     */
                    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                        switch (tag) {
                            case dataViewTag:
                                if ((object.byteLength != other.byteLength) ||
                                    (object.byteOffset != other.byteOffset)) {
                                    return false;
                                }
                                object = object.buffer;
                                other = other.buffer;

                            case arrayBufferTag:
                                if ((object.byteLength != other.byteLength) ||
                                    !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                                    return false;
                                }
                                return true;

                            case boolTag:
                            case dateTag:
                            case numberTag:
                                // Coerce booleans to `1` or `0` and dates to milliseconds.
                                // Invalid dates are coerced to `NaN`.
                                return eq(+object, +other);

                            case errorTag:
                                return object.name == other.name && object.message == other.message;

                            case regexpTag:
                            case stringTag:
                                // Coerce regexes to strings and treat strings, primitives and objects,
                                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                                // for more details.
                                return object == (other + '');

                            case mapTag:
                                var convert = mapToArray;

                            case setTag:
                                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                                convert || (convert = setToArray);

                                if (object.size != other.size && !isPartial) {
                                    return false;
                                }
                                // Assume cyclic values are equal.
                                var stacked = stack.get(object);
                                if (stacked) {
                                    return stacked == other;
                                }
                                bitmask |= COMPARE_UNORDERED_FLAG;

                                // Recursively compare objects (susceptible to call stack limits).
                                stack.set(object, other);
                                var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                                stack['delete'](object);
                                return result;

                            case symbolTag:
                                if (symbolValueOf) {
                                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                                }
                        }
                        return false;
                    }

                    /**
                     * A specialized version of `baseIsEqualDeep` for objects with support for
                     * partial deep comparisons.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} stack Tracks traversed `object` and `other` objects.
                     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                     */
                    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                            objProps = getAllKeys(object),
                            objLength = objProps.length,
                            othProps = getAllKeys(other),
                            othLength = othProps.length;

                        if (objLength != othLength && !isPartial) {
                            return false;
                        }
                        var index = objLength;
                        while (index--) {
                            var key = objProps[index];
                            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                                return false;
                            }
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(object);
                        if (stacked && stack.get(other)) {
                            return stacked == other;
                        }
                        var result = true;
                        stack.set(object, other);
                        stack.set(other, object);

                        var skipCtor = isPartial;
                        while (++index < objLength) {
                            key = objProps[index];
                            var objValue = object[key],
                                othValue = other[key];

                            if (customizer) {
                                var compared = isPartial
                                    ? customizer(othValue, objValue, key, other, object, stack)
                                    : customizer(objValue, othValue, key, object, other, stack);
                            }
                            // Recursively compare objects (susceptible to call stack limits).
                            if (!(compared === undefined
                                        ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                                        : compared
                                )) {
                                result = false;
                                break;
                            }
                            skipCtor || (skipCtor = key == 'constructor');
                        }
                        if (result && !skipCtor) {
                            var objCtor = object.constructor,
                                othCtor = other.constructor;

                            // Non `Object` object instances with different constructors are not equal.
                            if (objCtor != othCtor &&
                                ('constructor' in object && 'constructor' in other) &&
                                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                                result = false;
                            }
                        }
                        stack['delete'](object);
                        stack['delete'](other);
                        return result;
                    }

                    /**
                     * A specialized version of `baseRest` which flattens the rest array.
                     *
                     * @private
                     * @param {Function} func The function to apply a rest parameter to.
                     * @returns {Function} Returns the new function.
                     */
                    function flatRest(func) {
                        return setToString(overRest(func, undefined, flatten), func + '');
                    }

                    /**
                     * Creates an array of own enumerable property names and symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names and symbols.
                     */
                    function getAllKeys(object) {
                        return baseGetAllKeys(object, keys, getSymbols);
                    }

                    /**
                     * Creates an array of own and inherited enumerable property names and
                     * symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names and symbols.
                     */
                    function getAllKeysIn(object) {
                        return baseGetAllKeys(object, keysIn, getSymbolsIn);
                    }

                    /**
                     * Gets metadata for `func`.
                     *
                     * @private
                     * @param {Function} func The function to query.
                     * @returns {*} Returns the metadata for `func`.
                     */
                    var getData = !metaMap ? noop : function (func) {
                        return metaMap.get(func);
                    };

                    /**
                     * Gets the name of `func`.
                     *
                     * @private
                     * @param {Function} func The function to query.
                     * @returns {string} Returns the function name.
                     */
                    function getFuncName(func) {
                        var result = (func.name + ''),
                            array = realNames[result],
                            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                        while (length--) {
                            var data = array[length],
                                otherFunc = data.func;
                            if (otherFunc == null || otherFunc == func) {
                                return data.name;
                            }
                        }
                        return result;
                    }

                    /**
                     * Gets the argument placeholder value for `func`.
                     *
                     * @private
                     * @param {Function} func The function to inspect.
                     * @returns {*} Returns the placeholder value.
                     */
                    function getHolder(func) {
                        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                        return object.placeholder;
                    }

                    /**
                     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                     * this function returns the custom method, otherwise it returns `baseIteratee`.
                     * If arguments are provided, the chosen function is invoked with them and
                     * its result is returned.
                     *
                     * @private
                     * @param {*} [value] The value to convert to an iteratee.
                     * @param {number} [arity] The arity of the created iteratee.
                     * @returns {Function} Returns the chosen function or its result.
                     */
                    function getIteratee() {
                        var result = lodash.iteratee || iteratee;
                        result = result === iteratee ? baseIteratee : result;
                        return arguments.length ? result(arguments[0], arguments[1]) : result;
                    }

                    /**
                     * Gets the data for `map`.
                     *
                     * @private
                     * @param {Object} map The map to query.
                     * @param {string} key The reference key.
                     * @returns {*} Returns the map data.
                     */
                    function getMapData(map, key) {
                        var data = map.__data__;
                        return isKeyable(key)
                            ? data[typeof key == 'string' ? 'string' : 'hash']
                            : data.map;
                    }

                    /**
                     * Gets the property names, values, and compare flags of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the match data of `object`.
                     */
                    function getMatchData(object) {
                        var result = keys(object),
                            length = result.length;

                        while (length--) {
                            var key = result[length],
                                value = object[key];

                            result[length] = [key, value, isStrictComparable(value)];
                        }
                        return result;
                    }

                    /**
                     * Gets the native function at `key` of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {string} key The key of the method to get.
                     * @returns {*} Returns the function if it's native, else `undefined`.
                     */
                    function getNative(object, key) {
                        var value = getValue(object, key);
                        return baseIsNative(value) ? value : undefined;
                    }

                    /**
                     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @returns {string} Returns the raw `toStringTag`.
                     */
                    function getRawTag(value) {
                        var isOwn = hasOwnProperty.call(value, symToStringTag),
                            tag = value[symToStringTag];

                        try {
                            value[symToStringTag] = undefined;
                            var unmasked = true;
                        } catch (e) {
                        }

                        var result = nativeObjectToString.call(value);
                        if (unmasked) {
                            if (isOwn) {
                                value[symToStringTag] = tag;
                            } else {
                                delete value[symToStringTag];
                            }
                        }
                        return result;
                    }

                    /**
                     * Creates an array of the own enumerable symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of symbols.
                     */
                    var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
                        if (object == null) {
                            return [];
                        }
                        object = Object(object);
                        return arrayFilter(nativeGetSymbols(object), function (symbol) {
                            return propertyIsEnumerable.call(object, symbol);
                        });
                    };

                    /**
                     * Creates an array of the own and inherited enumerable symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of symbols.
                     */
                    var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
                        var result = [];
                        while (object) {
                            arrayPush(result, getSymbols(object));
                            object = getPrototype(object);
                        }
                        return result;
                    };

                    /**
                     * Gets the `toStringTag` of `value`.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @returns {string} Returns the `toStringTag`.
                     */
                    var getTag = baseGetTag;

                    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                        (Map && getTag(new Map) != mapTag) ||
                        (Promise && getTag(Promise.resolve()) != promiseTag) ||
                        (Set && getTag(new Set) != setTag) ||
                        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                        getTag = function (value) {
                            var result = baseGetTag(value),
                                Ctor = result == objectTag ? value.constructor : undefined,
                                ctorString = Ctor ? toSource(Ctor) : '';

                            if (ctorString) {
                                switch (ctorString) {
                                    case dataViewCtorString:
                                        return dataViewTag;
                                    case mapCtorString:
                                        return mapTag;
                                    case promiseCtorString:
                                        return promiseTag;
                                    case setCtorString:
                                        return setTag;
                                    case weakMapCtorString:
                                        return weakMapTag;
                                }
                            }
                            return result;
                        };
                    }

                    /**
                     * Gets the view, applying any `transforms` to the `start` and `end` positions.
                     *
                     * @private
                     * @param {number} start The start of the view.
                     * @param {number} end The end of the view.
                     * @param {Array} transforms The transformations to apply to the view.
                     * @returns {Object} Returns an object containing the `start` and `end`
                     *  positions of the view.
                     */
                    function getView(start, end, transforms) {
                        var index = -1,
                            length = transforms.length;

                        while (++index < length) {
                            var data = transforms[index],
                                size = data.size;

                            switch (data.type) {
                                case 'drop':
                                    start += size;
                                    break;
                                case 'dropRight':
                                    end -= size;
                                    break;
                                case 'take':
                                    end = nativeMin(end, start + size);
                                    break;
                                case 'takeRight':
                                    start = nativeMax(start, end - size);
                                    break;
                            }
                        }
                        return {'start': start, 'end': end};
                    }

                    /**
                     * Extracts wrapper details from the `source` body comment.
                     *
                     * @private
                     * @param {string} source The source to inspect.
                     * @returns {Array} Returns the wrapper details.
                     */
                    function getWrapDetails(source) {
                        var match = source.match(reWrapDetails);
                        return match ? match[1].split(reSplitDetails) : [];
                    }

                    /**
                     * Checks if `path` exists on `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path to check.
                     * @param {Function} hasFunc The function to check properties.
                     * @returns {boolean} Returns `true` if `path` exists, else `false`.
                     */
                    function hasPath(object, path, hasFunc) {
                        path = castPath(path, object);

                        var index = -1,
                            length = path.length,
                            result = false;

                        while (++index < length) {
                            var key = toKey(path[index]);
                            if (!(result = object != null && hasFunc(object, key))) {
                                break;
                            }
                            object = object[key];
                        }
                        if (result || ++index != length) {
                            return result;
                        }
                        length = object == null ? 0 : object.length;
                        return !!length && isLength(length) && isIndex(key, length) &&
                            (isArray(object) || isArguments(object));
                    }

                    /**
                     * Initializes an array clone.
                     *
                     * @private
                     * @param {Array} array The array to clone.
                     * @returns {Array} Returns the initialized clone.
                     */
                    function initCloneArray(array) {
                        var length = array.length,
                            result = array.constructor(length);

                        // Add properties assigned by `RegExp#exec`.
                        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                            result.index = array.index;
                            result.input = array.input;
                        }
                        return result;
                    }

                    /**
                     * Initializes an object clone.
                     *
                     * @private
                     * @param {Object} object The object to clone.
                     * @returns {Object} Returns the initialized clone.
                     */
                    function initCloneObject(object) {
                        return (typeof object.constructor == 'function' && !isPrototype(object))
                            ? baseCreate(getPrototype(object))
                            : {};
                    }

                    /**
                     * Initializes an object clone based on its `toStringTag`.
                     *
                     * **Note:** This function only supports cloning values with tags of
                     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                     *
                     * @private
                     * @param {Object} object The object to clone.
                     * @param {string} tag The `toStringTag` of the object to clone.
                     * @param {Function} cloneFunc The function to clone values.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the initialized clone.
                     */
                    function initCloneByTag(object, tag, cloneFunc, isDeep) {
                        var Ctor = object.constructor;
                        switch (tag) {
                            case arrayBufferTag:
                                return cloneArrayBuffer(object);

                            case boolTag:
                            case dateTag:
                                return new Ctor(+object);

                            case dataViewTag:
                                return cloneDataView(object, isDeep);

                            case float32Tag:
                            case float64Tag:
                            case int8Tag:
                            case int16Tag:
                            case int32Tag:
                            case uint8Tag:
                            case uint8ClampedTag:
                            case uint16Tag:
                            case uint32Tag:
                                return cloneTypedArray(object, isDeep);

                            case mapTag:
                                return cloneMap(object, isDeep, cloneFunc);

                            case numberTag:
                            case stringTag:
                                return new Ctor(object);

                            case regexpTag:
                                return cloneRegExp(object);

                            case setTag:
                                return cloneSet(object, isDeep, cloneFunc);

                            case symbolTag:
                                return cloneSymbol(object);
                        }
                    }

                    /**
                     * Inserts wrapper `details` in a comment at the top of the `source` body.
                     *
                     * @private
                     * @param {string} source The source to modify.
                     * @returns {Array} details The details to insert.
                     * @returns {string} Returns the modified source.
                     */
                    function insertWrapDetails(source, details) {
                        var length = details.length;
                        if (!length) {
                            return source;
                        }
                        var lastIndex = length - 1;
                        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                        details = details.join(length > 2 ? ', ' : ' ');
                        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
                    }

                    /**
                     * Checks if `value` is a flattenable `arguments` object or array.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                     */
                    function isFlattenable(value) {
                        return isArray(value) || isArguments(value) ||
                            !!(spreadableSymbol && value && value[spreadableSymbol]);
                    }

                    /**
                     * Checks if `value` is a valid array-like index.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                     */
                    function isIndex(value, length) {
                        length = length == null ? MAX_SAFE_INTEGER : length;
                        return !!length &&
                            (typeof value == 'number' || reIsUint.test(value)) &&
                            (value > -1 && value % 1 == 0 && value < length);
                    }

                    /**
                     * Checks if the given arguments are from an iteratee call.
                     *
                     * @private
                     * @param {*} value The potential iteratee value argument.
                     * @param {*} index The potential iteratee index or key argument.
                     * @param {*} object The potential iteratee object argument.
                     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                     *  else `false`.
                     */
                    function isIterateeCall(value, index, object) {
                        if (!isObject(object)) {
                            return false;
                        }
                        var type = typeof index;
                        if (type == 'number'
                                ? (isArrayLike(object) && isIndex(index, object.length))
                                : (type == 'string' && index in object)
                        ) {
                            return eq(object[index], value);
                        }
                        return false;
                    }

                    /**
                     * Checks if `value` is a property name and not a property path.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @param {Object} [object] The object to query keys on.
                     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                     */
                    function isKey(value, object) {
                        if (isArray(value)) {
                            return false;
                        }
                        var type = typeof value;
                        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                            value == null || isSymbol(value)) {
                            return true;
                        }
                        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                            (object != null && value in Object(object));
                    }

                    /**
                     * Checks if `value` is suitable for use as unique object key.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                     */
                    function isKeyable(value) {
                        var type = typeof value;
                        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                            ? (value !== '__proto__')
                            : (value === null);
                    }

                    /**
                     * Checks if `func` has a lazy counterpart.
                     *
                     * @private
                     * @param {Function} func The function to check.
                     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                     *  else `false`.
                     */
                    function isLaziable(func) {
                        var funcName = getFuncName(func),
                            other = lodash[funcName];

                        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                            return false;
                        }
                        if (func === other) {
                            return true;
                        }
                        var data = getData(other);
                        return !!data && func === data[0];
                    }

                    /**
                     * Checks if `func` has its source masked.
                     *
                     * @private
                     * @param {Function} func The function to check.
                     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                     */
                    function isMasked(func) {
                        return !!maskSrcKey && (maskSrcKey in func);
                    }

                    /**
                     * Checks if `func` is capable of being masked.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                     */
                    var isMaskable = coreJsData ? isFunction : stubFalse;

                    /**
                     * Checks if `value` is likely a prototype object.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                     */
                    function isPrototype(value) {
                        var Ctor = value && value.constructor,
                            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                        return value === proto;
                    }

                    /**
                     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` if suitable for strict
                     *  equality comparisons, else `false`.
                     */
                    function isStrictComparable(value) {
                        return value === value && !isObject(value);
                    }

                    /**
                     * A specialized version of `matchesProperty` for source values suitable
                     * for strict equality comparisons, i.e. `===`.
                     *
                     * @private
                     * @param {string} key The key of the property to get.
                     * @param {*} srcValue The value to match.
                     * @returns {Function} Returns the new spec function.
                     */
                    function matchesStrictComparable(key, srcValue) {
                        return function (object) {
                            if (object == null) {
                                return false;
                            }
                            return object[key] === srcValue &&
                                (srcValue !== undefined || (key in Object(object)));
                        };
                    }

                    /**
                     * A specialized version of `_.memoize` which clears the memoized function's
                     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                     *
                     * @private
                     * @param {Function} func The function to have its output memoized.
                     * @returns {Function} Returns the new memoized function.
                     */
                    function memoizeCapped(func) {
                        var result = memoize(func, function (key) {
                            if (cache.size === MAX_MEMOIZE_SIZE) {
                                cache.clear();
                            }
                            return key;
                        });

                        var cache = result.cache;
                        return result;
                    }

                    /**
                     * Merges the function metadata of `source` into `data`.
                     *
                     * Merging metadata reduces the number of wrappers used to invoke a function.
                     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                     * may be applied regardless of execution order. Methods like `_.ary` and
                     * `_.rearg` modify function arguments, making the order in which they are
                     * executed important, preventing the merging of metadata. However, we make
                     * an exception for a safe combined case where curried functions have `_.ary`
                     * and or `_.rearg` applied.
                     *
                     * @private
                     * @param {Array} data The destination metadata.
                     * @param {Array} source The source metadata.
                     * @returns {Array} Returns `data`.
                     */
                    function mergeData(data, source) {
                        var bitmask = data[1],
                            srcBitmask = source[1],
                            newBitmask = bitmask | srcBitmask,
                            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                        var isCombo =
                            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

                        // Exit early if metadata can't be merged.
                        if (!(isCommon || isCombo)) {
                            return data;
                        }
                        // Use source `thisArg` if available.
                        if (srcBitmask & WRAP_BIND_FLAG) {
                            data[2] = source[2];
                            // Set when currying a bound function.
                            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                        }
                        // Compose partial arguments.
                        var value = source[3];
                        if (value) {
                            var partials = data[3];
                            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                        }
                        // Compose partial right arguments.
                        value = source[5];
                        if (value) {
                            partials = data[5];
                            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                        }
                        // Use source `argPos` if available.
                        value = source[7];
                        if (value) {
                            data[7] = value;
                        }
                        // Use source `ary` if it's smaller.
                        if (srcBitmask & WRAP_ARY_FLAG) {
                            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                        }
                        // Use source `arity` if one is not provided.
                        if (data[9] == null) {
                            data[9] = source[9];
                        }
                        // Use source `func` and merge bitmasks.
                        data[0] = source[0];
                        data[1] = newBitmask;

                        return data;
                    }

                    /**
                     * This function is like
                     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                     * except that it includes inherited enumerable properties.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     */
                    function nativeKeysIn(object) {
                        var result = [];
                        if (object != null) {
                            for (var key in Object(object)) {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * Converts `value` to a string using `Object.prototype.toString`.
                     *
                     * @private
                     * @param {*} value The value to convert.
                     * @returns {string} Returns the converted string.
                     */
                    function objectToString(value) {
                        return nativeObjectToString.call(value);
                    }

                    /**
                     * A specialized version of `baseRest` which transforms the rest array.
                     *
                     * @private
                     * @param {Function} func The function to apply a rest parameter to.
                     * @param {number} [start=func.length-1] The start position of the rest parameter.
                     * @param {Function} transform The rest array transform.
                     * @returns {Function} Returns the new function.
                     */
                    function overRest(func, start, transform) {
                        start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                        return function () {
                            var args = arguments,
                                index = -1,
                                length = nativeMax(args.length - start, 0),
                                array = Array(length);

                            while (++index < length) {
                                array[index] = args[start + index];
                            }
                            index = -1;
                            var otherArgs = Array(start + 1);
                            while (++index < start) {
                                otherArgs[index] = args[index];
                            }
                            otherArgs[start] = transform(array);
                            return apply(func, this, otherArgs);
                        };
                    }

                    /**
                     * Gets the parent value at `path` of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array} path The path to get the parent value of.
                     * @returns {*} Returns the parent value.
                     */
                    function parent(object, path) {
                        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                    }

                    /**
                     * Reorder `array` according to the specified indexes where the element at
                     * the first index is assigned as the first element, the element at
                     * the second index is assigned as the second element, and so on.
                     *
                     * @private
                     * @param {Array} array The array to reorder.
                     * @param {Array} indexes The arranged array indexes.
                     * @returns {Array} Returns `array`.
                     */
                    function reorder(array, indexes) {
                        var arrLength = array.length,
                            length = nativeMin(indexes.length, arrLength),
                            oldArray = copyArray(array);

                        while (length--) {
                            var index = indexes[length];
                            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                        }
                        return array;
                    }

                    /**
                     * Sets metadata for `func`.
                     *
                     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                     * period of time, it will trip its breaker and transition to an identity
                     * function to avoid garbage collection pauses in V8. See
                     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                     * for more details.
                     *
                     * @private
                     * @param {Function} func The function to associate metadata with.
                     * @param {*} data The metadata.
                     * @returns {Function} Returns `func`.
                     */
                    var setData = shortOut(baseSetData);

                    /**
                     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                     *
                     * @private
                     * @param {Function} func The function to delay.
                     * @param {number} wait The number of milliseconds to delay invocation.
                     * @returns {number|Object} Returns the timer id or timeout object.
                     */
                    var setTimeout = ctxSetTimeout || function (func, wait) {
                            return root.setTimeout(func, wait);
                        };

                    /**
                     * Sets the `toString` method of `func` to return `string`.
                     *
                     * @private
                     * @param {Function} func The function to modify.
                     * @param {Function} string The `toString` result.
                     * @returns {Function} Returns `func`.
                     */
                    var setToString = shortOut(baseSetToString);

                    /**
                     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                     * with wrapper details in a comment at the top of the source body.
                     *
                     * @private
                     * @param {Function} wrapper The function to modify.
                     * @param {Function} reference The reference function.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @returns {Function} Returns `wrapper`.
                     */
                    function setWrapToString(wrapper, reference, bitmask) {
                        var source = (reference + '');
                        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                    }

                    /**
                     * Creates a function that'll short out and invoke `identity` instead
                     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                     * milliseconds.
                     *
                     * @private
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new shortable function.
                     */
                    function shortOut(func) {
                        var count = 0,
                            lastCalled = 0;

                        return function () {
                            var stamp = nativeNow(),
                                remaining = HOT_SPAN - (stamp - lastCalled);

                            lastCalled = stamp;
                            if (remaining > 0) {
                                if (++count >= HOT_COUNT) {
                                    return arguments[0];
                                }
                            } else {
                                count = 0;
                            }
                            return func.apply(undefined, arguments);
                        };
                    }

                    /**
                     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                     *
                     * @private
                     * @param {Array} array The array to shuffle.
                     * @param {number} [size=array.length] The size of `array`.
                     * @returns {Array} Returns `array`.
                     */
                    function shuffleSelf(array, size) {
                        var index = -1,
                            length = array.length,
                            lastIndex = length - 1;

                        size = size === undefined ? length : size;
                        while (++index < size) {
                            var rand = baseRandom(index, lastIndex),
                                value = array[rand];

                            array[rand] = array[index];
                            array[index] = value;
                        }
                        array.length = size;
                        return array;
                    }

                    /**
                     * Converts `string` to a property path array.
                     *
                     * @private
                     * @param {string} string The string to convert.
                     * @returns {Array} Returns the property path array.
                     */
                    var stringToPath = memoizeCapped(function (string) {
                        var result = [];
                        if (reLeadingDot.test(string)) {
                            result.push('');
                        }
                        string.replace(rePropName, function (match, number, quote, string) {
                            result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
                        });
                        return result;
                    });

                    /**
                     * Converts `value` to a string key if it's not a string or symbol.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @returns {string|symbol} Returns the key.
                     */
                    function toKey(value) {
                        if (typeof value == 'string' || isSymbol(value)) {
                            return value;
                        }
                        var result = (value + '');
                        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                    }

                    /**
                     * Converts `func` to its source code.
                     *
                     * @private
                     * @param {Function} func The function to convert.
                     * @returns {string} Returns the source code.
                     */
                    function toSource(func) {
                        if (func != null) {
                            try {
                                return funcToString.call(func);
                            } catch (e) {
                            }
                            try {
                                return (func + '');
                            } catch (e) {
                            }
                        }
                        return '';
                    }

                    /**
                     * Updates wrapper `details` based on `bitmask` flags.
                     *
                     * @private
                     * @returns {Array} details The details to modify.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @returns {Array} Returns `details`.
                     */
                    function updateWrapDetails(details, bitmask) {
                        arrayEach(wrapFlags, function (pair) {
                            var value = '_.' + pair[0];
                            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                                details.push(value);
                            }
                        });
                        return details.sort();
                    }

                    /**
                     * Creates a clone of `wrapper`.
                     *
                     * @private
                     * @param {Object} wrapper The wrapper to clone.
                     * @returns {Object} Returns the cloned wrapper.
                     */
                    function wrapperClone(wrapper) {
                        if (wrapper instanceof LazyWrapper) {
                            return wrapper.clone();
                        }
                        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                        result.__actions__ = copyArray(wrapper.__actions__);
                        result.__index__ = wrapper.__index__;
                        result.__values__ = wrapper.__values__;
                        return result;
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an array of elements split into groups the length of `size`.
                     * If `array` can't be split evenly, the final chunk will be the remaining
                     * elements.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to process.
                     * @param {number} [size=1] The length of each chunk
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the new array of chunks.
                     * @example
                     *
                     * _.chunk(['a', 'b', 'c', 'd'], 2);
                     * // => [['a', 'b'], ['c', 'd']]
                     *
                     * _.chunk(['a', 'b', 'c', 'd'], 3);
                     * // => [['a', 'b', 'c'], ['d']]
                     */
                    function chunk(array, size, guard) {
                        if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
                            size = 1;
                        } else {
                            size = nativeMax(toInteger(size), 0);
                        }
                        var length = array == null ? 0 : array.length;
                        if (!length || size < 1) {
                            return [];
                        }
                        var index = 0,
                            resIndex = 0,
                            result = Array(nativeCeil(length / size));

                        while (index < length) {
                            result[resIndex++] = baseSlice(array, index, (index += size));
                        }
                        return result;
                    }

                    /**
                     * Creates an array with all falsey values removed. The values `false`, `null`,
                     * `0`, `""`, `undefined`, and `NaN` are falsey.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to compact.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * _.compact([0, 1, false, 2, '', 3]);
                     * // => [1, 2, 3]
                     */
                    function compact(array) {
                        var index = -1,
                            length = array == null ? 0 : array.length,
                            resIndex = 0,
                            result = [];

                        while (++index < length) {
                            var value = array[index];
                            if (value) {
                                result[resIndex++] = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * Creates a new array concatenating `array` with any additional arrays
                     * and/or values.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to concatenate.
                     * @param {...*} [values] The values to concatenate.
                     * @returns {Array} Returns the new concatenated array.
                     * @example
                     *
                     * var array = [1];
                     * var other = _.concat(array, 2, [3], [[4]]);
                     *
                     * console.log(other);
                     * // => [1, 2, 3, [4]]
                     *
                     * console.log(array);
                     * // => [1]
                     */
                    function concat() {
                        var length = arguments.length;
                        if (!length) {
                            return [];
                        }
                        var args = Array(length - 1),
                            array = arguments[0],
                            index = length;

                        while (index--) {
                            args[index - 1] = arguments[index];
                        }
                        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                    }

                    /**
                     * Creates an array of `array` values not included in the other given arrays
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons. The order and references of result values are
                     * determined by the first array.
                     *
                     * **Note:** Unlike `_.pullAll`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...Array} [values] The values to exclude.
                     * @returns {Array} Returns the new array of filtered values.
                     * @see _.without, _.xor
                     * @example
                     *
                     * _.difference([2, 1], [2, 3]);
                     * // => [1]
                     */
                    var difference = baseRest(function (array, values) {
                        return isArrayLikeObject(array)
                            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                            : [];
                    });

                    /**
                     * This method is like `_.difference` except that it accepts `iteratee` which
                     * is invoked for each element of `array` and `values` to generate the criterion
                     * by which they're compared. The order and references of result values are
                     * determined by the first array. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...Array} [values] The values to exclude.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                     * // => [1.2]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                     * // => [{ 'x': 2 }]
                     */
                    var differenceBy = baseRest(function (array, values) {
                        var iteratee = last(values);
                        if (isArrayLikeObject(iteratee)) {
                            iteratee = undefined;
                        }
                        return isArrayLikeObject(array)
                            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
                            : [];
                    });

                    /**
                     * This method is like `_.difference` except that it accepts `comparator`
                     * which is invoked to compare elements of `array` to `values`. The order and
                     * references of result values are determined by the first array. The comparator
                     * is invoked with two arguments: (arrVal, othVal).
                     *
                     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...Array} [values] The values to exclude.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     *
                     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                     * // => [{ 'x': 2, 'y': 1 }]
                     */
                    var differenceWith = baseRest(function (array, values) {
                        var comparator = last(values);
                        if (isArrayLikeObject(comparator)) {
                            comparator = undefined;
                        }
                        return isArrayLikeObject(array)
                            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
                            : [];
                    });

                    /**
                     * Creates a slice of `array` with `n` elements dropped from the beginning.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.5.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to drop.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.drop([1, 2, 3]);
                     * // => [2, 3]
                     *
                     * _.drop([1, 2, 3], 2);
                     * // => [3]
                     *
                     * _.drop([1, 2, 3], 5);
                     * // => []
                     *
                     * _.drop([1, 2, 3], 0);
                     * // => [1, 2, 3]
                     */
                    function drop(array, n, guard) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        return baseSlice(array, n < 0 ? 0 : n, length);
                    }

                    /**
                     * Creates a slice of `array` with `n` elements dropped from the end.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to drop.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.dropRight([1, 2, 3]);
                     * // => [1, 2]
                     *
                     * _.dropRight([1, 2, 3], 2);
                     * // => [1]
                     *
                     * _.dropRight([1, 2, 3], 5);
                     * // => []
                     *
                     * _.dropRight([1, 2, 3], 0);
                     * // => [1, 2, 3]
                     */
                    function dropRight(array, n, guard) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        n = length - n;
                        return baseSlice(array, 0, n < 0 ? 0 : n);
                    }

                    /**
                     * Creates a slice of `array` excluding elements dropped from the end.
                     * Elements are dropped until `predicate` returns falsey. The predicate is
                     * invoked with three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': true },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': false }
                     * ];
                     *
                     * _.dropRightWhile(users, function(o) { return !o.active; });
                     * // => objects for ['barney']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                     * // => objects for ['barney', 'fred']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.dropRightWhile(users, ['active', false]);
                     * // => objects for ['barney']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.dropRightWhile(users, 'active');
                     * // => objects for ['barney', 'fred', 'pebbles']
                     */
                    function dropRightWhile(array, predicate) {
                        return (array && array.length)
                            ? baseWhile(array, getIteratee(predicate, 3), true, true)
                            : [];
                    }

                    /**
                     * Creates a slice of `array` excluding elements dropped from the beginning.
                     * Elements are dropped until `predicate` returns falsey. The predicate is
                     * invoked with three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': false },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': true }
                     * ];
                     *
                     * _.dropWhile(users, function(o) { return !o.active; });
                     * // => objects for ['pebbles']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.dropWhile(users, { 'user': 'barney', 'active': false });
                     * // => objects for ['fred', 'pebbles']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.dropWhile(users, ['active', false]);
                     * // => objects for ['pebbles']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.dropWhile(users, 'active');
                     * // => objects for ['barney', 'fred', 'pebbles']
                     */
                    function dropWhile(array, predicate) {
                        return (array && array.length)
                            ? baseWhile(array, getIteratee(predicate, 3), true)
                            : [];
                    }

                    /**
                     * Fills elements of `array` with `value` from `start` up to, but not
                     * including, `end`.
                     *
                     * **Note:** This method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.2.0
                     * @category Array
                     * @param {Array} array The array to fill.
                     * @param {*} value The value to fill `array` with.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [1, 2, 3];
                     *
                     * _.fill(array, 'a');
                     * console.log(array);
                     * // => ['a', 'a', 'a']
                     *
                     * _.fill(Array(3), 2);
                     * // => [2, 2, 2]
                     *
                     * _.fill([4, 6, 8, 10], '*', 1, 3);
                     * // => [4, '*', '*', 10]
                     */
                    function fill(array, value, start, end) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                            start = 0;
                            end = length;
                        }
                        return baseFill(array, value, start, end);
                    }

                    /**
                     * This method is like `_.find` except that it returns the index of the first
                     * element `predicate` returns truthy for instead of the element itself.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @returns {number} Returns the index of the found element, else `-1`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': false },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': true }
                     * ];
                     *
                     * _.findIndex(users, function(o) { return o.user == 'barney'; });
                     * // => 0
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findIndex(users, { 'user': 'fred', 'active': false });
                     * // => 1
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findIndex(users, ['active', false]);
                     * // => 0
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findIndex(users, 'active');
                     * // => 2
                     */
                    function findIndex(array, predicate, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = fromIndex == null ? 0 : toInteger(fromIndex);
                        if (index < 0) {
                            index = nativeMax(length + index, 0);
                        }
                        return baseFindIndex(array, getIteratee(predicate, 3), index);
                    }

                    /**
                     * This method is like `_.findIndex` except that it iterates over elements
                     * of `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=array.length-1] The index to search from.
                     * @returns {number} Returns the index of the found element, else `-1`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': true },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': false }
                     * ];
                     *
                     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                     * // => 2
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                     * // => 0
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findLastIndex(users, ['active', false]);
                     * // => 2
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findLastIndex(users, 'active');
                     * // => 0
                     */
                    function findLastIndex(array, predicate, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = length - 1;
                        if (fromIndex !== undefined) {
                            index = toInteger(fromIndex);
                            index = fromIndex < 0
                                ? nativeMax(length + index, 0)
                                : nativeMin(index, length - 1);
                        }
                        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                    }

                    /**
                     * Flattens `array` a single level deep.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to flatten.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * _.flatten([1, [2, [3, [4]], 5]]);
                     * // => [1, 2, [3, [4]], 5]
                     */
                    function flatten(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseFlatten(array, 1) : [];
                    }

                    /**
                     * Recursively flattens `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to flatten.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * _.flattenDeep([1, [2, [3, [4]], 5]]);
                     * // => [1, 2, 3, 4, 5]
                     */
                    function flattenDeep(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseFlatten(array, INFINITY) : [];
                    }

                    /**
                     * Recursively flatten `array` up to `depth` times.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.4.0
                     * @category Array
                     * @param {Array} array The array to flatten.
                     * @param {number} [depth=1] The maximum recursion depth.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * var array = [1, [2, [3, [4]], 5]];
                     *
                     * _.flattenDepth(array, 1);
                     * // => [1, 2, [3, [4]], 5]
                     *
                     * _.flattenDepth(array, 2);
                     * // => [1, 2, 3, [4], 5]
                     */
                    function flattenDepth(array, depth) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        depth = depth === undefined ? 1 : toInteger(depth);
                        return baseFlatten(array, depth);
                    }

                    /**
                     * The inverse of `_.toPairs`; this method returns an object composed
                     * from key-value `pairs`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} pairs The key-value pairs.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * _.fromPairs([['a', 1], ['b', 2]]);
                     * // => { 'a': 1, 'b': 2 }
                     */
                    function fromPairs(pairs) {
                        var index = -1,
                            length = pairs == null ? 0 : pairs.length,
                            result = {};

                        while (++index < length) {
                            var pair = pairs[index];
                            result[pair[0]] = pair[1];
                        }
                        return result;
                    }

                    /**
                     * Gets the first element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @alias first
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {*} Returns the first element of `array`.
                     * @example
                     *
                     * _.head([1, 2, 3]);
                     * // => 1
                     *
                     * _.head([]);
                     * // => undefined
                     */
                    function head(array) {
                        return (array && array.length) ? array[0] : undefined;
                    }

                    /**
                     * Gets the index at which the first occurrence of `value` is found in `array`
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons. If `fromIndex` is negative, it's used as the
                     * offset from the end of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.indexOf([1, 2, 1, 2], 2);
                     * // => 1
                     *
                     * // Search from the `fromIndex`.
                     * _.indexOf([1, 2, 1, 2], 2, 2);
                     * // => 3
                     */
                    function indexOf(array, value, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = fromIndex == null ? 0 : toInteger(fromIndex);
                        if (index < 0) {
                            index = nativeMax(length + index, 0);
                        }
                        return baseIndexOf(array, value, index);
                    }

                    /**
                     * Gets all but the last element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.initial([1, 2, 3]);
                     * // => [1, 2]
                     */
                    function initial(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseSlice(array, 0, -1) : [];
                    }

                    /**
                     * Creates an array of unique values that are included in all given arrays
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons. The order and references of result values are
                     * determined by the first array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @returns {Array} Returns the new array of intersecting values.
                     * @example
                     *
                     * _.intersection([2, 1], [2, 3]);
                     * // => [2]
                     */
                    var intersection = baseRest(function (arrays) {
                        var mapped = arrayMap(arrays, castArrayLikeObject);
                        return (mapped.length && mapped[0] === arrays[0])
                            ? baseIntersection(mapped)
                            : [];
                    });

                    /**
                     * This method is like `_.intersection` except that it accepts `iteratee`
                     * which is invoked for each element of each `arrays` to generate the criterion
                     * by which they're compared. The order and references of result values are
                     * determined by the first array. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of intersecting values.
                     * @example
                     *
                     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                     * // => [2.1]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 1 }]
                     */
                    var intersectionBy = baseRest(function (arrays) {
                        var iteratee = last(arrays),
                            mapped = arrayMap(arrays, castArrayLikeObject);

                        if (iteratee === last(mapped)) {
                            iteratee = undefined;
                        } else {
                            mapped.pop();
                        }
                        return (mapped.length && mapped[0] === arrays[0])
                            ? baseIntersection(mapped, getIteratee(iteratee, 2))
                            : [];
                    });

                    /**
                     * This method is like `_.intersection` except that it accepts `comparator`
                     * which is invoked to compare elements of `arrays`. The order and references
                     * of result values are determined by the first array. The comparator is
                     * invoked with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of intersecting values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.intersectionWith(objects, others, _.isEqual);
                     * // => [{ 'x': 1, 'y': 2 }]
                     */
                    var intersectionWith = baseRest(function (arrays) {
                        var comparator = last(arrays),
                            mapped = arrayMap(arrays, castArrayLikeObject);

                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        if (comparator) {
                            mapped.pop();
                        }
                        return (mapped.length && mapped[0] === arrays[0])
                            ? baseIntersection(mapped, undefined, comparator)
                            : [];
                    });

                    /**
                     * Converts all elements in `array` into a string separated by `separator`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to convert.
                     * @param {string} [separator=','] The element separator.
                     * @returns {string} Returns the joined string.
                     * @example
                     *
                     * _.join(['a', 'b', 'c'], '~');
                     * // => 'a~b~c'
                     */
                    function join(array, separator) {
                        return array == null ? '' : nativeJoin.call(array, separator);
                    }

                    /**
                     * Gets the last element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {*} Returns the last element of `array`.
                     * @example
                     *
                     * _.last([1, 2, 3]);
                     * // => 3
                     */
                    function last(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? array[length - 1] : undefined;
                    }

                    /**
                     * This method is like `_.indexOf` except that it iterates over elements of
                     * `array` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} [fromIndex=array.length-1] The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.lastIndexOf([1, 2, 1, 2], 2);
                     * // => 3
                     *
                     * // Search from the `fromIndex`.
                     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                     * // => 1
                     */
                    function lastIndexOf(array, value, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = length;
                        if (fromIndex !== undefined) {
                            index = toInteger(fromIndex);
                            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                        }
                        return value === value
                            ? strictLastIndexOf(array, value, index)
                            : baseFindIndex(array, baseIsNaN, index, true);
                    }

                    /**
                     * Gets the element at index `n` of `array`. If `n` is negative, the nth
                     * element from the end is returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.11.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=0] The index of the element to return.
                     * @returns {*} Returns the nth element of `array`.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'd'];
                     *
                     * _.nth(array, 1);
                     * // => 'b'
                     *
                     * _.nth(array, -2);
                     * // => 'c';
                     */
                    function nth(array, n) {
                        return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
                    }

                    /**
                     * Removes all given values from `array` using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                     * to remove elements from an array by predicate.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {...*} [values] The values to remove.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                     *
                     * _.pull(array, 'a', 'c');
                     * console.log(array);
                     * // => ['b', 'b']
                     */
                    var pull = baseRest(pullAll);

                    /**
                     * This method is like `_.pull` except that it accepts an array of values to remove.
                     *
                     * **Note:** Unlike `_.difference`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                     *
                     * _.pullAll(array, ['a', 'c']);
                     * console.log(array);
                     * // => ['b', 'b']
                     */
                    function pullAll(array, values) {
                        return (array && array.length && values && values.length)
                            ? basePullAll(array, values)
                            : array;
                    }

                    /**
                     * This method is like `_.pullAll` except that it accepts `iteratee` which is
                     * invoked for each element of `array` and `values` to generate the criterion
                     * by which they're compared. The iteratee is invoked with one argument: (value).
                     *
                     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                     *
                     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                     * console.log(array);
                     * // => [{ 'x': 2 }]
                     */
                    function pullAllBy(array, values, iteratee) {
                        return (array && array.length && values && values.length)
                            ? basePullAll(array, values, getIteratee(iteratee, 2))
                            : array;
                    }

                    /**
                     * This method is like `_.pullAll` except that it accepts `comparator` which
                     * is invoked to compare elements of `array` to `values`. The comparator is
                     * invoked with two arguments: (arrVal, othVal).
                     *
                     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.6.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                     *
                     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                     * console.log(array);
                     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                     */
                    function pullAllWith(array, values, comparator) {
                        return (array && array.length && values && values.length)
                            ? basePullAll(array, values, undefined, comparator)
                            : array;
                    }

                    /**
                     * Removes elements from `array` corresponding to `indexes` and returns an
                     * array of removed elements.
                     *
                     * **Note:** Unlike `_.at`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                     * @returns {Array} Returns the new array of removed elements.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'd'];
                     * var pulled = _.pullAt(array, [1, 3]);
                     *
                     * console.log(array);
                     * // => ['a', 'c']
                     *
                     * console.log(pulled);
                     * // => ['b', 'd']
                     */
                    var pullAt = flatRest(function (array, indexes) {
                        var length = array == null ? 0 : array.length,
                            result = baseAt(array, indexes);

                        basePullAt(array, arrayMap(indexes, function (index) {
                            return isIndex(index, length) ? +index : index;
                        }).sort(compareAscending));

                        return result;
                    });

                    /**
                     * Removes all elements from `array` that `predicate` returns truthy for
                     * and returns an array of the removed elements. The predicate is invoked
                     * with three arguments: (value, index, array).
                     *
                     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                     * to pull elements from an array by value.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new array of removed elements.
                     * @example
                     *
                     * var array = [1, 2, 3, 4];
                     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
                     *
                     * console.log(array);
                     * // => [1, 3]
                     *
                     * console.log(evens);
                     * // => [2, 4]
                     */
                    function remove(array, predicate) {
                        var result = [];
                        if (!(array && array.length)) {
                            return result;
                        }
                        var index = -1,
                            indexes = [],
                            length = array.length;

                        predicate = getIteratee(predicate, 3);
                        while (++index < length) {
                            var value = array[index];
                            if (predicate(value, index, array)) {
                                result.push(value);
                                indexes.push(index);
                            }
                        }
                        basePullAt(array, indexes);
                        return result;
                    }

                    /**
                     * Reverses `array` so that the first element becomes the last, the second
                     * element becomes the second to last, and so on.
                     *
                     * **Note:** This method mutates `array` and is based on
                     * [`Array#reverse`](https://mdn.io/Array/reverse).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [1, 2, 3];
                     *
                     * _.reverse(array);
                     * // => [3, 2, 1]
                     *
                     * console.log(array);
                     * // => [3, 2, 1]
                     */
                    function reverse(array) {
                        return array == null ? array : nativeReverse.call(array);
                    }

                    /**
                     * Creates a slice of `array` from `start` up to, but not including, `end`.
                     *
                     * **Note:** This method is used instead of
                     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                     * returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to slice.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns the slice of `array`.
                     */
                    function slice(array, start, end) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                            start = 0;
                            end = length;
                        }
                        else {
                            start = start == null ? 0 : toInteger(start);
                            end = end === undefined ? length : toInteger(end);
                        }
                        return baseSlice(array, start, end);
                    }

                    /**
                     * Uses a binary search to determine the lowest index at which `value`
                     * should be inserted into `array` in order to maintain its sort order.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * _.sortedIndex([30, 50], 40);
                     * // => 1
                     */
                    function sortedIndex(array, value) {
                        return baseSortedIndex(array, value);
                    }

                    /**
                     * This method is like `_.sortedIndex` except that it accepts `iteratee`
                     * which is invoked for `value` and each element of `array` to compute their
                     * sort ranking. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * var objects = [{ 'x': 4 }, { 'x': 5 }];
                     *
                     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                     * // => 0
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                     * // => 0
                     */
                    function sortedIndexBy(array, value, iteratee) {
                        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
                    }

                    /**
                     * This method is like `_.indexOf` except that it performs a binary
                     * search on a sorted `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                     * // => 1
                     */
                    function sortedIndexOf(array, value) {
                        var length = array == null ? 0 : array.length;
                        if (length) {
                            var index = baseSortedIndex(array, value);
                            if (index < length && eq(array[index], value)) {
                                return index;
                            }
                        }
                        return -1;
                    }

                    /**
                     * This method is like `_.sortedIndex` except that it returns the highest
                     * index at which `value` should be inserted into `array` in order to
                     * maintain its sort order.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                     * // => 4
                     */
                    function sortedLastIndex(array, value) {
                        return baseSortedIndex(array, value, true);
                    }

                    /**
                     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                     * which is invoked for `value` and each element of `array` to compute their
                     * sort ranking. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * var objects = [{ 'x': 4 }, { 'x': 5 }];
                     *
                     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                     * // => 1
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                     * // => 1
                     */
                    function sortedLastIndexBy(array, value, iteratee) {
                        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
                    }

                    /**
                     * This method is like `_.lastIndexOf` except that it performs a binary
                     * search on a sorted `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                     * // => 3
                     */
                    function sortedLastIndexOf(array, value) {
                        var length = array == null ? 0 : array.length;
                        if (length) {
                            var index = baseSortedIndex(array, value, true) - 1;
                            if (eq(array[index], value)) {
                                return index;
                            }
                        }
                        return -1;
                    }

                    /**
                     * This method is like `_.uniq` except that it's designed and optimized
                     * for sorted arrays.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.sortedUniq([1, 1, 2]);
                     * // => [1, 2]
                     */
                    function sortedUniq(array) {
                        return (array && array.length)
                            ? baseSortedUniq(array)
                            : [];
                    }

                    /**
                     * This method is like `_.uniqBy` except that it's designed and optimized
                     * for sorted arrays.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                     * // => [1.1, 2.3]
                     */
                    function sortedUniqBy(array, iteratee) {
                        return (array && array.length)
                            ? baseSortedUniq(array, getIteratee(iteratee, 2))
                            : [];
                    }

                    /**
                     * Gets all but the first element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.tail([1, 2, 3]);
                     * // => [2, 3]
                     */
                    function tail(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseSlice(array, 1, length) : [];
                    }

                    /**
                     * Creates a slice of `array` with `n` elements taken from the beginning.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to take.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.take([1, 2, 3]);
                     * // => [1]
                     *
                     * _.take([1, 2, 3], 2);
                     * // => [1, 2]
                     *
                     * _.take([1, 2, 3], 5);
                     * // => [1, 2, 3]
                     *
                     * _.take([1, 2, 3], 0);
                     * // => []
                     */
                    function take(array, n, guard) {
                        if (!(array && array.length)) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        return baseSlice(array, 0, n < 0 ? 0 : n);
                    }

                    /**
                     * Creates a slice of `array` with `n` elements taken from the end.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to take.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.takeRight([1, 2, 3]);
                     * // => [3]
                     *
                     * _.takeRight([1, 2, 3], 2);
                     * // => [2, 3]
                     *
                     * _.takeRight([1, 2, 3], 5);
                     * // => [1, 2, 3]
                     *
                     * _.takeRight([1, 2, 3], 0);
                     * // => []
                     */
                    function takeRight(array, n, guard) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        n = length - n;
                        return baseSlice(array, n < 0 ? 0 : n, length);
                    }

                    /**
                     * Creates a slice of `array` with elements taken from the end. Elements are
                     * taken until `predicate` returns falsey. The predicate is invoked with
                     * three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': true },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': false }
                     * ];
                     *
                     * _.takeRightWhile(users, function(o) { return !o.active; });
                     * // => objects for ['fred', 'pebbles']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                     * // => objects for ['pebbles']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.takeRightWhile(users, ['active', false]);
                     * // => objects for ['fred', 'pebbles']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.takeRightWhile(users, 'active');
                     * // => []
                     */
                    function takeRightWhile(array, predicate) {
                        return (array && array.length)
                            ? baseWhile(array, getIteratee(predicate, 3), false, true)
                            : [];
                    }

                    /**
                     * Creates a slice of `array` with elements taken from the beginning. Elements
                     * are taken until `predicate` returns falsey. The predicate is invoked with
                     * three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': false },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': true }
                     * ];
                     *
                     * _.takeWhile(users, function(o) { return !o.active; });
                     * // => objects for ['barney', 'fred']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.takeWhile(users, { 'user': 'barney', 'active': false });
                     * // => objects for ['barney']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.takeWhile(users, ['active', false]);
                     * // => objects for ['barney', 'fred']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.takeWhile(users, 'active');
                     * // => []
                     */
                    function takeWhile(array, predicate) {
                        return (array && array.length)
                            ? baseWhile(array, getIteratee(predicate, 3))
                            : [];
                    }

                    /**
                     * Creates an array of unique values, in order, from all given arrays using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @returns {Array} Returns the new array of combined values.
                     * @example
                     *
                     * _.union([2], [1, 2]);
                     * // => [2, 1]
                     */
                    var union = baseRest(function (arrays) {
                        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                    });

                    /**
                     * This method is like `_.union` except that it accepts `iteratee` which is
                     * invoked for each element of each `arrays` to generate the criterion by
                     * which uniqueness is computed. Result values are chosen from the first
                     * array in which the value occurs. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of combined values.
                     * @example
                     *
                     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                     * // => [2.1, 1.2]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 1 }, { 'x': 2 }]
                     */
                    var unionBy = baseRest(function (arrays) {
                        var iteratee = last(arrays);
                        if (isArrayLikeObject(iteratee)) {
                            iteratee = undefined;
                        }
                        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
                    });

                    /**
                     * This method is like `_.union` except that it accepts `comparator` which
                     * is invoked to compare elements of `arrays`. Result values are chosen from
                     * the first array in which the value occurs. The comparator is invoked
                     * with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of combined values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.unionWith(objects, others, _.isEqual);
                     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                     */
                    var unionWith = baseRest(function (arrays) {
                        var comparator = last(arrays);
                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
                    });

                    /**
                     * Creates a duplicate-free version of an array, using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons, in which only the first occurrence of each element
                     * is kept. The order of result values is determined by the order they occur
                     * in the array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.uniq([2, 1, 2]);
                     * // => [2, 1]
                     */
                    function uniq(array) {
                        return (array && array.length) ? baseUniq(array) : [];
                    }

                    /**
                     * This method is like `_.uniq` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the criterion by which
                     * uniqueness is computed. The order of result values is determined by the
                     * order they occur in the array. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                     * // => [2.1, 1.2]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 1 }, { 'x': 2 }]
                     */
                    function uniqBy(array, iteratee) {
                        return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
                    }

                    /**
                     * This method is like `_.uniq` except that it accepts `comparator` which
                     * is invoked to compare elements of `array`. The order of result values is
                     * determined by the order they occur in the array.The comparator is invoked
                     * with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.uniqWith(objects, _.isEqual);
                     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                     */
                    function uniqWith(array, comparator) {
                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
                    }

                    /**
                     * This method is like `_.zip` except that it accepts an array of grouped
                     * elements and creates an array regrouping the elements to their pre-zip
                     * configuration.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.2.0
                     * @category Array
                     * @param {Array} array The array of grouped elements to process.
                     * @returns {Array} Returns the new array of regrouped elements.
                     * @example
                     *
                     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                     * // => [['a', 1, true], ['b', 2, false]]
                     *
                     * _.unzip(zipped);
                     * // => [['a', 'b'], [1, 2], [true, false]]
                     */
                    function unzip(array) {
                        if (!(array && array.length)) {
                            return [];
                        }
                        var length = 0;
                        array = arrayFilter(array, function (group) {
                            if (isArrayLikeObject(group)) {
                                length = nativeMax(group.length, length);
                                return true;
                            }
                        });
                        return baseTimes(length, function (index) {
                            return arrayMap(array, baseProperty(index));
                        });
                    }

                    /**
                     * This method is like `_.unzip` except that it accepts `iteratee` to specify
                     * how regrouped values should be combined. The iteratee is invoked with the
                     * elements of each group: (...group).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.8.0
                     * @category Array
                     * @param {Array} array The array of grouped elements to process.
                     * @param {Function} [iteratee=_.identity] The function to combine
                     *  regrouped values.
                     * @returns {Array} Returns the new array of regrouped elements.
                     * @example
                     *
                     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                     * // => [[1, 10, 100], [2, 20, 200]]
                     *
                     * _.unzipWith(zipped, _.add);
                     * // => [3, 30, 300]
                     */
                    function unzipWith(array, iteratee) {
                        if (!(array && array.length)) {
                            return [];
                        }
                        var result = unzip(array);
                        if (iteratee == null) {
                            return result;
                        }
                        return arrayMap(result, function (group) {
                            return apply(iteratee, undefined, group);
                        });
                    }

                    /**
                     * Creates an array excluding all given values using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * **Note:** Unlike `_.pull`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...*} [values] The values to exclude.
                     * @returns {Array} Returns the new array of filtered values.
                     * @see _.difference, _.xor
                     * @example
                     *
                     * _.without([2, 1, 2, 3], 1, 2);
                     * // => [3]
                     */
                    var without = baseRest(function (array, values) {
                        return isArrayLikeObject(array)
                            ? baseDifference(array, values)
                            : [];
                    });

                    /**
                     * Creates an array of unique values that is the
                     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                     * of the given arrays. The order of result values is determined by the order
                     * they occur in the arrays.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @returns {Array} Returns the new array of filtered values.
                     * @see _.difference, _.without
                     * @example
                     *
                     * _.xor([2, 1], [2, 3]);
                     * // => [1, 3]
                     */
                    var xor = baseRest(function (arrays) {
                        return baseXor(arrayFilter(arrays, isArrayLikeObject));
                    });

                    /**
                     * This method is like `_.xor` except that it accepts `iteratee` which is
                     * invoked for each element of each `arrays` to generate the criterion by
                     * which by which they're compared. The order of result values is determined
                     * by the order they occur in the arrays. The iteratee is invoked with one
                     * argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                     * // => [1.2, 3.4]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 2 }]
                     */
                    var xorBy = baseRest(function (arrays) {
                        var iteratee = last(arrays);
                        if (isArrayLikeObject(iteratee)) {
                            iteratee = undefined;
                        }
                        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
                    });

                    /**
                     * This method is like `_.xor` except that it accepts `comparator` which is
                     * invoked to compare elements of `arrays`. The order of result values is
                     * determined by the order they occur in the arrays. The comparator is invoked
                     * with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.xorWith(objects, others, _.isEqual);
                     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                     */
                    var xorWith = baseRest(function (arrays) {
                        var comparator = last(arrays);
                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
                    });

                    /**
                     * Creates an array of grouped elements, the first of which contains the
                     * first elements of the given arrays, the second of which contains the
                     * second elements of the given arrays, and so on.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to process.
                     * @returns {Array} Returns the new array of grouped elements.
                     * @example
                     *
                     * _.zip(['a', 'b'], [1, 2], [true, false]);
                     * // => [['a', 1, true], ['b', 2, false]]
                     */
                    var zip = baseRest(unzip);

                    /**
                     * This method is like `_.fromPairs` except that it accepts two arrays,
                     * one of property identifiers and one of corresponding values.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.4.0
                     * @category Array
                     * @param {Array} [props=[]] The property identifiers.
                     * @param {Array} [values=[]] The property values.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * _.zipObject(['a', 'b'], [1, 2]);
                     * // => { 'a': 1, 'b': 2 }
                     */
                    function zipObject(props, values) {
                        return baseZipObject(props || [], values || [], assignValue);
                    }

                    /**
                     * This method is like `_.zipObject` except that it supports property paths.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.1.0
                     * @category Array
                     * @param {Array} [props=[]] The property identifiers.
                     * @param {Array} [values=[]] The property values.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                     */
                    function zipObjectDeep(props, values) {
                        return baseZipObject(props || [], values || [], baseSet);
                    }

                    /**
                     * This method is like `_.zip` except that it accepts `iteratee` to specify
                     * how grouped values should be combined. The iteratee is invoked with the
                     * elements of each group: (...group).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.8.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to process.
                     * @param {Function} [iteratee=_.identity] The function to combine
                     *  grouped values.
                     * @returns {Array} Returns the new array of grouped elements.
                     * @example
                     *
                     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
                     * // => [111, 222]
                     */
                    var zipWith = baseRest(function (arrays) {
                        var length = arrays.length,
                            iteratee = length > 1 ? arrays[length - 1] : undefined;

                        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
                        return unzipWith(arrays, iteratee);
                    });

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                     * chain sequences enabled. The result of such sequences must be unwrapped
                     * with `_#value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.3.0
                     * @category Seq
                     * @param {*} value The value to wrap.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'age': 36 },
                     *   { 'user': 'fred',    'age': 40 },
                     *   { 'user': 'pebbles', 'age': 1 }
                     * ];
                     *
                     * var youngest = _
                     *   .chain(users)
                     *   .sortBy('age')
                     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
                     *   .head()
                     *   .value();
                     * // => 'pebbles is 1'
                     */
                    function chain(value) {
                        var result = lodash(value);
                        result.__chain__ = true;
                        return result;
                    }

                    /**
                     * This method invokes `interceptor` and returns `value`. The interceptor
                     * is invoked with one argument; (value). The purpose of this method is to
                     * "tap into" a method chain sequence in order to modify intermediate results.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Seq
                     * @param {*} value The value to provide to `interceptor`.
                     * @param {Function} interceptor The function to invoke.
                     * @returns {*} Returns `value`.
                     * @example
                     *
                     * _([1, 2, 3])
                     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
                     *  .reverse()
                     *  .value();
                     * // => [2, 1]
                     */
                    function tap(value, interceptor) {
                        interceptor(value);
                        return value;
                    }

                    /**
                     * This method is like `_.tap` except that it returns the result of `interceptor`.
                     * The purpose of this method is to "pass thru" values replacing intermediate
                     * results in a method chain sequence.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Seq
                     * @param {*} value The value to provide to `interceptor`.
                     * @param {Function} interceptor The function to invoke.
                     * @returns {*} Returns the result of `interceptor`.
                     * @example
                     *
                     * _('  abc  ')
                     *  .chain()
                     *  .trim()
                     *  .thru(function(value) {
     *    return [value];
     *  })
                     *  .value();
                     * // => ['abc']
                     */
                    function thru(value, interceptor) {
                        return interceptor(value);
                    }

                    /**
                     * This method is the wrapper version of `_.at`.
                     *
                     * @name at
                     * @memberOf _
                     * @since 1.0.0
                     * @category Seq
                     * @param {...(string|string[])} [paths] The property paths to pick.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                     *
                     * _(object).at(['a[0].b.c', 'a[1]']).value();
                     * // => [3, 4]
                     */
                    var wrapperAt = flatRest(function (paths) {
                        var length = paths.length,
                            start = length ? paths[0] : 0,
                            value = this.__wrapped__,
                            interceptor = function (object) {
                                return baseAt(object, paths);
                            };

                        if (length > 1 || this.__actions__.length ||
                            !(value instanceof LazyWrapper) || !isIndex(start)) {
                            return this.thru(interceptor);
                        }
                        value = value.slice(start, +start + (length ? 1 : 0));
                        value.__actions__.push({
                            'func': thru,
                            'args': [interceptor],
                            'thisArg': undefined
                        });
                        return new LodashWrapper(value, this.__chain__).thru(function (array) {
                            if (length && !array.length) {
                                array.push(undefined);
                            }
                            return array;
                        });
                    });

                    /**
                     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                     *
                     * @name chain
                     * @memberOf _
                     * @since 0.1.0
                     * @category Seq
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36 },
                     *   { 'user': 'fred',   'age': 40 }
                     * ];
                     *
                     * // A sequence without explicit chaining.
                     * _(users).head();
                     * // => { 'user': 'barney', 'age': 36 }
                     *
                     * // A sequence with explicit chaining.
                     * _(users)
                     *   .chain()
                     *   .head()
                     *   .pick('user')
                     *   .value();
                     * // => { 'user': 'barney' }
                     */
                    function wrapperChain() {
                        return chain(this);
                    }

                    /**
                     * Executes the chain sequence and returns the wrapped result.
                     *
                     * @name commit
                     * @memberOf _
                     * @since 3.2.0
                     * @category Seq
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var array = [1, 2];
                     * var wrapped = _(array).push(3);
                     *
                     * console.log(array);
                     * // => [1, 2]
                     *
                     * wrapped = wrapped.commit();
                     * console.log(array);
                     * // => [1, 2, 3]
                     *
                     * wrapped.last();
                     * // => 3
                     *
                     * console.log(array);
                     * // => [1, 2, 3]
                     */
                    function wrapperCommit() {
                        return new LodashWrapper(this.value(), this.__chain__);
                    }

                    /**
                     * Gets the next value on a wrapped object following the
                     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                     *
                     * @name next
                     * @memberOf _
                     * @since 4.0.0
                     * @category Seq
                     * @returns {Object} Returns the next iterator value.
                     * @example
                     *
                     * var wrapped = _([1, 2]);
                     *
                     * wrapped.next();
                     * // => { 'done': false, 'value': 1 }
                     *
                     * wrapped.next();
                     * // => { 'done': false, 'value': 2 }
                     *
                     * wrapped.next();
                     * // => { 'done': true, 'value': undefined }
                     */
                    function wrapperNext() {
                        if (this.__values__ === undefined) {
                            this.__values__ = toArray(this.value());
                        }
                        var done = this.__index__ >= this.__values__.length,
                            value = done ? undefined : this.__values__[this.__index__++];

                        return {'done': done, 'value': value};
                    }

                    /**
                     * Enables the wrapper to be iterable.
                     *
                     * @name Symbol.iterator
                     * @memberOf _
                     * @since 4.0.0
                     * @category Seq
                     * @returns {Object} Returns the wrapper object.
                     * @example
                     *
                     * var wrapped = _([1, 2]);
                     *
                     * wrapped[Symbol.iterator]() === wrapped;
                     * // => true
                     *
                     * Array.from(wrapped);
                     * // => [1, 2]
                     */
                    function wrapperToIterator() {
                        return this;
                    }

                    /**
                     * Creates a clone of the chain sequence planting `value` as the wrapped value.
                     *
                     * @name plant
                     * @memberOf _
                     * @since 3.2.0
                     * @category Seq
                     * @param {*} value The value to plant.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * function square(n) {
     *   return n * n;
     * }
                     *
                     * var wrapped = _([1, 2]).map(square);
                     * var other = wrapped.plant([3, 4]);
                     *
                     * other.value();
                     * // => [9, 16]
                     *
                     * wrapped.value();
                     * // => [1, 4]
                     */
                    function wrapperPlant(value) {
                        var result,
                            parent = this;

                        while (parent instanceof baseLodash) {
                            var clone = wrapperClone(parent);
                            clone.__index__ = 0;
                            clone.__values__ = undefined;
                            if (result) {
                                previous.__wrapped__ = clone;
                            } else {
                                result = clone;
                            }
                            var previous = clone;
                            parent = parent.__wrapped__;
                        }
                        previous.__wrapped__ = value;
                        return result;
                    }

                    /**
                     * This method is the wrapper version of `_.reverse`.
                     *
                     * **Note:** This method mutates the wrapped array.
                     *
                     * @name reverse
                     * @memberOf _
                     * @since 0.1.0
                     * @category Seq
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var array = [1, 2, 3];
                     *
                     * _(array).reverse().value()
                     * // => [3, 2, 1]
                     *
                     * console.log(array);
                     * // => [3, 2, 1]
                     */
                    function wrapperReverse() {
                        var value = this.__wrapped__;
                        if (value instanceof LazyWrapper) {
                            var wrapped = value;
                            if (this.__actions__.length) {
                                wrapped = new LazyWrapper(this);
                            }
                            wrapped = wrapped.reverse();
                            wrapped.__actions__.push({
                                'func': thru,
                                'args': [reverse],
                                'thisArg': undefined
                            });
                            return new LodashWrapper(wrapped, this.__chain__);
                        }
                        return this.thru(reverse);
                    }

                    /**
                     * Executes the chain sequence to resolve the unwrapped value.
                     *
                     * @name value
                     * @memberOf _
                     * @since 0.1.0
                     * @alias toJSON, valueOf
                     * @category Seq
                     * @returns {*} Returns the resolved unwrapped value.
                     * @example
                     *
                     * _([1, 2, 3]).value();
                     * // => [1, 2, 3]
                     */
                    function wrapperValue() {
                        return baseWrapperValue(this.__wrapped__, this.__actions__);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an object composed of keys generated from the results of running
                     * each element of `collection` thru `iteratee`. The corresponding value of
                     * each key is the number of times the key was returned by `iteratee`. The
                     * iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.5.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                     * @returns {Object} Returns the composed aggregate object.
                     * @example
                     *
                     * _.countBy([6.1, 4.2, 6.3], Math.floor);
                     * // => { '4': 1, '6': 2 }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.countBy(['one', 'two', 'three'], 'length');
                     * // => { '3': 2, '5': 1 }
                     */
                    var countBy = createAggregator(function (result, value, key) {
                        if (hasOwnProperty.call(result, key)) {
                            ++result[key];
                        } else {
                            baseAssignValue(result, key, 1);
                        }
                    });

                    /**
                     * Checks if `predicate` returns truthy for **all** elements of `collection`.
                     * Iteration is stopped once `predicate` returns falsey. The predicate is
                     * invoked with three arguments: (value, index|key, collection).
                     *
                     * **Note:** This method returns `true` for
                     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                     * elements of empty collections.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {boolean} Returns `true` if all elements pass the predicate check,
                     *  else `false`.
                     * @example
                     *
                     * _.every([true, 1, null, 'yes'], Boolean);
                     * // => false
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': false },
                     *   { 'user': 'fred',   'age': 40, 'active': false }
                     * ];
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.every(users, { 'user': 'barney', 'active': false });
                     * // => false
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.every(users, ['active', false]);
                     * // => true
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.every(users, 'active');
                     * // => false
                     */
                    function every(collection, predicate, guard) {
                        var func = isArray(collection) ? arrayEvery : baseEvery;
                        if (guard && isIterateeCall(collection, predicate, guard)) {
                            predicate = undefined;
                        }
                        return func(collection, getIteratee(predicate, 3));
                    }

                    /**
                     * Iterates over elements of `collection`, returning an array of all elements
                     * `predicate` returns truthy for. The predicate is invoked with three
                     * arguments: (value, index|key, collection).
                     *
                     * **Note:** Unlike `_.remove`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     * @see _.reject
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': true },
                     *   { 'user': 'fred',   'age': 40, 'active': false }
                     * ];
                     *
                     * _.filter(users, function(o) { return !o.active; });
                     * // => objects for ['fred']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.filter(users, { 'age': 36, 'active': true });
                     * // => objects for ['barney']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.filter(users, ['active', false]);
                     * // => objects for ['fred']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.filter(users, 'active');
                     * // => objects for ['barney']
                     */
                    function filter(collection, predicate) {
                        var func = isArray(collection) ? arrayFilter : baseFilter;
                        return func(collection, getIteratee(predicate, 3));
                    }

                    /**
                     * Iterates over elements of `collection`, returning the first element
                     * `predicate` returns truthy for. The predicate is invoked with three
                     * arguments: (value, index|key, collection).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @returns {*} Returns the matched element, else `undefined`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'age': 36, 'active': true },
                     *   { 'user': 'fred',    'age': 40, 'active': false },
                     *   { 'user': 'pebbles', 'age': 1,  'active': true }
                     * ];
                     *
                     * _.find(users, function(o) { return o.age < 40; });
                     * // => object for 'barney'
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.find(users, { 'age': 1, 'active': true });
                     * // => object for 'pebbles'
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.find(users, ['active', false]);
                     * // => object for 'fred'
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.find(users, 'active');
                     * // => object for 'barney'
                     */
                    var find = createFind(findIndex);

                    /**
                     * This method is like `_.find` except that it iterates over elements of
                     * `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=collection.length-1] The index to search from.
                     * @returns {*} Returns the matched element, else `undefined`.
                     * @example
                     *
                     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
                     * // => 3
                     */
                    var findLast = createFind(findLastIndex);

                    /**
                     * Creates a flattened array of values by running each element in `collection`
                     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                     * with three arguments: (value, index|key, collection).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * function duplicate(n) {
     *   return [n, n];
     * }
                     *
                     * _.flatMap([1, 2], duplicate);
                     * // => [1, 1, 2, 2]
                     */
                    function flatMap(collection, iteratee) {
                        return baseFlatten(map(collection, iteratee), 1);
                    }

                    /**
                     * This method is like `_.flatMap` except that it recursively flattens the
                     * mapped results.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
                     *
                     * _.flatMapDeep([1, 2], duplicate);
                     * // => [1, 1, 2, 2]
                     */
                    function flatMapDeep(collection, iteratee) {
                        return baseFlatten(map(collection, iteratee), INFINITY);
                    }

                    /**
                     * This method is like `_.flatMap` except that it recursively flattens the
                     * mapped results up to `depth` times.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {number} [depth=1] The maximum recursion depth.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
                     *
                     * _.flatMapDepth([1, 2], duplicate, 2);
                     * // => [[1, 1], [2, 2]]
                     */
                    function flatMapDepth(collection, iteratee, depth) {
                        depth = depth === undefined ? 1 : toInteger(depth);
                        return baseFlatten(map(collection, iteratee), depth);
                    }

                    /**
                     * Iterates over elements of `collection` and invokes `iteratee` for each element.
                     * The iteratee is invoked with three arguments: (value, index|key, collection).
                     * Iteratee functions may exit iteration early by explicitly returning `false`.
                     *
                     * **Note:** As with other "Collections" methods, objects with a "length"
                     * property are iterated like arrays. To avoid this behavior use `_.forIn`
                     * or `_.forOwn` for object iteration.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @alias each
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     * @see _.forEachRight
                     * @example
                     *
                     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
                     * // => Logs `1` then `2`.
                     *
                     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
                     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                     */
                    function forEach(collection, iteratee) {
                        var func = isArray(collection) ? arrayEach : baseEach;
                        return func(collection, getIteratee(iteratee, 3));
                    }

                    /**
                     * This method is like `_.forEach` except that it iterates over elements of
                     * `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @alias eachRight
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     * @see _.forEach
                     * @example
                     *
                     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
                     * // => Logs `2` then `1`.
                     */
                    function forEachRight(collection, iteratee) {
                        var func = isArray(collection) ? arrayEachRight : baseEachRight;
                        return func(collection, getIteratee(iteratee, 3));
                    }

                    /**
                     * Creates an object composed of keys generated from the results of running
                     * each element of `collection` thru `iteratee`. The order of grouped values
                     * is determined by the order they occur in `collection`. The corresponding
                     * value of each key is an array of elements responsible for generating the
                     * key. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                     * @returns {Object} Returns the composed aggregate object.
                     * @example
                     *
                     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                     * // => { '4': [4.2], '6': [6.1, 6.3] }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.groupBy(['one', 'two', 'three'], 'length');
                     * // => { '3': ['one', 'two'], '5': ['three'] }
                     */
                    var groupBy = createAggregator(function (result, value, key) {
                        if (hasOwnProperty.call(result, key)) {
                            result[key].push(value);
                        } else {
                            baseAssignValue(result, key, [value]);
                        }
                    });

                    /**
                     * Checks if `value` is in `collection`. If `collection` is a string, it's
                     * checked for a substring of `value`, otherwise
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * is used for equality comparisons. If `fromIndex` is negative, it's used as
                     * the offset from the end of `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object|string} collection The collection to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                     * @returns {boolean} Returns `true` if `value` is found, else `false`.
                     * @example
                     *
                     * _.includes([1, 2, 3], 1);
                     * // => true
                     *
                     * _.includes([1, 2, 3], 1, 2);
                     * // => false
                     *
                     * _.includes({ 'a': 1, 'b': 2 }, 1);
                     * // => true
                     *
                     * _.includes('abcd', 'bc');
                     * // => true
                     */
                    function includes(collection, value, fromIndex, guard) {
                        collection = isArrayLike(collection) ? collection : values(collection);
                        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

                        var length = collection.length;
                        if (fromIndex < 0) {
                            fromIndex = nativeMax(length + fromIndex, 0);
                        }
                        return isString(collection)
                            ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
                            : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
                    }

                    /**
                     * Invokes the method at `path` of each element in `collection`, returning
                     * an array of the results of each invoked method. Any additional arguments
                     * are provided to each invoked method. If `path` is a function, it's invoked
                     * for, and `this` bound to, each element in `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Array|Function|string} path The path of the method to invoke or
                     *  the function invoked per iteration.
                     * @param {...*} [args] The arguments to invoke each method with.
                     * @returns {Array} Returns the array of results.
                     * @example
                     *
                     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                     * // => [[1, 5, 7], [1, 2, 3]]
                     *
                     * _.invokeMap([123, 456], String.prototype.split, '');
                     * // => [['1', '2', '3'], ['4', '5', '6']]
                     */
                    var invokeMap = baseRest(function (collection, path, args) {
                        var index = -1,
                            isFunc = typeof path == 'function',
                            result = isArrayLike(collection) ? Array(collection.length) : [];

                        baseEach(collection, function (value) {
                            result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                        });
                        return result;
                    });

                    /**
                     * Creates an object composed of keys generated from the results of running
                     * each element of `collection` thru `iteratee`. The corresponding value of
                     * each key is the last element responsible for generating the key. The
                     * iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                     * @returns {Object} Returns the composed aggregate object.
                     * @example
                     *
                     * var array = [
                     *   { 'dir': 'left', 'code': 97 },
                     *   { 'dir': 'right', 'code': 100 }
                     * ];
                     *
                     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
                     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                     *
                     * _.keyBy(array, 'dir');
                     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                     */
                    var keyBy = createAggregator(function (result, value, key) {
                        baseAssignValue(result, key, value);
                    });

                    /**
                     * Creates an array of values by running each element in `collection` thru
                     * `iteratee`. The iteratee is invoked with three arguments:
                     * (value, index|key, collection).
                     *
                     * Many lodash methods are guarded to work as iteratees for methods like
                     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                     *
                     * The guarded methods are:
                     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new mapped array.
                     * @example
                     *
                     * function square(n) {
     *   return n * n;
     * }
                     *
                     * _.map([4, 8], square);
                     * // => [16, 64]
                     *
                     * _.map({ 'a': 4, 'b': 8 }, square);
                     * // => [16, 64] (iteration order is not guaranteed)
                     *
                     * var users = [
                     *   { 'user': 'barney' },
                     *   { 'user': 'fred' }
                     * ];
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.map(users, 'user');
                     * // => ['barney', 'fred']
                     */
                    function map(collection, iteratee) {
                        var func = isArray(collection) ? arrayMap : baseMap;
                        return func(collection, getIteratee(iteratee, 3));
                    }

                    /**
                     * This method is like `_.sortBy` except that it allows specifying the sort
                     * orders of the iteratees to sort by. If `orders` is unspecified, all values
                     * are sorted in ascending order. Otherwise, specify an order of "desc" for
                     * descending or "asc" for ascending sort order of corresponding values.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                     *  The iteratees to sort by.
                     * @param {string[]} [orders] The sort orders of `iteratees`.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                     * @returns {Array} Returns the new sorted array.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'fred',   'age': 48 },
                     *   { 'user': 'barney', 'age': 34 },
                     *   { 'user': 'fred',   'age': 40 },
                     *   { 'user': 'barney', 'age': 36 }
                     * ];
                     *
                     * // Sort by `user` in ascending order and by `age` in descending order.
                     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                     */
                    function orderBy(collection, iteratees, orders, guard) {
                        if (collection == null) {
                            return [];
                        }
                        if (!isArray(iteratees)) {
                            iteratees = iteratees == null ? [] : [iteratees];
                        }
                        orders = guard ? undefined : orders;
                        if (!isArray(orders)) {
                            orders = orders == null ? [] : [orders];
                        }
                        return baseOrderBy(collection, iteratees, orders);
                    }

                    /**
                     * Creates an array of elements split into two groups, the first of which
                     * contains elements `predicate` returns truthy for, the second of which
                     * contains elements `predicate` returns falsey for. The predicate is
                     * invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the array of grouped elements.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'age': 36, 'active': false },
                     *   { 'user': 'fred',    'age': 40, 'active': true },
                     *   { 'user': 'pebbles', 'age': 1,  'active': false }
                     * ];
                     *
                     * _.partition(users, function(o) { return o.active; });
                     * // => objects for [['fred'], ['barney', 'pebbles']]
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.partition(users, { 'age': 1, 'active': false });
                     * // => objects for [['pebbles'], ['barney', 'fred']]
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.partition(users, ['active', false]);
                     * // => objects for [['barney', 'pebbles'], ['fred']]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.partition(users, 'active');
                     * // => objects for [['fred'], ['barney', 'pebbles']]
                     */
                    var partition = createAggregator(function (result, value, key) {
                        result[key ? 0 : 1].push(value);
                    }, function () {
                        return [[], []];
                    });

                    /**
                     * Reduces `collection` to a value which is the accumulated result of running
                     * each element in `collection` thru `iteratee`, where each successive
                     * invocation is supplied the return value of the previous. If `accumulator`
                     * is not given, the first element of `collection` is used as the initial
                     * value. The iteratee is invoked with four arguments:
                     * (accumulator, value, index|key, collection).
                     *
                     * Many lodash methods are guarded to work as iteratees for methods like
                     * `_.reduce`, `_.reduceRight`, and `_.transform`.
                     *
                     * The guarded methods are:
                     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                     * and `sortBy`
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @returns {*} Returns the accumulated value.
                     * @see _.reduceRight
                     * @example
                     *
                     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
                     * // => 3
                     *
                     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
                     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                     */
                    function reduce(collection, iteratee, accumulator) {
                        var func = isArray(collection) ? arrayReduce : baseReduce,
                            initAccum = arguments.length < 3;

                        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
                    }

                    /**
                     * This method is like `_.reduce` except that it iterates over elements of
                     * `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @returns {*} Returns the accumulated value.
                     * @see _.reduce
                     * @example
                     *
                     * var array = [[0, 1], [2, 3], [4, 5]];
                     *
                     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
                     * // => [4, 5, 2, 3, 0, 1]
                     */
                    function reduceRight(collection, iteratee, accumulator) {
                        var func = isArray(collection) ? arrayReduceRight : baseReduce,
                            initAccum = arguments.length < 3;

                        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
                    }

                    /**
                     * The opposite of `_.filter`; this method returns the elements of `collection`
                     * that `predicate` does **not** return truthy for.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     * @see _.filter
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': false },
                     *   { 'user': 'fred',   'age': 40, 'active': true }
                     * ];
                     *
                     * _.reject(users, function(o) { return !o.active; });
                     * // => objects for ['fred']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.reject(users, { 'age': 40, 'active': true });
                     * // => objects for ['barney']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.reject(users, ['active', false]);
                     * // => objects for ['fred']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.reject(users, 'active');
                     * // => objects for ['barney']
                     */
                    function reject(collection, predicate) {
                        var func = isArray(collection) ? arrayFilter : baseFilter;
                        return func(collection, negate(getIteratee(predicate, 3)));
                    }

                    /**
                     * Gets a random element from `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to sample.
                     * @returns {*} Returns the random element.
                     * @example
                     *
                     * _.sample([1, 2, 3, 4]);
                     * // => 2
                     */
                    function sample(collection) {
                        var func = isArray(collection) ? arraySample : baseSample;
                        return func(collection);
                    }

                    /**
                     * Gets `n` random elements at unique keys from `collection` up to the
                     * size of `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to sample.
                     * @param {number} [n=1] The number of elements to sample.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the random elements.
                     * @example
                     *
                     * _.sampleSize([1, 2, 3], 2);
                     * // => [3, 1]
                     *
                     * _.sampleSize([1, 2, 3], 4);
                     * // => [2, 3, 1]
                     */
                    function sampleSize(collection, n, guard) {
                        if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
                            n = 1;
                        } else {
                            n = toInteger(n);
                        }
                        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                        return func(collection, n);
                    }

                    /**
                     * Creates an array of shuffled values, using a version of the
                     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to shuffle.
                     * @returns {Array} Returns the new shuffled array.
                     * @example
                     *
                     * _.shuffle([1, 2, 3, 4]);
                     * // => [4, 1, 3, 2]
                     */
                    function shuffle(collection) {
                        var func = isArray(collection) ? arrayShuffle : baseShuffle;
                        return func(collection);
                    }

                    /**
                     * Gets the size of `collection` by returning its length for array-like
                     * values or the number of own enumerable string keyed properties for objects.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object|string} collection The collection to inspect.
                     * @returns {number} Returns the collection size.
                     * @example
                     *
                     * _.size([1, 2, 3]);
                     * // => 3
                     *
                     * _.size({ 'a': 1, 'b': 2 });
                     * // => 2
                     *
                     * _.size('pebbles');
                     * // => 7
                     */
                    function size(collection) {
                        if (collection == null) {
                            return 0;
                        }
                        if (isArrayLike(collection)) {
                            return isString(collection) ? stringSize(collection) : collection.length;
                        }
                        var tag = getTag(collection);
                        if (tag == mapTag || tag == setTag) {
                            return collection.size;
                        }
                        return baseKeys(collection).length;
                    }

                    /**
                     * Checks if `predicate` returns truthy for **any** element of `collection`.
                     * Iteration is stopped once `predicate` returns truthy. The predicate is
                     * invoked with three arguments: (value, index|key, collection).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {boolean} Returns `true` if any element passes the predicate check,
                     *  else `false`.
                     * @example
                     *
                     * _.some([null, 0, 'yes', false], Boolean);
                     * // => true
                     *
                     * var users = [
                     *   { 'user': 'barney', 'active': true },
                     *   { 'user': 'fred',   'active': false }
                     * ];
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.some(users, { 'user': 'barney', 'active': false });
                     * // => false
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.some(users, ['active', false]);
                     * // => true
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.some(users, 'active');
                     * // => true
                     */
                    function some(collection, predicate, guard) {
                        var func = isArray(collection) ? arraySome : baseSome;
                        if (guard && isIterateeCall(collection, predicate, guard)) {
                            predicate = undefined;
                        }
                        return func(collection, getIteratee(predicate, 3));
                    }

                    /**
                     * Creates an array of elements, sorted in ascending order by the results of
                     * running each element in a collection thru each iteratee. This method
                     * performs a stable sort, that is, it preserves the original sort order of
                     * equal elements. The iteratees are invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {...(Function|Function[])} [iteratees=[_.identity]]
                     *  The iteratees to sort by.
                     * @returns {Array} Returns the new sorted array.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'fred',   'age': 48 },
                     *   { 'user': 'barney', 'age': 36 },
                     *   { 'user': 'fred',   'age': 40 },
                     *   { 'user': 'barney', 'age': 34 }
                     * ];
                     *
                     * _.sortBy(users, [function(o) { return o.user; }]);
                     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                     *
                     * _.sortBy(users, ['user', 'age']);
                     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
                     */
                    var sortBy = baseRest(function (collection, iteratees) {
                        if (collection == null) {
                            return [];
                        }
                        var length = iteratees.length;
                        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                            iteratees = [];
                        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                            iteratees = [iteratees[0]];
                        }
                        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                    });

                    /*------------------------------------------------------------------------*/

                    /**
                     * Gets the timestamp of the number of milliseconds that have elapsed since
                     * the Unix epoch (1 January 1970 00:00:00 UTC).
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Date
                     * @returns {number} Returns the timestamp.
                     * @example
                     *
                     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
                     * // => Logs the number of milliseconds it took for the deferred invocation.
                     */
                    var now = ctxNow || function () {
                            return root.Date.now();
                        };

                    /*------------------------------------------------------------------------*/

                    /**
                     * The opposite of `_.before`; this method creates a function that invokes
                     * `func` once it's called `n` or more times.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {number} n The number of calls before `func` is invoked.
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new restricted function.
                     * @example
                     *
                     * var saves = ['profile', 'settings'];
                     *
                     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
                     *
                     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
                     * // => Logs 'done saving!' after the two async saves have completed.
                     */
                    function after(n, func) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        n = toInteger(n);
                        return function () {
                            if (--n < 1) {
                                return func.apply(this, arguments);
                            }
                        };
                    }

                    /**
                     * Creates a function that invokes `func`, with up to `n` arguments,
                     * ignoring any additional arguments.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} func The function to cap arguments for.
                     * @param {number} [n=func.length] The arity cap.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the new capped function.
                     * @example
                     *
                     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                     * // => [6, 8, 10]
                     */
                    function ary(func, n, guard) {
                        n = guard ? undefined : n;
                        n = (func && n == null) ? func.length : n;
                        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
                    }

                    /**
                     * Creates a function that invokes `func`, with the `this` binding and arguments
                     * of the created function, while it's called less than `n` times. Subsequent
                     * calls to the created function return the result of the last `func` invocation.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {number} n The number of calls at which `func` is no longer invoked.
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new restricted function.
                     * @example
                     *
                     * jQuery(element).on('click', _.before(5, addContactToList));
                     * // => Allows adding up to 4 contacts to the list.
                     */
                    function before(n, func) {
                        var result;
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        n = toInteger(n);
                        return function () {
                            if (--n > 0) {
                                result = func.apply(this, arguments);
                            }
                            if (n <= 1) {
                                func = undefined;
                            }
                            return result;
                        };
                    }

                    /**
                     * Creates a function that invokes `func` with the `this` binding of `thisArg`
                     * and `partials` prepended to the arguments it receives.
                     *
                     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                     * may be used as a placeholder for partially applied arguments.
                     *
                     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                     * property of bound functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to bind.
                     * @param {*} thisArg The `this` binding of `func`.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new bound function.
                     * @example
                     *
                     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
                     *
                     * var object = { 'user': 'fred' };
                     *
                     * var bound = _.bind(greet, object, 'hi');
                     * bound('!');
                     * // => 'hi fred!'
                     *
                     * // Bound with placeholders.
                     * var bound = _.bind(greet, object, _, '!');
                     * bound('hi');
                     * // => 'hi fred!'
                     */
                    var bind = baseRest(function (func, thisArg, partials) {
                        var bitmask = WRAP_BIND_FLAG;
                        if (partials.length) {
                            var holders = replaceHolders(partials, getHolder(bind));
                            bitmask |= WRAP_PARTIAL_FLAG;
                        }
                        return createWrap(func, bitmask, thisArg, partials, holders);
                    });

                    /**
                     * Creates a function that invokes the method at `object[key]` with `partials`
                     * prepended to the arguments it receives.
                     *
                     * This method differs from `_.bind` by allowing bound functions to reference
                     * methods that may be redefined or don't yet exist. See
                     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                     * for more details.
                     *
                     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for partially applied arguments.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.10.0
                     * @category Function
                     * @param {Object} object The object to invoke the method on.
                     * @param {string} key The key of the method.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new bound function.
                     * @example
                     *
                     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
                     *
                     * var bound = _.bindKey(object, 'greet', 'hi');
                     * bound('!');
                     * // => 'hi fred!'
                     *
                     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
                     *
                     * bound('!');
                     * // => 'hiya fred!'
                     *
                     * // Bound with placeholders.
                     * var bound = _.bindKey(object, 'greet', _, '!');
                     * bound('hi');
                     * // => 'hiya fred!'
                     */
                    var bindKey = baseRest(function (object, key, partials) {
                        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                        if (partials.length) {
                            var holders = replaceHolders(partials, getHolder(bindKey));
                            bitmask |= WRAP_PARTIAL_FLAG;
                        }
                        return createWrap(key, bitmask, object, partials, holders);
                    });

                    /**
                     * Creates a function that accepts arguments of `func` and either invokes
                     * `func` returning its result, if at least `arity` number of arguments have
                     * been provided, or returns a function that accepts the remaining `func`
                     * arguments, and so on. The arity of `func` may be specified if `func.length`
                     * is not sufficient.
                     *
                     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                     * may be used as a placeholder for provided arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of curried functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Function
                     * @param {Function} func The function to curry.
                     * @param {number} [arity=func.length] The arity of `func`.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the new curried function.
                     * @example
                     *
                     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
                     *
                     * var curried = _.curry(abc);
                     *
                     * curried(1)(2)(3);
                     * // => [1, 2, 3]
                     *
                     * curried(1, 2)(3);
                     * // => [1, 2, 3]
                     *
                     * curried(1, 2, 3);
                     * // => [1, 2, 3]
                     *
                     * // Curried with placeholders.
                     * curried(1)(_, 3)(2);
                     * // => [1, 2, 3]
                     */
                    function curry(func, arity, guard) {
                        arity = guard ? undefined : arity;
                        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                        result.placeholder = curry.placeholder;
                        return result;
                    }

                    /**
                     * This method is like `_.curry` except that arguments are applied to `func`
                     * in the manner of `_.partialRight` instead of `_.partial`.
                     *
                     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for provided arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of curried functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} func The function to curry.
                     * @param {number} [arity=func.length] The arity of `func`.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the new curried function.
                     * @example
                     *
                     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
                     *
                     * var curried = _.curryRight(abc);
                     *
                     * curried(3)(2)(1);
                     * // => [1, 2, 3]
                     *
                     * curried(2, 3)(1);
                     * // => [1, 2, 3]
                     *
                     * curried(1, 2, 3);
                     * // => [1, 2, 3]
                     *
                     * // Curried with placeholders.
                     * curried(3)(1, _)(2);
                     * // => [1, 2, 3]
                     */
                    function curryRight(func, arity, guard) {
                        arity = guard ? undefined : arity;
                        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                        result.placeholder = curryRight.placeholder;
                        return result;
                    }

                    /**
                     * Creates a debounced function that delays invoking `func` until after `wait`
                     * milliseconds have elapsed since the last time the debounced function was
                     * invoked. The debounced function comes with a `cancel` method to cancel
                     * delayed `func` invocations and a `flush` method to immediately invoke them.
                     * Provide `options` to indicate whether `func` should be invoked on the
                     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                     * with the last arguments provided to the debounced function. Subsequent
                     * calls to the debounced function return the result of the last `func`
                     * invocation.
                     *
                     * **Note:** If `leading` and `trailing` options are `true`, `func` is
                     * invoked on the trailing edge of the timeout only if the debounced function
                     * is invoked more than once during the `wait` timeout.
                     *
                     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                     *
                     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                     * for details over the differences between `_.debounce` and `_.throttle`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to debounce.
                     * @param {number} [wait=0] The number of milliseconds to delay.
                     * @param {Object} [options={}] The options object.
                     * @param {boolean} [options.leading=false]
                     *  Specify invoking on the leading edge of the timeout.
                     * @param {number} [options.maxWait]
                     *  The maximum time `func` is allowed to be delayed before it's invoked.
                     * @param {boolean} [options.trailing=true]
                     *  Specify invoking on the trailing edge of the timeout.
                     * @returns {Function} Returns the new debounced function.
                     * @example
                     *
                     * // Avoid costly calculations while the window size is in flux.
                     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                     *
                     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
                     *
                     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                     * var source = new EventSource('/stream');
                     * jQuery(source).on('message', debounced);
                     *
                     * // Cancel the trailing debounced invocation.
                     * jQuery(window).on('popstate', debounced.cancel);
                     */
                    function debounce(func, wait, options) {
                        var lastArgs,
                            lastThis,
                            maxWait,
                            result,
                            timerId,
                            lastCallTime,
                            lastInvokeTime = 0,
                            leading = false,
                            maxing = false,
                            trailing = true;

                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        wait = toNumber(wait) || 0;
                        if (isObject(options)) {
                            leading = !!options.leading;
                            maxing = 'maxWait' in options;
                            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                            trailing = 'trailing' in options ? !!options.trailing : trailing;
                        }

                        function invokeFunc(time) {
                            var args = lastArgs,
                                thisArg = lastThis;

                            lastArgs = lastThis = undefined;
                            lastInvokeTime = time;
                            result = func.apply(thisArg, args);
                            return result;
                        }

                        function leadingEdge(time) {
                            // Reset any `maxWait` timer.
                            lastInvokeTime = time;
                            // Start the timer for the trailing edge.
                            timerId = setTimeout(timerExpired, wait);
                            // Invoke the leading edge.
                            return leading ? invokeFunc(time) : result;
                        }

                        function remainingWait(time) {
                            var timeSinceLastCall = time - lastCallTime,
                                timeSinceLastInvoke = time - lastInvokeTime,
                                result = wait - timeSinceLastCall;

                            return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
                        }

                        function shouldInvoke(time) {
                            var timeSinceLastCall = time - lastCallTime,
                                timeSinceLastInvoke = time - lastInvokeTime;

                            // Either this is the first call, activity has stopped and we're at the
                            // trailing edge, the system time has gone backwards and we're treating
                            // it as the trailing edge, or we've hit the `maxWait` limit.
                            return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                        }

                        function timerExpired() {
                            var time = now();
                            if (shouldInvoke(time)) {
                                return trailingEdge(time);
                            }
                            // Restart the timer.
                            timerId = setTimeout(timerExpired, remainingWait(time));
                        }

                        function trailingEdge(time) {
                            timerId = undefined;

                            // Only invoke if we have `lastArgs` which means `func` has been
                            // debounced at least once.
                            if (trailing && lastArgs) {
                                return invokeFunc(time);
                            }
                            lastArgs = lastThis = undefined;
                            return result;
                        }

                        function cancel() {
                            if (timerId !== undefined) {
                                clearTimeout(timerId);
                            }
                            lastInvokeTime = 0;
                            lastArgs = lastCallTime = lastThis = timerId = undefined;
                        }

                        function flush() {
                            return timerId === undefined ? result : trailingEdge(now());
                        }

                        function debounced() {
                            var time = now(),
                                isInvoking = shouldInvoke(time);

                            lastArgs = arguments;
                            lastThis = this;
                            lastCallTime = time;

                            if (isInvoking) {
                                if (timerId === undefined) {
                                    return leadingEdge(lastCallTime);
                                }
                                if (maxing) {
                                    // Handle invocations in a tight loop.
                                    timerId = setTimeout(timerExpired, wait);
                                    return invokeFunc(lastCallTime);
                                }
                            }
                            if (timerId === undefined) {
                                timerId = setTimeout(timerExpired, wait);
                            }
                            return result;
                        }

                        debounced.cancel = cancel;
                        debounced.flush = flush;
                        return debounced;
                    }

                    /**
                     * Defers invoking the `func` until the current call stack has cleared. Any
                     * additional arguments are provided to `func` when it's invoked.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to defer.
                     * @param {...*} [args] The arguments to invoke `func` with.
                     * @returns {number} Returns the timer id.
                     * @example
                     *
                     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
                     * // => Logs 'deferred' after one millisecond.
                     */
                    var defer = baseRest(function (func, args) {
                        return baseDelay(func, 1, args);
                    });

                    /**
                     * Invokes `func` after `wait` milliseconds. Any additional arguments are
                     * provided to `func` when it's invoked.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to delay.
                     * @param {number} wait The number of milliseconds to delay invocation.
                     * @param {...*} [args] The arguments to invoke `func` with.
                     * @returns {number} Returns the timer id.
                     * @example
                     *
                     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
                     * // => Logs 'later' after one second.
                     */
                    var delay = baseRest(function (func, wait, args) {
                        return baseDelay(func, toNumber(wait) || 0, args);
                    });

                    /**
                     * Creates a function that invokes `func` with arguments reversed.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Function
                     * @param {Function} func The function to flip arguments for.
                     * @returns {Function} Returns the new flipped function.
                     * @example
                     *
                     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
                     *
                     * flipped('a', 'b', 'c', 'd');
                     * // => ['d', 'c', 'b', 'a']
                     */
                    function flip(func) {
                        return createWrap(func, WRAP_FLIP_FLAG);
                    }

                    /**
                     * Creates a function that memoizes the result of `func`. If `resolver` is
                     * provided, it determines the cache key for storing the result based on the
                     * arguments provided to the memoized function. By default, the first argument
                     * provided to the memoized function is used as the map cache key. The `func`
                     * is invoked with the `this` binding of the memoized function.
                     *
                     * **Note:** The cache is exposed as the `cache` property on the memoized
                     * function. Its creation may be customized by replacing the `_.memoize.Cache`
                     * constructor with one whose instances implement the
                     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to have its output memoized.
                     * @param {Function} [resolver] The function to resolve the cache key.
                     * @returns {Function} Returns the new memoized function.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2 };
                     * var other = { 'c': 3, 'd': 4 };
                     *
                     * var values = _.memoize(_.values);
                     * values(object);
                     * // => [1, 2]
                     *
                     * values(other);
                     * // => [3, 4]
                     *
                     * object.a = 2;
                     * values(object);
                     * // => [1, 2]
                     *
                     * // Modify the result cache.
                     * values.cache.set(object, ['a', 'b']);
                     * values(object);
                     * // => ['a', 'b']
                     *
                     * // Replace `_.memoize.Cache`.
                     * _.memoize.Cache = WeakMap;
                     */
                    function memoize(func, resolver) {
                        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        var memoized = function () {
                            var args = arguments,
                                key = resolver ? resolver.apply(this, args) : args[0],
                                cache = memoized.cache;

                            if (cache.has(key)) {
                                return cache.get(key);
                            }
                            var result = func.apply(this, args);
                            memoized.cache = cache.set(key, result) || cache;
                            return result;
                        };
                        memoized.cache = new (memoize.Cache || MapCache);
                        return memoized;
                    }

                    // Expose `MapCache`.
                    memoize.Cache = MapCache;

                    /**
                     * Creates a function that negates the result of the predicate `func`. The
                     * `func` predicate is invoked with the `this` binding and arguments of the
                     * created function.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} predicate The predicate to negate.
                     * @returns {Function} Returns the new negated function.
                     * @example
                     *
                     * function isEven(n) {
     *   return n % 2 == 0;
     * }
                     *
                     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                     * // => [1, 3, 5]
                     */
                    function negate(predicate) {
                        if (typeof predicate != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        return function () {
                            var args = arguments;
                            switch (args.length) {
                                case 0:
                                    return !predicate.call(this);
                                case 1:
                                    return !predicate.call(this, args[0]);
                                case 2:
                                    return !predicate.call(this, args[0], args[1]);
                                case 3:
                                    return !predicate.call(this, args[0], args[1], args[2]);
                            }
                            return !predicate.apply(this, args);
                        };
                    }

                    /**
                     * Creates a function that is restricted to invoking `func` once. Repeat calls
                     * to the function return the value of the first invocation. The `func` is
                     * invoked with the `this` binding and arguments of the created function.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new restricted function.
                     * @example
                     *
                     * var initialize = _.once(createApplication);
                     * initialize();
                     * initialize();
                     * // => `createApplication` is invoked once
                     */
                    function once(func) {
                        return before(2, func);
                    }

                    /**
                     * Creates a function that invokes `func` with its arguments transformed.
                     *
                     * @static
                     * @since 4.0.0
                     * @memberOf _
                     * @category Function
                     * @param {Function} func The function to wrap.
                     * @param {...(Function|Function[])} [transforms=[_.identity]]
                     *  The argument transforms.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * function doubled(n) {
     *   return n * 2;
     * }
                     *
                     * function square(n) {
     *   return n * n;
     * }
                     *
                     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
                     *
                     * func(9, 3);
                     * // => [81, 6]
                     *
                     * func(10, 5);
                     * // => [100, 10]
                     */
                    var overArgs = castRest(function (func, transforms) {
                        transforms = (transforms.length == 1 && isArray(transforms[0]))
                            ? arrayMap(transforms[0], baseUnary(getIteratee()))
                            : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                        var funcsLength = transforms.length;
                        return baseRest(function (args) {
                            var index = -1,
                                length = nativeMin(args.length, funcsLength);

                            while (++index < length) {
                                args[index] = transforms[index].call(this, args[index]);
                            }
                            return apply(func, this, args);
                        });
                    });

                    /**
                     * Creates a function that invokes `func` with `partials` prepended to the
                     * arguments it receives. This method is like `_.bind` except it does **not**
                     * alter the `this` binding.
                     *
                     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for partially applied arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of partially
                     * applied functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.2.0
                     * @category Function
                     * @param {Function} func The function to partially apply arguments to.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new partially applied function.
                     * @example
                     *
                     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
                     *
                     * var sayHelloTo = _.partial(greet, 'hello');
                     * sayHelloTo('fred');
                     * // => 'hello fred'
                     *
                     * // Partially applied with placeholders.
                     * var greetFred = _.partial(greet, _, 'fred');
                     * greetFred('hi');
                     * // => 'hi fred'
                     */
                    var partial = baseRest(function (func, partials) {
                        var holders = replaceHolders(partials, getHolder(partial));
                        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
                    });

                    /**
                     * This method is like `_.partial` except that partially applied arguments
                     * are appended to the arguments it receives.
                     *
                     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for partially applied arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of partially
                     * applied functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.0.0
                     * @category Function
                     * @param {Function} func The function to partially apply arguments to.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new partially applied function.
                     * @example
                     *
                     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
                     *
                     * var greetFred = _.partialRight(greet, 'fred');
                     * greetFred('hi');
                     * // => 'hi fred'
                     *
                     * // Partially applied with placeholders.
                     * var sayHelloTo = _.partialRight(greet, 'hello', _);
                     * sayHelloTo('fred');
                     * // => 'hello fred'
                     */
                    var partialRight = baseRest(function (func, partials) {
                        var holders = replaceHolders(partials, getHolder(partialRight));
                        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
                    });

                    /**
                     * Creates a function that invokes `func` with arguments arranged according
                     * to the specified `indexes` where the argument value at the first index is
                     * provided as the first argument, the argument value at the second index is
                     * provided as the second argument, and so on.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} func The function to rearrange arguments for.
                     * @param {...(number|number[])} indexes The arranged argument indexes.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
                     *
                     * rearged('b', 'c', 'a')
                     * // => ['a', 'b', 'c']
                     */
                    var rearg = flatRest(function (func, indexes) {
                        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
                    });

                    /**
                     * Creates a function that invokes `func` with the `this` binding of the
                     * created function and arguments from `start` and beyond provided as
                     * an array.
                     *
                     * **Note:** This method is based on the
                     * [rest parameter](https://mdn.io/rest_parameters).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Function
                     * @param {Function} func The function to apply a rest parameter to.
                     * @param {number} [start=func.length-1] The start position of the rest parameter.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
                     *
                     * say('hello', 'fred', 'barney', 'pebbles');
                     * // => 'hello fred, barney, & pebbles'
                     */
                    function rest(func, start) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        start = start === undefined ? start : toInteger(start);
                        return baseRest(func, start);
                    }

                    /**
                     * Creates a function that invokes `func` with the `this` binding of the
                     * create function and an array of arguments much like
                     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                     *
                     * **Note:** This method is based on the
                     * [spread operator](https://mdn.io/spread_operator).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.2.0
                     * @category Function
                     * @param {Function} func The function to spread arguments over.
                     * @param {number} [start=0] The start position of the spread.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
                     *
                     * say(['fred', 'hello']);
                     * // => 'fred says hello'
                     *
                     * var numbers = Promise.all([
                     *   Promise.resolve(40),
                     *   Promise.resolve(36)
                     * ]);
                     *
                     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
                     * // => a Promise of 76
                     */
                    function spread(func, start) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        start = start == null ? 0 : nativeMax(toInteger(start), 0);
                        return baseRest(function (args) {
                            var array = args[start],
                                otherArgs = castSlice(args, 0, start);

                            if (array) {
                                arrayPush(otherArgs, array);
                            }
                            return apply(func, this, otherArgs);
                        });
                    }

                    /**
                     * Creates a throttled function that only invokes `func` at most once per
                     * every `wait` milliseconds. The throttled function comes with a `cancel`
                     * method to cancel delayed `func` invocations and a `flush` method to
                     * immediately invoke them. Provide `options` to indicate whether `func`
                     * should be invoked on the leading and/or trailing edge of the `wait`
                     * timeout. The `func` is invoked with the last arguments provided to the
                     * throttled function. Subsequent calls to the throttled function return the
                     * result of the last `func` invocation.
                     *
                     * **Note:** If `leading` and `trailing` options are `true`, `func` is
                     * invoked on the trailing edge of the timeout only if the throttled function
                     * is invoked more than once during the `wait` timeout.
                     *
                     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                     *
                     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                     * for details over the differences between `_.throttle` and `_.debounce`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to throttle.
                     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                     * @param {Object} [options={}] The options object.
                     * @param {boolean} [options.leading=true]
                     *  Specify invoking on the leading edge of the timeout.
                     * @param {boolean} [options.trailing=true]
                     *  Specify invoking on the trailing edge of the timeout.
                     * @returns {Function} Returns the new throttled function.
                     * @example
                     *
                     * // Avoid excessively updating the position while scrolling.
                     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                     *
                     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                     * jQuery(element).on('click', throttled);
                     *
                     * // Cancel the trailing throttled invocation.
                     * jQuery(window).on('popstate', throttled.cancel);
                     */
                    function throttle(func, wait, options) {
                        var leading = true,
                            trailing = true;

                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        if (isObject(options)) {
                            leading = 'leading' in options ? !!options.leading : leading;
                            trailing = 'trailing' in options ? !!options.trailing : trailing;
                        }
                        return debounce(func, wait, {
                            'leading': leading,
                            'maxWait': wait,
                            'trailing': trailing
                        });
                    }

                    /**
                     * Creates a function that accepts up to one argument, ignoring any
                     * additional arguments.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Function
                     * @param {Function} func The function to cap arguments for.
                     * @returns {Function} Returns the new capped function.
                     * @example
                     *
                     * _.map(['6', '8', '10'], _.unary(parseInt));
                     * // => [6, 8, 10]
                     */
                    function unary(func) {
                        return ary(func, 1);
                    }

                    /**
                     * Creates a function that provides `value` to `wrapper` as its first
                     * argument. Any additional arguments provided to the function are appended
                     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                     * binding of the created function.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {*} value The value to wrap.
                     * @param {Function} [wrapper=identity] The wrapper function.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
                     *
                     * p('fred, barney, & pebbles');
                     * // => '<p>fred, barney, &amp; pebbles</p>'
                     */
                    function wrap(value, wrapper) {
                        return partial(castFunction(wrapper), value);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Casts `value` as an array if it's not one.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.4.0
                     * @category Lang
                     * @param {*} value The value to inspect.
                     * @returns {Array} Returns the cast array.
                     * @example
                     *
                     * _.castArray(1);
                     * // => [1]
                     *
                     * _.castArray({ 'a': 1 });
                     * // => [{ 'a': 1 }]
                     *
                     * _.castArray('abc');
                     * // => ['abc']
                     *
                     * _.castArray(null);
                     * // => [null]
                     *
                     * _.castArray(undefined);
                     * // => [undefined]
                     *
                     * _.castArray();
                     * // => []
                     *
                     * var array = [1, 2, 3];
                     * console.log(_.castArray(array) === array);
                     * // => true
                     */
                    function castArray() {
                        if (!arguments.length) {
                            return [];
                        }
                        var value = arguments[0];
                        return isArray(value) ? value : [value];
                    }

                    /**
                     * Creates a shallow clone of `value`.
                     *
                     * **Note:** This method is loosely based on the
                     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                     * and supports cloning arrays, array buffers, booleans, date objects, maps,
                     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                     * arrays. The own enumerable properties of `arguments` objects are cloned
                     * as plain objects. An empty object is returned for uncloneable values such
                     * as error objects, functions, DOM nodes, and WeakMaps.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to clone.
                     * @returns {*} Returns the cloned value.
                     * @see _.cloneDeep
                     * @example
                     *
                     * var objects = [{ 'a': 1 }, { 'b': 2 }];
                     *
                     * var shallow = _.clone(objects);
                     * console.log(shallow[0] === objects[0]);
                     * // => true
                     */
                    function clone(value) {
                        return baseClone(value, CLONE_SYMBOLS_FLAG);
                    }

                    /**
                     * This method is like `_.clone` except that it accepts `customizer` which
                     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                     * cloning is handled by the method instead. The `customizer` is invoked with
                     * up to four arguments; (value [, index|key, object, stack]).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to clone.
                     * @param {Function} [customizer] The function to customize cloning.
                     * @returns {*} Returns the cloned value.
                     * @see _.cloneDeepWith
                     * @example
                     *
                     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
                     *
                     * var el = _.cloneWith(document.body, customizer);
                     *
                     * console.log(el === document.body);
                     * // => false
                     * console.log(el.nodeName);
                     * // => 'BODY'
                     * console.log(el.childNodes.length);
                     * // => 0
                     */
                    function cloneWith(value, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                    }

                    /**
                     * This method is like `_.clone` except that it recursively clones `value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.0.0
                     * @category Lang
                     * @param {*} value The value to recursively clone.
                     * @returns {*} Returns the deep cloned value.
                     * @see _.clone
                     * @example
                     *
                     * var objects = [{ 'a': 1 }, { 'b': 2 }];
                     *
                     * var deep = _.cloneDeep(objects);
                     * console.log(deep[0] === objects[0]);
                     * // => false
                     */
                    function cloneDeep(value) {
                        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                    }

                    /**
                     * This method is like `_.cloneWith` except that it recursively clones `value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to recursively clone.
                     * @param {Function} [customizer] The function to customize cloning.
                     * @returns {*} Returns the deep cloned value.
                     * @see _.cloneWith
                     * @example
                     *
                     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
                     *
                     * var el = _.cloneDeepWith(document.body, customizer);
                     *
                     * console.log(el === document.body);
                     * // => false
                     * console.log(el.nodeName);
                     * // => 'BODY'
                     * console.log(el.childNodes.length);
                     * // => 20
                     */
                    function cloneDeepWith(value, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                    }

                    /**
                     * Checks if `object` conforms to `source` by invoking the predicate
                     * properties of `source` with the corresponding property values of `object`.
                     *
                     * **Note:** This method is equivalent to `_.conforms` when `source` is
                     * partially applied.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.14.0
                     * @category Lang
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2 };
                     *
                     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                     * // => true
                     *
                     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                     * // => false
                     */
                    function conformsTo(object, source) {
                        return source == null || baseConformsTo(object, source, keys(source));
                    }

                    /**
                     * Performs a
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * comparison between two values to determine if they are equivalent.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1 };
                     * var other = { 'a': 1 };
                     *
                     * _.eq(object, object);
                     * // => true
                     *
                     * _.eq(object, other);
                     * // => false
                     *
                     * _.eq('a', 'a');
                     * // => true
                     *
                     * _.eq('a', Object('a'));
                     * // => false
                     *
                     * _.eq(NaN, NaN);
                     * // => true
                     */
                    function eq(value, other) {
                        return value === other || (value !== value && other !== other);
                    }

                    /**
                     * Checks if `value` is greater than `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is greater than `other`,
                     *  else `false`.
                     * @see _.lt
                     * @example
                     *
                     * _.gt(3, 1);
                     * // => true
                     *
                     * _.gt(3, 3);
                     * // => false
                     *
                     * _.gt(1, 3);
                     * // => false
                     */
                    var gt = createRelationalOperation(baseGt);

                    /**
                     * Checks if `value` is greater than or equal to `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is greater than or equal to
                     *  `other`, else `false`.
                     * @see _.lte
                     * @example
                     *
                     * _.gte(3, 1);
                     * // => true
                     *
                     * _.gte(3, 3);
                     * // => true
                     *
                     * _.gte(1, 3);
                     * // => false
                     */
                    var gte = createRelationalOperation(function (value, other) {
                        return value >= other;
                    });

                    /**
                     * Checks if `value` is likely an `arguments` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                     *  else `false`.
                     * @example
                     *
                     * _.isArguments(function() { return arguments; }());
                     * // => true
                     *
                     * _.isArguments([1, 2, 3]);
                     * // => false
                     */
                    var isArguments = baseIsArguments(function () {
                        return arguments;
                    }()) ? baseIsArguments : function (value) {
                        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                            !propertyIsEnumerable.call(value, 'callee');
                    };

                    /**
                     * Checks if `value` is classified as an `Array` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                     * @example
                     *
                     * _.isArray([1, 2, 3]);
                     * // => true
                     *
                     * _.isArray(document.body.children);
                     * // => false
                     *
                     * _.isArray('abc');
                     * // => false
                     *
                     * _.isArray(_.noop);
                     * // => false
                     */
                    var isArray = Array.isArray;

                    /**
                     * Checks if `value` is classified as an `ArrayBuffer` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                     * @example
                     *
                     * _.isArrayBuffer(new ArrayBuffer(2));
                     * // => true
                     *
                     * _.isArrayBuffer(new Array(2));
                     * // => false
                     */
                    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

                    /**
                     * Checks if `value` is array-like. A value is considered array-like if it's
                     * not a function and has a `value.length` that's an integer greater than or
                     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                     * @example
                     *
                     * _.isArrayLike([1, 2, 3]);
                     * // => true
                     *
                     * _.isArrayLike(document.body.children);
                     * // => true
                     *
                     * _.isArrayLike('abc');
                     * // => true
                     *
                     * _.isArrayLike(_.noop);
                     * // => false
                     */
                    function isArrayLike(value) {
                        return value != null && isLength(value.length) && !isFunction(value);
                    }

                    /**
                     * This method is like `_.isArrayLike` except that it also checks if `value`
                     * is an object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array-like object,
                     *  else `false`.
                     * @example
                     *
                     * _.isArrayLikeObject([1, 2, 3]);
                     * // => true
                     *
                     * _.isArrayLikeObject(document.body.children);
                     * // => true
                     *
                     * _.isArrayLikeObject('abc');
                     * // => false
                     *
                     * _.isArrayLikeObject(_.noop);
                     * // => false
                     */
                    function isArrayLikeObject(value) {
                        return isObjectLike(value) && isArrayLike(value);
                    }

                    /**
                     * Checks if `value` is classified as a boolean primitive or object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                     * @example
                     *
                     * _.isBoolean(false);
                     * // => true
                     *
                     * _.isBoolean(null);
                     * // => false
                     */
                    function isBoolean(value) {
                        return value === true || value === false ||
                            (isObjectLike(value) && baseGetTag(value) == boolTag);
                    }

                    /**
                     * Checks if `value` is a buffer.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                     * @example
                     *
                     * _.isBuffer(new Buffer(2));
                     * // => true
                     *
                     * _.isBuffer(new Uint8Array(2));
                     * // => false
                     */
                    var isBuffer = nativeIsBuffer || stubFalse;

                    /**
                     * Checks if `value` is classified as a `Date` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                     * @example
                     *
                     * _.isDate(new Date);
                     * // => true
                     *
                     * _.isDate('Mon April 23 2012');
                     * // => false
                     */
                    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                    /**
                     * Checks if `value` is likely a DOM element.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                     * @example
                     *
                     * _.isElement(document.body);
                     * // => true
                     *
                     * _.isElement('<body>');
                     * // => false
                     */
                    function isElement(value) {
                        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                    }

                    /**
                     * Checks if `value` is an empty object, collection, map, or set.
                     *
                     * Objects are considered empty if they have no own enumerable string keyed
                     * properties.
                     *
                     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                     * jQuery-like collections are considered empty if they have a `length` of `0`.
                     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                     * @example
                     *
                     * _.isEmpty(null);
                     * // => true
                     *
                     * _.isEmpty(true);
                     * // => true
                     *
                     * _.isEmpty(1);
                     * // => true
                     *
                     * _.isEmpty([1, 2, 3]);
                     * // => false
                     *
                     * _.isEmpty({ 'a': 1 });
                     * // => false
                     */
                    function isEmpty(value) {
                        if (value == null) {
                            return true;
                        }
                        if (isArrayLike(value) &&
                            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                            return !value.length;
                        }
                        var tag = getTag(value);
                        if (tag == mapTag || tag == setTag) {
                            return !value.size;
                        }
                        if (isPrototype(value)) {
                            return !baseKeys(value).length;
                        }
                        for (var key in value) {
                            if (hasOwnProperty.call(value, key)) {
                                return false;
                            }
                        }
                        return true;
                    }

                    /**
                     * Performs a deep comparison between two values to determine if they are
                     * equivalent.
                     *
                     * **Note:** This method supports comparing arrays, array buffers, booleans,
                     * date objects, error objects, maps, numbers, `Object` objects, regexes,
                     * sets, strings, symbols, and typed arrays. `Object` objects are compared
                     * by their own, not inherited, enumerable properties. Functions and DOM
                     * nodes are compared by strict equality, i.e. `===`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1 };
                     * var other = { 'a': 1 };
                     *
                     * _.isEqual(object, other);
                     * // => true
                     *
                     * object === other;
                     * // => false
                     */
                    function isEqual(value, other) {
                        return baseIsEqual(value, other);
                    }

                    /**
                     * This method is like `_.isEqual` except that it accepts `customizer` which
                     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                     * are handled by the method instead. The `customizer` is invoked with up to
                     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     * @example
                     *
                     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
                     *
                     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
                     *
                     * var array = ['hello', 'goodbye'];
                     * var other = ['hi', 'goodbye'];
                     *
                     * _.isEqualWith(array, other, customizer);
                     * // => true
                     */
                    function isEqualWith(value, other, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        var result = customizer ? customizer(value, other) : undefined;
                        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
                    }

                    /**
                     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                     * `SyntaxError`, `TypeError`, or `URIError` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                     * @example
                     *
                     * _.isError(new Error);
                     * // => true
                     *
                     * _.isError(Error);
                     * // => false
                     */
                    function isError(value) {
                        if (!isObjectLike(value)) {
                            return false;
                        }
                        var tag = baseGetTag(value);
                        return tag == errorTag || tag == domExcTag ||
                            (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
                    }

                    /**
                     * Checks if `value` is a finite primitive number.
                     *
                     * **Note:** This method is based on
                     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                     * @example
                     *
                     * _.isFinite(3);
                     * // => true
                     *
                     * _.isFinite(Number.MIN_VALUE);
                     * // => true
                     *
                     * _.isFinite(Infinity);
                     * // => false
                     *
                     * _.isFinite('3');
                     * // => false
                     */
                    function isFinite(value) {
                        return typeof value == 'number' && nativeIsFinite(value);
                    }

                    /**
                     * Checks if `value` is classified as a `Function` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                     * @example
                     *
                     * _.isFunction(_);
                     * // => true
                     *
                     * _.isFunction(/abc/);
                     * // => false
                     */
                    function isFunction(value) {
                        if (!isObject(value)) {
                            return false;
                        }
                        // The use of `Object#toString` avoids issues with the `typeof` operator
                        // in Safari 9 which returns 'object' for typed arrays and other constructors.
                        var tag = baseGetTag(value);
                        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                    }

                    /**
                     * Checks if `value` is an integer.
                     *
                     * **Note:** This method is based on
                     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                     * @example
                     *
                     * _.isInteger(3);
                     * // => true
                     *
                     * _.isInteger(Number.MIN_VALUE);
                     * // => false
                     *
                     * _.isInteger(Infinity);
                     * // => false
                     *
                     * _.isInteger('3');
                     * // => false
                     */
                    function isInteger(value) {
                        return typeof value == 'number' && value == toInteger(value);
                    }

                    /**
                     * Checks if `value` is a valid array-like length.
                     *
                     * **Note:** This method is loosely based on
                     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                     * @example
                     *
                     * _.isLength(3);
                     * // => true
                     *
                     * _.isLength(Number.MIN_VALUE);
                     * // => false
                     *
                     * _.isLength(Infinity);
                     * // => false
                     *
                     * _.isLength('3');
                     * // => false
                     */
                    function isLength(value) {
                        return typeof value == 'number' &&
                            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                    }

                    /**
                     * Checks if `value` is the
                     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                     * @example
                     *
                     * _.isObject({});
                     * // => true
                     *
                     * _.isObject([1, 2, 3]);
                     * // => true
                     *
                     * _.isObject(_.noop);
                     * // => true
                     *
                     * _.isObject(null);
                     * // => false
                     */
                    function isObject(value) {
                        var type = typeof value;
                        return value != null && (type == 'object' || type == 'function');
                    }

                    /**
                     * Checks if `value` is object-like. A value is object-like if it's not `null`
                     * and has a `typeof` result of "object".
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                     * @example
                     *
                     * _.isObjectLike({});
                     * // => true
                     *
                     * _.isObjectLike([1, 2, 3]);
                     * // => true
                     *
                     * _.isObjectLike(_.noop);
                     * // => false
                     *
                     * _.isObjectLike(null);
                     * // => false
                     */
                    function isObjectLike(value) {
                        return value != null && typeof value == 'object';
                    }

                    /**
                     * Checks if `value` is classified as a `Map` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                     * @example
                     *
                     * _.isMap(new Map);
                     * // => true
                     *
                     * _.isMap(new WeakMap);
                     * // => false
                     */
                    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                    /**
                     * Performs a partial deep comparison between `object` and `source` to
                     * determine if `object` contains equivalent property values.
                     *
                     * **Note:** This method is equivalent to `_.matches` when `source` is
                     * partially applied.
                     *
                     * Partial comparisons will match empty array and empty object `source`
                     * values against any array or object value, respectively. See `_.isEqual`
                     * for a list of supported value comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property values to match.
                     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2 };
                     *
                     * _.isMatch(object, { 'b': 2 });
                     * // => true
                     *
                     * _.isMatch(object, { 'b': 1 });
                     * // => false
                     */
                    function isMatch(object, source) {
                        return object === source || baseIsMatch(object, source, getMatchData(source));
                    }

                    /**
                     * This method is like `_.isMatch` except that it accepts `customizer` which
                     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                     * are handled by the method instead. The `customizer` is invoked with five
                     * arguments: (objValue, srcValue, index|key, object, source).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property values to match.
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                     * @example
                     *
                     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
                     *
                     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
                     *
                     * var object = { 'greeting': 'hello' };
                     * var source = { 'greeting': 'hi' };
                     *
                     * _.isMatchWith(object, source, customizer);
                     * // => true
                     */
                    function isMatchWith(object, source, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return baseIsMatch(object, source, getMatchData(source), customizer);
                    }

                    /**
                     * Checks if `value` is `NaN`.
                     *
                     * **Note:** This method is based on
                     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                     * `undefined` and other non-number values.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                     * @example
                     *
                     * _.isNaN(NaN);
                     * // => true
                     *
                     * _.isNaN(new Number(NaN));
                     * // => true
                     *
                     * isNaN(undefined);
                     * // => true
                     *
                     * _.isNaN(undefined);
                     * // => false
                     */
                    function isNaN(value) {
                        // An `NaN` primitive is the only value that is not equal to itself.
                        // Perform the `toStringTag` check first to avoid errors with some
                        // ActiveX objects in IE.
                        return isNumber(value) && value != +value;
                    }

                    /**
                     * Checks if `value` is a pristine native function.
                     *
                     * **Note:** This method can't reliably detect native functions in the presence
                     * of the core-js package because core-js circumvents this kind of detection.
                     * Despite multiple requests, the core-js maintainer has made it clear: any
                     * attempt to fix the detection will be obstructed. As a result, we're left
                     * with little choice but to throw an error. Unfortunately, this also affects
                     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                     * which rely on core-js.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a native function,
                     *  else `false`.
                     * @example
                     *
                     * _.isNative(Array.prototype.push);
                     * // => true
                     *
                     * _.isNative(_);
                     * // => false
                     */
                    function isNative(value) {
                        if (isMaskable(value)) {
                            throw new Error(CORE_ERROR_TEXT);
                        }
                        return baseIsNative(value);
                    }

                    /**
                     * Checks if `value` is `null`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                     * @example
                     *
                     * _.isNull(null);
                     * // => true
                     *
                     * _.isNull(void 0);
                     * // => false
                     */
                    function isNull(value) {
                        return value === null;
                    }

                    /**
                     * Checks if `value` is `null` or `undefined`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                     * @example
                     *
                     * _.isNil(null);
                     * // => true
                     *
                     * _.isNil(void 0);
                     * // => true
                     *
                     * _.isNil(NaN);
                     * // => false
                     */
                    function isNil(value) {
                        return value == null;
                    }

                    /**
                     * Checks if `value` is classified as a `Number` primitive or object.
                     *
                     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                     * classified as numbers, use the `_.isFinite` method.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                     * @example
                     *
                     * _.isNumber(3);
                     * // => true
                     *
                     * _.isNumber(Number.MIN_VALUE);
                     * // => true
                     *
                     * _.isNumber(Infinity);
                     * // => true
                     *
                     * _.isNumber('3');
                     * // => false
                     */
                    function isNumber(value) {
                        return typeof value == 'number' ||
                            (isObjectLike(value) && baseGetTag(value) == numberTag);
                    }

                    /**
                     * Checks if `value` is a plain object, that is, an object created by the
                     * `Object` constructor or one with a `[[Prototype]]` of `null`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.8.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     * }
                     *
                     * _.isPlainObject(new Foo);
                     * // => false
                     *
                     * _.isPlainObject([1, 2, 3]);
                     * // => false
                     *
                     * _.isPlainObject({ 'x': 0, 'y': 0 });
                     * // => true
                     *
                     * _.isPlainObject(Object.create(null));
                     * // => true
                     */
                    function isPlainObject(value) {
                        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                            return false;
                        }
                        var proto = getPrototype(value);
                        if (proto === null) {
                            return true;
                        }
                        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                        return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                            funcToString.call(Ctor) == objectCtorString;
                    }

                    /**
                     * Checks if `value` is classified as a `RegExp` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                     * @example
                     *
                     * _.isRegExp(/abc/);
                     * // => true
                     *
                     * _.isRegExp('/abc/');
                     * // => false
                     */
                    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

                    /**
                     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                     * double precision number which isn't the result of a rounded unsafe integer.
                     *
                     * **Note:** This method is based on
                     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                     * @example
                     *
                     * _.isSafeInteger(3);
                     * // => true
                     *
                     * _.isSafeInteger(Number.MIN_VALUE);
                     * // => false
                     *
                     * _.isSafeInteger(Infinity);
                     * // => false
                     *
                     * _.isSafeInteger('3');
                     * // => false
                     */
                    function isSafeInteger(value) {
                        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                    }

                    /**
                     * Checks if `value` is classified as a `Set` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                     * @example
                     *
                     * _.isSet(new Set);
                     * // => true
                     *
                     * _.isSet(new WeakSet);
                     * // => false
                     */
                    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                    /**
                     * Checks if `value` is classified as a `String` primitive or object.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                     * @example
                     *
                     * _.isString('abc');
                     * // => true
                     *
                     * _.isString(1);
                     * // => false
                     */
                    function isString(value) {
                        return typeof value == 'string' ||
                            (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
                    }

                    /**
                     * Checks if `value` is classified as a `Symbol` primitive or object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                     * @example
                     *
                     * _.isSymbol(Symbol.iterator);
                     * // => true
                     *
                     * _.isSymbol('abc');
                     * // => false
                     */
                    function isSymbol(value) {
                        return typeof value == 'symbol' ||
                            (isObjectLike(value) && baseGetTag(value) == symbolTag);
                    }

                    /**
                     * Checks if `value` is classified as a typed array.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                     * @example
                     *
                     * _.isTypedArray(new Uint8Array);
                     * // => true
                     *
                     * _.isTypedArray([]);
                     * // => false
                     */
                    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                    /**
                     * Checks if `value` is `undefined`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                     * @example
                     *
                     * _.isUndefined(void 0);
                     * // => true
                     *
                     * _.isUndefined(null);
                     * // => false
                     */
                    function isUndefined(value) {
                        return value === undefined;
                    }

                    /**
                     * Checks if `value` is classified as a `WeakMap` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                     * @example
                     *
                     * _.isWeakMap(new WeakMap);
                     * // => true
                     *
                     * _.isWeakMap(new Map);
                     * // => false
                     */
                    function isWeakMap(value) {
                        return isObjectLike(value) && getTag(value) == weakMapTag;
                    }

                    /**
                     * Checks if `value` is classified as a `WeakSet` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                     * @example
                     *
                     * _.isWeakSet(new WeakSet);
                     * // => true
                     *
                     * _.isWeakSet(new Set);
                     * // => false
                     */
                    function isWeakSet(value) {
                        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                    }

                    /**
                     * Checks if `value` is less than `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is less than `other`,
                     *  else `false`.
                     * @see _.gt
                     * @example
                     *
                     * _.lt(1, 3);
                     * // => true
                     *
                     * _.lt(3, 3);
                     * // => false
                     *
                     * _.lt(3, 1);
                     * // => false
                     */
                    var lt = createRelationalOperation(baseLt);

                    /**
                     * Checks if `value` is less than or equal to `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is less than or equal to
                     *  `other`, else `false`.
                     * @see _.gte
                     * @example
                     *
                     * _.lte(1, 3);
                     * // => true
                     *
                     * _.lte(3, 3);
                     * // => true
                     *
                     * _.lte(3, 1);
                     * // => false
                     */
                    var lte = createRelationalOperation(function (value, other) {
                        return value <= other;
                    });

                    /**
                     * Converts `value` to an array.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {Array} Returns the converted array.
                     * @example
                     *
                     * _.toArray({ 'a': 1, 'b': 2 });
                     * // => [1, 2]
                     *
                     * _.toArray('abc');
                     * // => ['a', 'b', 'c']
                     *
                     * _.toArray(1);
                     * // => []
                     *
                     * _.toArray(null);
                     * // => []
                     */
                    function toArray(value) {
                        if (!value) {
                            return [];
                        }
                        if (isArrayLike(value)) {
                            return isString(value) ? stringToArray(value) : copyArray(value);
                        }
                        if (symIterator && value[symIterator]) {
                            return iteratorToArray(value[symIterator]());
                        }
                        var tag = getTag(value),
                            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

                        return func(value);
                    }

                    /**
                     * Converts `value` to a finite number.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.12.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted number.
                     * @example
                     *
                     * _.toFinite(3.2);
                     * // => 3.2
                     *
                     * _.toFinite(Number.MIN_VALUE);
                     * // => 5e-324
                     *
                     * _.toFinite(Infinity);
                     * // => 1.7976931348623157e+308
                     *
                     * _.toFinite('3.2');
                     * // => 3.2
                     */
                    function toFinite(value) {
                        if (!value) {
                            return value === 0 ? value : 0;
                        }
                        value = toNumber(value);
                        if (value === INFINITY || value === -INFINITY) {
                            var sign = (value < 0 ? -1 : 1);
                            return sign * MAX_INTEGER;
                        }
                        return value === value ? value : 0;
                    }

                    /**
                     * Converts `value` to an integer.
                     *
                     * **Note:** This method is loosely based on
                     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.toInteger(3.2);
                     * // => 3
                     *
                     * _.toInteger(Number.MIN_VALUE);
                     * // => 0
                     *
                     * _.toInteger(Infinity);
                     * // => 1.7976931348623157e+308
                     *
                     * _.toInteger('3.2');
                     * // => 3
                     */
                    function toInteger(value) {
                        var result = toFinite(value),
                            remainder = result % 1;

                        return result === result ? (remainder ? result - remainder : result) : 0;
                    }

                    /**
                     * Converts `value` to an integer suitable for use as the length of an
                     * array-like object.
                     *
                     * **Note:** This method is based on
                     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.toLength(3.2);
                     * // => 3
                     *
                     * _.toLength(Number.MIN_VALUE);
                     * // => 0
                     *
                     * _.toLength(Infinity);
                     * // => 4294967295
                     *
                     * _.toLength('3.2');
                     * // => 3
                     */
                    function toLength(value) {
                        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                    }

                    /**
                     * Converts `value` to a number.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to process.
                     * @returns {number} Returns the number.
                     * @example
                     *
                     * _.toNumber(3.2);
                     * // => 3.2
                     *
                     * _.toNumber(Number.MIN_VALUE);
                     * // => 5e-324
                     *
                     * _.toNumber(Infinity);
                     * // => Infinity
                     *
                     * _.toNumber('3.2');
                     * // => 3.2
                     */
                    function toNumber(value) {
                        if (typeof value == 'number') {
                            return value;
                        }
                        if (isSymbol(value)) {
                            return NAN;
                        }
                        if (isObject(value)) {
                            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                            value = isObject(other) ? (other + '') : other;
                        }
                        if (typeof value != 'string') {
                            return value === 0 ? value : +value;
                        }
                        value = value.replace(reTrim, '');
                        var isBinary = reIsBinary.test(value);
                        return (isBinary || reIsOctal.test(value))
                            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                            : (reIsBadHex.test(value) ? NAN : +value);
                    }

                    /**
                     * Converts `value` to a plain object flattening inherited enumerable string
                     * keyed properties of `value` to own properties of the plain object.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {Object} Returns the converted plain object.
                     * @example
                     *
                     * function Foo() {
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.assign({ 'a': 1 }, new Foo);
                     * // => { 'a': 1, 'b': 2 }
                     *
                     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                     * // => { 'a': 1, 'b': 2, 'c': 3 }
                     */
                    function toPlainObject(value) {
                        return copyObject(value, keysIn(value));
                    }

                    /**
                     * Converts `value` to a safe integer. A safe integer can be compared and
                     * represented correctly.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.toSafeInteger(3.2);
                     * // => 3
                     *
                     * _.toSafeInteger(Number.MIN_VALUE);
                     * // => 0
                     *
                     * _.toSafeInteger(Infinity);
                     * // => 9007199254740991
                     *
                     * _.toSafeInteger('3.2');
                     * // => 3
                     */
                    function toSafeInteger(value) {
                        return value
                            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                            : (value === 0 ? value : 0);
                    }

                    /**
                     * Converts `value` to a string. An empty string is returned for `null`
                     * and `undefined` values. The sign of `-0` is preserved.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {string} Returns the converted string.
                     * @example
                     *
                     * _.toString(null);
                     * // => ''
                     *
                     * _.toString(-0);
                     * // => '-0'
                     *
                     * _.toString([1, 2, 3]);
                     * // => '1,2,3'
                     */
                    function toString(value) {
                        return value == null ? '' : baseToString(value);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Assigns own enumerable string keyed properties of source objects to the
                     * destination object. Source objects are applied from left to right.
                     * Subsequent sources overwrite property assignments of previous sources.
                     *
                     * **Note:** This method mutates `object` and is loosely based on
                     * [`Object.assign`](https://mdn.io/Object/assign).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.10.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.assignIn
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     * }
                     *
                     * function Bar() {
     *   this.c = 3;
     * }
                     *
                     * Foo.prototype.b = 2;
                     * Bar.prototype.d = 4;
                     *
                     * _.assign({ 'a': 0 }, new Foo, new Bar);
                     * // => { 'a': 1, 'c': 3 }
                     */
                    var assign = createAssigner(function (object, source) {
                        if (isPrototype(source) || isArrayLike(source)) {
                            copyObject(source, keys(source), object);
                            return;
                        }
                        for (var key in source) {
                            if (hasOwnProperty.call(source, key)) {
                                assignValue(object, key, source[key]);
                            }
                        }
                    });

                    /**
                     * This method is like `_.assign` except that it iterates over own and
                     * inherited source properties.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias extend
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.assign
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     * }
                     *
                     * function Bar() {
     *   this.c = 3;
     * }
                     *
                     * Foo.prototype.b = 2;
                     * Bar.prototype.d = 4;
                     *
                     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                     */
                    var assignIn = createAssigner(function (object, source) {
                        copyObject(source, keysIn(source), object);
                    });

                    /**
                     * This method is like `_.assignIn` except that it accepts `customizer`
                     * which is invoked to produce the assigned values. If `customizer` returns
                     * `undefined`, assignment is handled by the method instead. The `customizer`
                     * is invoked with five arguments: (objValue, srcValue, key, object, source).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias extendWith
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} sources The source objects.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @see _.assignWith
                     * @example
                     *
                     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
                     *
                     * var defaults = _.partialRight(_.assignInWith, customizer);
                     *
                     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                     * // => { 'a': 1, 'b': 2 }
                     */
                    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
                        copyObject(source, keysIn(source), object, customizer);
                    });

                    /**
                     * This method is like `_.assign` except that it accepts `customizer`
                     * which is invoked to produce the assigned values. If `customizer` returns
                     * `undefined`, assignment is handled by the method instead. The `customizer`
                     * is invoked with five arguments: (objValue, srcValue, key, object, source).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} sources The source objects.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @see _.assignInWith
                     * @example
                     *
                     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
                     *
                     * var defaults = _.partialRight(_.assignWith, customizer);
                     *
                     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                     * // => { 'a': 1, 'b': 2 }
                     */
                    var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
                        copyObject(source, keys(source), object, customizer);
                    });

                    /**
                     * Creates an array of values corresponding to `paths` of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.0.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {...(string|string[])} [paths] The property paths to pick.
                     * @returns {Array} Returns the picked values.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                     *
                     * _.at(object, ['a[0].b.c', 'a[1]']);
                     * // => [3, 4]
                     */
                    var at = flatRest(baseAt);

                    /**
                     * Creates an object that inherits from the `prototype` object. If a
                     * `properties` object is given, its own enumerable string keyed properties
                     * are assigned to the created object.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.3.0
                     * @category Object
                     * @param {Object} prototype The object to inherit from.
                     * @param {Object} [properties] The properties to assign to the object.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
                     *
                     * function Circle() {
     *   Shape.call(this);
     * }
                     *
                     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
                     *
                     * var circle = new Circle;
                     * circle instanceof Circle;
                     * // => true
                     *
                     * circle instanceof Shape;
                     * // => true
                     */
                    function create(prototype, properties) {
                        var result = baseCreate(prototype);
                        return properties == null ? result : baseAssign(result, properties);
                    }

                    /**
                     * Assigns own and inherited enumerable string keyed properties of source
                     * objects to the destination object for all destination properties that
                     * resolve to `undefined`. Source objects are applied from left to right.
                     * Once a property is set, additional values of the same property are ignored.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.defaultsDeep
                     * @example
                     *
                     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                     * // => { 'a': 1, 'b': 2 }
                     */
                    var defaults = baseRest(function (args) {
                        args.push(undefined, customDefaultsAssignIn);
                        return apply(assignInWith, undefined, args);
                    });

                    /**
                     * This method is like `_.defaults` except that it recursively assigns
                     * default properties.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.defaults
                     * @example
                     *
                     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                     * // => { 'a': { 'b': 2, 'c': 3 } }
                     */
                    var defaultsDeep = baseRest(function (args) {
                        args.push(undefined, customDefaultsMerge);
                        return apply(mergeWith, undefined, args);
                    });

                    /**
                     * This method is like `_.find` except that it returns the key of the first
                     * element `predicate` returns truthy for instead of the element itself.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {string|undefined} Returns the key of the matched element,
                     *  else `undefined`.
                     * @example
                     *
                     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
                     *
                     * _.findKey(users, function(o) { return o.age < 40; });
                     * // => 'barney' (iteration order is not guaranteed)
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findKey(users, { 'age': 1, 'active': true });
                     * // => 'pebbles'
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findKey(users, ['active', false]);
                     * // => 'fred'
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findKey(users, 'active');
                     * // => 'barney'
                     */
                    function findKey(object, predicate) {
                        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                    }

                    /**
                     * This method is like `_.findKey` except that it iterates over elements of
                     * a collection in the opposite order.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {string|undefined} Returns the key of the matched element,
                     *  else `undefined`.
                     * @example
                     *
                     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
                     *
                     * _.findLastKey(users, function(o) { return o.age < 40; });
                     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findLastKey(users, { 'age': 36, 'active': true });
                     * // => 'barney'
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findLastKey(users, ['active', false]);
                     * // => 'fred'
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findLastKey(users, 'active');
                     * // => 'pebbles'
                     */
                    function findLastKey(object, predicate) {
                        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                    }

                    /**
                     * Iterates over own and inherited enumerable string keyed properties of an
                     * object and invokes `iteratee` for each property. The iteratee is invoked
                     * with three arguments: (value, key, object). Iteratee functions may exit
                     * iteration early by explicitly returning `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.3.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forInRight
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
                     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                     */
                    function forIn(object, iteratee) {
                        return object == null
                            ? object
                            : baseFor(object, getIteratee(iteratee, 3), keysIn);
                    }

                    /**
                     * This method is like `_.forIn` except that it iterates over properties of
                     * `object` in the opposite order.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forIn
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
                     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                     */
                    function forInRight(object, iteratee) {
                        return object == null
                            ? object
                            : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                    }

                    /**
                     * Iterates over own enumerable string keyed properties of an object and
                     * invokes `iteratee` for each property. The iteratee is invoked with three
                     * arguments: (value, key, object). Iteratee functions may exit iteration
                     * early by explicitly returning `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.3.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forOwnRight
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
                     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                     */
                    function forOwn(object, iteratee) {
                        return object && baseForOwn(object, getIteratee(iteratee, 3));
                    }

                    /**
                     * This method is like `_.forOwn` except that it iterates over properties of
                     * `object` in the opposite order.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forOwn
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
                     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                     */
                    function forOwnRight(object, iteratee) {
                        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
                    }

                    /**
                     * Creates an array of function property names from own enumerable properties
                     * of `object`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @returns {Array} Returns the function names.
                     * @see _.functionsIn
                     * @example
                     *
                     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
                     *
                     * Foo.prototype.c = _.constant('c');
                     *
                     * _.functions(new Foo);
                     * // => ['a', 'b']
                     */
                    function functions(object) {
                        return object == null ? [] : baseFunctions(object, keys(object));
                    }

                    /**
                     * Creates an array of function property names from own and inherited
                     * enumerable properties of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @returns {Array} Returns the function names.
                     * @see _.functions
                     * @example
                     *
                     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
                     *
                     * Foo.prototype.c = _.constant('c');
                     *
                     * _.functionsIn(new Foo);
                     * // => ['a', 'b', 'c']
                     */
                    function functionsIn(object) {
                        return object == null ? [] : baseFunctions(object, keysIn(object));
                    }

                    /**
                     * Gets the value at `path` of `object`. If the resolved value is
                     * `undefined`, the `defaultValue` is returned in its place.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the property to get.
                     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                     * @returns {*} Returns the resolved value.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                     *
                     * _.get(object, 'a[0].b.c');
                     * // => 3
                     *
                     * _.get(object, ['a', '0', 'b', 'c']);
                     * // => 3
                     *
                     * _.get(object, 'a.b.c', 'default');
                     * // => 'default'
                     */
                    function get(object, path, defaultValue) {
                        var result = object == null ? undefined : baseGet(object, path);
                        return result === undefined ? defaultValue : result;
                    }

                    /**
                     * Checks if `path` is a direct property of `object`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path to check.
                     * @returns {boolean} Returns `true` if `path` exists, else `false`.
                     * @example
                     *
                     * var object = { 'a': { 'b': 2 } };
                     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                     *
                     * _.has(object, 'a');
                     * // => true
                     *
                     * _.has(object, 'a.b');
                     * // => true
                     *
                     * _.has(object, ['a', 'b']);
                     * // => true
                     *
                     * _.has(other, 'a');
                     * // => false
                     */
                    function has(object, path) {
                        return object != null && hasPath(object, path, baseHas);
                    }

                    /**
                     * Checks if `path` is a direct or inherited property of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path to check.
                     * @returns {boolean} Returns `true` if `path` exists, else `false`.
                     * @example
                     *
                     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                     *
                     * _.hasIn(object, 'a');
                     * // => true
                     *
                     * _.hasIn(object, 'a.b');
                     * // => true
                     *
                     * _.hasIn(object, ['a', 'b']);
                     * // => true
                     *
                     * _.hasIn(object, 'b');
                     * // => false
                     */
                    function hasIn(object, path) {
                        return object != null && hasPath(object, path, baseHasIn);
                    }

                    /**
                     * Creates an object composed of the inverted keys and values of `object`.
                     * If `object` contains duplicate values, subsequent values overwrite
                     * property assignments of previous values.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.7.0
                     * @category Object
                     * @param {Object} object The object to invert.
                     * @returns {Object} Returns the new inverted object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2, 'c': 1 };
                     *
                     * _.invert(object);
                     * // => { '1': 'c', '2': 'b' }
                     */
                    var invert = createInverter(function (result, value, key) {
                        result[value] = key;
                    }, constant(identity));

                    /**
                     * This method is like `_.invert` except that the inverted object is generated
                     * from the results of running each element of `object` thru `iteratee`. The
                     * corresponding inverted value of each inverted key is an array of keys
                     * responsible for generating the inverted value. The iteratee is invoked
                     * with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.1.0
                     * @category Object
                     * @param {Object} object The object to invert.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Object} Returns the new inverted object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2, 'c': 1 };
                     *
                     * _.invertBy(object);
                     * // => { '1': ['a', 'c'], '2': ['b'] }
                     *
                     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
                     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                     */
                    var invertBy = createInverter(function (result, value, key) {
                        if (hasOwnProperty.call(result, value)) {
                            result[value].push(key);
                        } else {
                            result[value] = [key];
                        }
                    }, getIteratee);

                    /**
                     * Invokes the method at `path` of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the method to invoke.
                     * @param {...*} [args] The arguments to invoke the method with.
                     * @returns {*} Returns the result of the invoked method.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                     *
                     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                     * // => [2, 3]
                     */
                    var invoke = baseRest(baseInvoke);

                    /**
                     * Creates an array of the own enumerable property names of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects. See the
                     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                     * for more details.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.keys(new Foo);
                     * // => ['a', 'b'] (iteration order is not guaranteed)
                     *
                     * _.keys('hi');
                     * // => ['0', '1']
                     */
                    function keys(object) {
                        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                    }

                    /**
                     * Creates an array of the own and inherited enumerable property names of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.keysIn(new Foo);
                     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                     */
                    function keysIn(object) {
                        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                    }

                    /**
                     * The opposite of `_.mapValues`; this method creates an object with the
                     * same values as `object` and keys generated by running each own enumerable
                     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                     * with three arguments: (value, key, object).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.8.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns the new mapped object.
                     * @see _.mapValues
                     * @example
                     *
                     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
                     * // => { 'a1': 1, 'b2': 2 }
                     */
                    function mapKeys(object, iteratee) {
                        var result = {};
                        iteratee = getIteratee(iteratee, 3);

                        baseForOwn(object, function (value, key, object) {
                            baseAssignValue(result, iteratee(value, key, object), value);
                        });
                        return result;
                    }

                    /**
                     * Creates an object with the same keys as `object` and values generated
                     * by running each own enumerable string keyed property of `object` thru
                     * `iteratee`. The iteratee is invoked with three arguments:
                     * (value, key, object).
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns the new mapped object.
                     * @see _.mapKeys
                     * @example
                     *
                     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
                     *
                     * _.mapValues(users, function(o) { return o.age; });
                     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.mapValues(users, 'age');
                     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                     */
                    function mapValues(object, iteratee) {
                        var result = {};
                        iteratee = getIteratee(iteratee, 3);

                        baseForOwn(object, function (value, key, object) {
                            baseAssignValue(result, key, iteratee(value, key, object));
                        });
                        return result;
                    }

                    /**
                     * This method is like `_.assign` except that it recursively merges own and
                     * inherited enumerable string keyed properties of source objects into the
                     * destination object. Source properties that resolve to `undefined` are
                     * skipped if a destination value exists. Array and plain object properties
                     * are merged recursively. Other objects and value types are overridden by
                     * assignment. Source objects are applied from left to right. Subsequent
                     * sources overwrite property assignments of previous sources.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.5.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
                     *
                     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
                     *
                     * _.merge(object, other);
                     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                     */
                    var merge = createAssigner(function (object, source, srcIndex) {
                        baseMerge(object, source, srcIndex);
                    });

                    /**
                     * This method is like `_.merge` except that it accepts `customizer` which
                     * is invoked to produce the merged values of the destination and source
                     * properties. If `customizer` returns `undefined`, merging is handled by the
                     * method instead. The `customizer` is invoked with six arguments:
                     * (objValue, srcValue, key, object, source, stack).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} sources The source objects.
                     * @param {Function} customizer The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
                     *
                     * var object = { 'a': [1], 'b': [2] };
                     * var other = { 'a': [3], 'b': [4] };
                     *
                     * _.mergeWith(object, other, customizer);
                     * // => { 'a': [1, 3], 'b': [2, 4] }
                     */
                    var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
                        baseMerge(object, source, srcIndex, customizer);
                    });

                    /**
                     * The opposite of `_.pick`; this method creates an object composed of the
                     * own and inherited enumerable property paths of `object` that are not omitted.
                     *
                     * **Note:** This method is considerably slower than `_.pick`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {...(string|string[])} [paths] The property paths to omit.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.omit(object, ['a', 'c']);
                     * // => { 'b': '2' }
                     */
                    var omit = flatRest(function (object, paths) {
                        var result = {};
                        if (object == null) {
                            return result;
                        }
                        var isDeep = false;
                        paths = arrayMap(paths, function (path) {
                            path = castPath(path, object);
                            isDeep || (isDeep = path.length > 1);
                            return path;
                        });
                        copyObject(object, getAllKeysIn(object), result);
                        if (isDeep) {
                            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                        }
                        var length = paths.length;
                        while (length--) {
                            baseUnset(result, paths[length]);
                        }
                        return result;
                    });

                    /**
                     * The opposite of `_.pickBy`; this method creates an object composed of
                     * the own and inherited enumerable string keyed properties of `object` that
                     * `predicate` doesn't return truthy for. The predicate is invoked with two
                     * arguments: (value, key).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {Function} [predicate=_.identity] The function invoked per property.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.omitBy(object, _.isNumber);
                     * // => { 'b': '2' }
                     */
                    function omitBy(object, predicate) {
                        return pickBy(object, negate(getIteratee(predicate)));
                    }

                    /**
                     * Creates an object composed of the picked `object` properties.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {...(string|string[])} [paths] The property paths to pick.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.pick(object, ['a', 'c']);
                     * // => { 'a': 1, 'c': 3 }
                     */
                    var pick = flatRest(function (object, paths) {
                        return object == null ? {} : basePick(object, paths);
                    });

                    /**
                     * Creates an object composed of the `object` properties `predicate` returns
                     * truthy for. The predicate is invoked with two arguments: (value, key).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {Function} [predicate=_.identity] The function invoked per property.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.pickBy(object, _.isNumber);
                     * // => { 'a': 1, 'c': 3 }
                     */
                    function pickBy(object, predicate) {
                        if (object == null) {
                            return {};
                        }
                        var props = arrayMap(getAllKeysIn(object), function (prop) {
                            return [prop];
                        });
                        predicate = getIteratee(predicate);
                        return basePickBy(object, props, function (value, path) {
                            return predicate(value, path[0]);
                        });
                    }

                    /**
                     * This method is like `_.get` except that if the resolved value is a
                     * function it's invoked with the `this` binding of its parent object and
                     * its result is returned.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the property to resolve.
                     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                     * @returns {*} Returns the resolved value.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                     *
                     * _.result(object, 'a[0].b.c1');
                     * // => 3
                     *
                     * _.result(object, 'a[0].b.c2');
                     * // => 4
                     *
                     * _.result(object, 'a[0].b.c3', 'default');
                     * // => 'default'
                     *
                     * _.result(object, 'a[0].b.c3', _.constant('default'));
                     * // => 'default'
                     */
                    function result(object, path, defaultValue) {
                        path = castPath(path, object);

                        var index = -1,
                            length = path.length;

                        // Ensure the loop is entered when path is empty.
                        if (!length) {
                            length = 1;
                            object = undefined;
                        }
                        while (++index < length) {
                            var value = object == null ? undefined : object[toKey(path[index])];
                            if (value === undefined) {
                                index = length;
                                value = defaultValue;
                            }
                            object = isFunction(value) ? value.call(object) : value;
                        }
                        return object;
                    }

                    /**
                     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                     * it's created. Arrays are created for missing index properties while objects
                     * are created for all other missing properties. Use `_.setWith` to customize
                     * `path` creation.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                     *
                     * _.set(object, 'a[0].b.c', 4);
                     * console.log(object.a[0].b.c);
                     * // => 4
                     *
                     * _.set(object, ['x', '0', 'y', 'z'], 5);
                     * console.log(object.x[0].y.z);
                     * // => 5
                     */
                    function set(object, path, value) {
                        return object == null ? object : baseSet(object, path, value);
                    }

                    /**
                     * This method is like `_.set` except that it accepts `customizer` which is
                     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                     * path creation is handled by the method instead. The `customizer` is invoked
                     * with three arguments: (nsValue, key, nsObject).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {*} value The value to set.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = {};
                     *
                     * _.setWith(object, '[0][1]', 'a', Object);
                     * // => { '0': { '1': 'a' } }
                     */
                    function setWith(object, path, value, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return object == null ? object : baseSet(object, path, value, customizer);
                    }

                    /**
                     * Creates an array of own enumerable string keyed-value pairs for `object`
                     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                     * entries are returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias entries
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the key-value pairs.
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.toPairs(new Foo);
                     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                     */
                    var toPairs = createToPairs(keys);

                    /**
                     * Creates an array of own and inherited enumerable string keyed-value pairs
                     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                     * or set, its entries are returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias entriesIn
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the key-value pairs.
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.toPairsIn(new Foo);
                     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                     */
                    var toPairsIn = createToPairs(keysIn);

                    /**
                     * An alternative to `_.reduce`; this method transforms `object` to a new
                     * `accumulator` object which is the result of running each of its own
                     * enumerable string keyed properties thru `iteratee`, with each invocation
                     * potentially mutating the `accumulator` object. If `accumulator` is not
                     * provided, a new object with the same `[[Prototype]]` will be used. The
                     * iteratee is invoked with four arguments: (accumulator, value, key, object).
                     * Iteratee functions may exit iteration early by explicitly returning `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.3.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {*} [accumulator] The custom accumulator value.
                     * @returns {*} Returns the accumulated value.
                     * @example
                     *
                     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
                     * // => [4, 9]
                     *
                     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
                     * // => { '1': ['a', 'c'], '2': ['b'] }
                     */
                    function transform(object, iteratee, accumulator) {
                        var isArr = isArray(object),
                            isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                        iteratee = getIteratee(iteratee, 4);
                        if (accumulator == null) {
                            var Ctor = object && object.constructor;
                            if (isArrLike) {
                                accumulator = isArr ? new Ctor : [];
                            }
                            else if (isObject(object)) {
                                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                            }
                            else {
                                accumulator = {};
                            }
                        }
                        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                            return iteratee(accumulator, value, index, object);
                        });
                        return accumulator;
                    }

                    /**
                     * Removes the property at `path` of `object`.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to unset.
                     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                     * _.unset(object, 'a[0].b.c');
                     * // => true
                     *
                     * console.log(object);
                     * // => { 'a': [{ 'b': {} }] };
                     *
                     * _.unset(object, ['a', '0', 'b', 'c']);
                     * // => true
                     *
                     * console.log(object);
                     * // => { 'a': [{ 'b': {} }] };
                     */
                    function unset(object, path) {
                        return object == null ? true : baseUnset(object, path);
                    }

                    /**
                     * This method is like `_.set` except that accepts `updater` to produce the
                     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                     * is invoked with one argument: (value).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.6.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {Function} updater The function to produce the updated value.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                     *
                     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                     * console.log(object.a[0].b.c);
                     * // => 9
                     *
                     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                     * console.log(object.x[0].y.z);
                     * // => 0
                     */
                    function update(object, path, updater) {
                        return object == null ? object : baseUpdate(object, path, castFunction(updater));
                    }

                    /**
                     * This method is like `_.update` except that it accepts `customizer` which is
                     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                     * path creation is handled by the method instead. The `customizer` is invoked
                     * with three arguments: (nsValue, key, nsObject).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.6.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {Function} updater The function to produce the updated value.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = {};
                     *
                     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                     * // => { '0': { '1': 'a' } }
                     */
                    function updateWith(object, path, updater, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
                    }

                    /**
                     * Creates an array of the own enumerable string keyed property values of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property values.
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.values(new Foo);
                     * // => [1, 2] (iteration order is not guaranteed)
                     *
                     * _.values('hi');
                     * // => ['h', 'i']
                     */
                    function values(object) {
                        return object == null ? [] : baseValues(object, keys(object));
                    }

                    /**
                     * Creates an array of the own and inherited enumerable string keyed property
                     * values of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property values.
                     * @example
                     *
                     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.valuesIn(new Foo);
                     * // => [1, 2, 3] (iteration order is not guaranteed)
                     */
                    function valuesIn(object) {
                        return object == null ? [] : baseValues(object, keysIn(object));
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Clamps `number` within the inclusive `lower` and `upper` bounds.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Number
                     * @param {number} number The number to clamp.
                     * @param {number} [lower] The lower bound.
                     * @param {number} upper The upper bound.
                     * @returns {number} Returns the clamped number.
                     * @example
                     *
                     * _.clamp(-10, -5, 5);
                     * // => -5
                     *
                     * _.clamp(10, -5, 5);
                     * // => 5
                     */
                    function clamp(number, lower, upper) {
                        if (upper === undefined) {
                            upper = lower;
                            lower = undefined;
                        }
                        if (upper !== undefined) {
                            upper = toNumber(upper);
                            upper = upper === upper ? upper : 0;
                        }
                        if (lower !== undefined) {
                            lower = toNumber(lower);
                            lower = lower === lower ? lower : 0;
                        }
                        return baseClamp(toNumber(number), lower, upper);
                    }

                    /**
                     * Checks if `n` is between `start` and up to, but not including, `end`. If
                     * `end` is not specified, it's set to `start` with `start` then set to `0`.
                     * If `start` is greater than `end` the params are swapped to support
                     * negative ranges.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.3.0
                     * @category Number
                     * @param {number} number The number to check.
                     * @param {number} [start=0] The start of the range.
                     * @param {number} end The end of the range.
                     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                     * @see _.range, _.rangeRight
                     * @example
                     *
                     * _.inRange(3, 2, 4);
                     * // => true
                     *
                     * _.inRange(4, 8);
                     * // => true
                     *
                     * _.inRange(4, 2);
                     * // => false
                     *
                     * _.inRange(2, 2);
                     * // => false
                     *
                     * _.inRange(1.2, 2);
                     * // => true
                     *
                     * _.inRange(5.2, 4);
                     * // => false
                     *
                     * _.inRange(-3, -2, -6);
                     * // => true
                     */
                    function inRange(number, start, end) {
                        start = toFinite(start);
                        if (end === undefined) {
                            end = start;
                            start = 0;
                        } else {
                            end = toFinite(end);
                        }
                        number = toNumber(number);
                        return baseInRange(number, start, end);
                    }

                    /**
                     * Produces a random number between the inclusive `lower` and `upper` bounds.
                     * If only one argument is provided a number between `0` and the given number
                     * is returned. If `floating` is `true`, or either `lower` or `upper` are
                     * floats, a floating-point number is returned instead of an integer.
                     *
                     * **Note:** JavaScript follows the IEEE-754 standard for resolving
                     * floating-point values which can produce unexpected results.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.7.0
                     * @category Number
                     * @param {number} [lower=0] The lower bound.
                     * @param {number} [upper=1] The upper bound.
                     * @param {boolean} [floating] Specify returning a floating-point number.
                     * @returns {number} Returns the random number.
                     * @example
                     *
                     * _.random(0, 5);
                     * // => an integer between 0 and 5
                     *
                     * _.random(5);
                     * // => also an integer between 0 and 5
                     *
                     * _.random(5, true);
                     * // => a floating-point number between 0 and 5
                     *
                     * _.random(1.2, 5.2);
                     * // => a floating-point number between 1.2 and 5.2
                     */
                    function random(lower, upper, floating) {
                        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                            upper = floating = undefined;
                        }
                        if (floating === undefined) {
                            if (typeof upper == 'boolean') {
                                floating = upper;
                                upper = undefined;
                            }
                            else if (typeof lower == 'boolean') {
                                floating = lower;
                                lower = undefined;
                            }
                        }
                        if (lower === undefined && upper === undefined) {
                            lower = 0;
                            upper = 1;
                        }
                        else {
                            lower = toFinite(lower);
                            if (upper === undefined) {
                                upper = lower;
                                lower = 0;
                            } else {
                                upper = toFinite(upper);
                            }
                        }
                        if (lower > upper) {
                            var temp = lower;
                            lower = upper;
                            upper = temp;
                        }
                        if (floating || lower % 1 || upper % 1) {
                            var rand = nativeRandom();
                            return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                        }
                        return baseRandom(lower, upper);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the camel cased string.
                     * @example
                     *
                     * _.camelCase('Foo Bar');
                     * // => 'fooBar'
                     *
                     * _.camelCase('--foo-bar--');
                     * // => 'fooBar'
                     *
                     * _.camelCase('__FOO_BAR__');
                     * // => 'fooBar'
                     */
                    var camelCase = createCompounder(function (result, word, index) {
                        word = word.toLowerCase();
                        return result + (index ? capitalize(word) : word);
                    });

                    /**
                     * Converts the first character of `string` to upper case and the remaining
                     * to lower case.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to capitalize.
                     * @returns {string} Returns the capitalized string.
                     * @example
                     *
                     * _.capitalize('FRED');
                     * // => 'Fred'
                     */
                    function capitalize(string) {
                        return upperFirst(toString(string).toLowerCase());
                    }

                    /**
                     * Deburrs `string` by converting
                     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                     * letters to basic Latin letters and removing
                     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to deburr.
                     * @returns {string} Returns the deburred string.
                     * @example
                     *
                     * _.deburr('déjà vu');
                     * // => 'deja vu'
                     */
                    function deburr(string) {
                        string = toString(string);
                        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                    }

                    /**
                     * Checks if `string` ends with the given target string.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to inspect.
                     * @param {string} [target] The string to search for.
                     * @param {number} [position=string.length] The position to search up to.
                     * @returns {boolean} Returns `true` if `string` ends with `target`,
                     *  else `false`.
                     * @example
                     *
                     * _.endsWith('abc', 'c');
                     * // => true
                     *
                     * _.endsWith('abc', 'b');
                     * // => false
                     *
                     * _.endsWith('abc', 'b', 2);
                     * // => true
                     */
                    function endsWith(string, target, position) {
                        string = toString(string);
                        target = baseToString(target);

                        var length = string.length;
                        position = position === undefined
                            ? length
                            : baseClamp(toInteger(position), 0, length);

                        var end = position;
                        position -= target.length;
                        return position >= 0 && string.slice(position, end) == target;
                    }

                    /**
                     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                     * corresponding HTML entities.
                     *
                     * **Note:** No other characters are escaped. To escape additional
                     * characters use a third-party library like [_he_](https://mths.be/he).
                     *
                     * Though the ">" character is escaped for symmetry, characters like
                     * ">" and "/" don't need escaping in HTML and have no special meaning
                     * unless they're part of a tag or unquoted attribute value. See
                     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                     * (under "semi-related fun fact") for more details.
                     *
                     * When working with HTML you should always
                     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                     * XSS vectors.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category String
                     * @param {string} [string=''] The string to escape.
                     * @returns {string} Returns the escaped string.
                     * @example
                     *
                     * _.escape('fred, barney, & pebbles');
                     * // => 'fred, barney, &amp; pebbles'
                     */
                    function escape(string) {
                        string = toString(string);
                        return (string && reHasUnescapedHtml.test(string))
                            ? string.replace(reUnescapedHtml, escapeHtmlChar)
                            : string;
                    }

                    /**
                     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to escape.
                     * @returns {string} Returns the escaped string.
                     * @example
                     *
                     * _.escapeRegExp('[lodash](https://lodash.com/)');
                     * // => '\[lodash\]\(https://lodash\.com/\)'
                     */
                    function escapeRegExp(string) {
                        string = toString(string);
                        return (string && reHasRegExpChar.test(string))
                            ? string.replace(reRegExpChar, '\\$&')
                            : string;
                    }

                    /**
                     * Converts `string` to
                     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the kebab cased string.
                     * @example
                     *
                     * _.kebabCase('Foo Bar');
                     * // => 'foo-bar'
                     *
                     * _.kebabCase('fooBar');
                     * // => 'foo-bar'
                     *
                     * _.kebabCase('__FOO_BAR__');
                     * // => 'foo-bar'
                     */
                    var kebabCase = createCompounder(function (result, word, index) {
                        return result + (index ? '-' : '') + word.toLowerCase();
                    });

                    /**
                     * Converts `string`, as space separated words, to lower case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the lower cased string.
                     * @example
                     *
                     * _.lowerCase('--Foo-Bar--');
                     * // => 'foo bar'
                     *
                     * _.lowerCase('fooBar');
                     * // => 'foo bar'
                     *
                     * _.lowerCase('__FOO_BAR__');
                     * // => 'foo bar'
                     */
                    var lowerCase = createCompounder(function (result, word, index) {
                        return result + (index ? ' ' : '') + word.toLowerCase();
                    });

                    /**
                     * Converts the first character of `string` to lower case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the converted string.
                     * @example
                     *
                     * _.lowerFirst('Fred');
                     * // => 'fred'
                     *
                     * _.lowerFirst('FRED');
                     * // => 'fRED'
                     */
                    var lowerFirst = createCaseFirst('toLowerCase');

                    /**
                     * Pads `string` on the left and right sides if it's shorter than `length`.
                     * Padding characters are truncated if they can't be evenly divided by `length`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to pad.
                     * @param {number} [length=0] The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padded string.
                     * @example
                     *
                     * _.pad('abc', 8);
                     * // => '  abc   '
                     *
                     * _.pad('abc', 8, '_-');
                     * // => '_-abc_-_'
                     *
                     * _.pad('abc', 3);
                     * // => 'abc'
                     */
                    function pad(string, length, chars) {
                        string = toString(string);
                        length = toInteger(length);

                        var strLength = length ? stringSize(string) : 0;
                        if (!length || strLength >= length) {
                            return string;
                        }
                        var mid = (length - strLength) / 2;
                        return (
                            createPadding(nativeFloor(mid), chars) +
                            string +
                            createPadding(nativeCeil(mid), chars)
                        );
                    }

                    /**
                     * Pads `string` on the right side if it's shorter than `length`. Padding
                     * characters are truncated if they exceed `length`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to pad.
                     * @param {number} [length=0] The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padded string.
                     * @example
                     *
                     * _.padEnd('abc', 6);
                     * // => 'abc   '
                     *
                     * _.padEnd('abc', 6, '_-');
                     * // => 'abc_-_'
                     *
                     * _.padEnd('abc', 3);
                     * // => 'abc'
                     */
                    function padEnd(string, length, chars) {
                        string = toString(string);
                        length = toInteger(length);

                        var strLength = length ? stringSize(string) : 0;
                        return (length && strLength < length)
                            ? (string + createPadding(length - strLength, chars))
                            : string;
                    }

                    /**
                     * Pads `string` on the left side if it's shorter than `length`. Padding
                     * characters are truncated if they exceed `length`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to pad.
                     * @param {number} [length=0] The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padded string.
                     * @example
                     *
                     * _.padStart('abc', 6);
                     * // => '   abc'
                     *
                     * _.padStart('abc', 6, '_-');
                     * // => '_-_abc'
                     *
                     * _.padStart('abc', 3);
                     * // => 'abc'
                     */
                    function padStart(string, length, chars) {
                        string = toString(string);
                        length = toInteger(length);

                        var strLength = length ? stringSize(string) : 0;
                        return (length && strLength < length)
                            ? (createPadding(length - strLength, chars) + string)
                            : string;
                    }

                    /**
                     * Converts `string` to an integer of the specified radix. If `radix` is
                     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                     * hexadecimal, in which case a `radix` of `16` is used.
                     *
                     * **Note:** This method aligns with the
                     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category String
                     * @param {string} string The string to convert.
                     * @param {number} [radix=10] The radix to interpret `value` by.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.parseInt('08');
                     * // => 8
                     *
                     * _.map(['6', '08', '10'], _.parseInt);
                     * // => [6, 8, 10]
                     */
                    function parseInt(string, radix, guard) {
                        if (guard || radix == null) {
                            radix = 0;
                        } else if (radix) {
                            radix = +radix;
                        }
                        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
                    }

                    /**
                     * Repeats the given string `n` times.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to repeat.
                     * @param {number} [n=1] The number of times to repeat the string.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the repeated string.
                     * @example
                     *
                     * _.repeat('*', 3);
                     * // => '***'
                     *
                     * _.repeat('abc', 2);
                     * // => 'abcabc'
                     *
                     * _.repeat('abc', 0);
                     * // => ''
                     */
                    function repeat(string, n, guard) {
                        if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
                            n = 1;
                        } else {
                            n = toInteger(n);
                        }
                        return baseRepeat(toString(string), n);
                    }

                    /**
                     * Replaces matches for `pattern` in `string` with `replacement`.
                     *
                     * **Note:** This method is based on
                     * [`String#replace`](https://mdn.io/String/replace).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to modify.
                     * @param {RegExp|string} pattern The pattern to replace.
                     * @param {Function|string} replacement The match replacement.
                     * @returns {string} Returns the modified string.
                     * @example
                     *
                     * _.replace('Hi Fred', 'Fred', 'Barney');
                     * // => 'Hi Barney'
                     */
                    function replace() {
                        var args = arguments,
                            string = toString(args[0]);

                        return args.length < 3 ? string : string.replace(args[1], args[2]);
                    }

                    /**
                     * Converts `string` to
                     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the snake cased string.
                     * @example
                     *
                     * _.snakeCase('Foo Bar');
                     * // => 'foo_bar'
                     *
                     * _.snakeCase('fooBar');
                     * // => 'foo_bar'
                     *
                     * _.snakeCase('--FOO-BAR--');
                     * // => 'foo_bar'
                     */
                    var snakeCase = createCompounder(function (result, word, index) {
                        return result + (index ? '_' : '') + word.toLowerCase();
                    });

                    /**
                     * Splits `string` by `separator`.
                     *
                     * **Note:** This method is based on
                     * [`String#split`](https://mdn.io/String/split).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to split.
                     * @param {RegExp|string} separator The separator pattern to split by.
                     * @param {number} [limit] The length to truncate results to.
                     * @returns {Array} Returns the string segments.
                     * @example
                     *
                     * _.split('a-b-c', '-', 2);
                     * // => ['a', 'b']
                     */
                    function split(string, separator, limit) {
                        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                            separator = limit = undefined;
                        }
                        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                        if (!limit) {
                            return [];
                        }
                        string = toString(string);
                        if (string && (
                                typeof separator == 'string' ||
                                (separator != null && !isRegExp(separator))
                            )) {
                            separator = baseToString(separator);
                            if (!separator && hasUnicode(string)) {
                                return castSlice(stringToArray(string), 0, limit);
                            }
                        }
                        return string.split(separator, limit);
                    }

                    /**
                     * Converts `string` to
                     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.1.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the start cased string.
                     * @example
                     *
                     * _.startCase('--foo-bar--');
                     * // => 'Foo Bar'
                     *
                     * _.startCase('fooBar');
                     * // => 'Foo Bar'
                     *
                     * _.startCase('__FOO_BAR__');
                     * // => 'FOO BAR'
                     */
                    var startCase = createCompounder(function (result, word, index) {
                        return result + (index ? ' ' : '') + upperFirst(word);
                    });

                    /**
                     * Checks if `string` starts with the given target string.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to inspect.
                     * @param {string} [target] The string to search for.
                     * @param {number} [position=0] The position to search from.
                     * @returns {boolean} Returns `true` if `string` starts with `target`,
                     *  else `false`.
                     * @example
                     *
                     * _.startsWith('abc', 'a');
                     * // => true
                     *
                     * _.startsWith('abc', 'b');
                     * // => false
                     *
                     * _.startsWith('abc', 'b', 1);
                     * // => true
                     */
                    function startsWith(string, target, position) {
                        string = toString(string);
                        position = position == null
                            ? 0
                            : baseClamp(toInteger(position), 0, string.length);

                        target = baseToString(target);
                        return string.slice(position, position + target.length) == target;
                    }

                    /**
                     * Creates a compiled template function that can interpolate data properties
                     * in "interpolate" delimiters, HTML-escape interpolated data properties in
                     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                     * properties may be accessed as free variables in the template. If a setting
                     * object is given, it takes precedence over `_.templateSettings` values.
                     *
                     * **Note:** In the development build `_.template` utilizes
                     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                     * for easier debugging.
                     *
                     * For more information on precompiling templates see
                     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                     *
                     * For more information on Chrome extension sandboxes see
                     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category String
                     * @param {string} [string=''] The template string.
                     * @param {Object} [options={}] The options object.
                     * @param {RegExp} [options.escape=_.templateSettings.escape]
                     *  The HTML "escape" delimiter.
                     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                     *  The "evaluate" delimiter.
                     * @param {Object} [options.imports=_.templateSettings.imports]
                     *  An object to import into the template as free variables.
                     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                     *  The "interpolate" delimiter.
                     * @param {string} [options.sourceURL='lodash.templateSources[n]']
                     *  The sourceURL of the compiled template.
                     * @param {string} [options.variable='obj']
                     *  The data object variable name.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the compiled template function.
                     * @example
                     *
                     * // Use the "interpolate" delimiter to create a compiled template.
                     * var compiled = _.template('hello <%= user %>!');
                     * compiled({ 'user': 'fred' });
                     * // => 'hello fred!'
                     *
                     * // Use the HTML "escape" delimiter to escape data property values.
                     * var compiled = _.template('<b><%- value %></b>');
                     * compiled({ 'value': '<script>' });
                     * // => '<b>&lt;script&gt;</b>'
                     *
                     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                     * compiled({ 'users': ['fred', 'barney'] });
                     * // => '<li>fred</li><li>barney</li>'
                     *
                     * // Use the internal `print` function in "evaluate" delimiters.
                     * var compiled = _.template('<% print("hello " + user); %>!');
                     * compiled({ 'user': 'barney' });
                     * // => 'hello barney!'
                     *
                     * // Use the ES template literal delimiter as an "interpolate" delimiter.
                     * // Disable support by replacing the "interpolate" delimiter.
                     * var compiled = _.template('hello ${ user }!');
                     * compiled({ 'user': 'pebbles' });
                     * // => 'hello pebbles!'
                     *
                     * // Use backslashes to treat delimiters as plain text.
                     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                     * compiled({ 'value': 'ignored' });
                     * // => '<%- value %>'
                     *
                     * // Use the `imports` option to import `jQuery` as `jq`.
                     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                     * compiled({ 'users': ['fred', 'barney'] });
                     * // => '<li>fred</li><li>barney</li>'
                     *
                     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                     * compiled(data);
                     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                     *
                     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                     * compiled.source;
                     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
                     *
                     * // Use custom template delimiters.
                     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                     * var compiled = _.template('hello {{ user }}!');
                     * compiled({ 'user': 'mustache' });
                     * // => 'hello mustache!'
                     *
                     * // Use the `source` property to inline compiled templates for meaningful
                     * // line numbers in error messages and stack traces.
                     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
                     * ');
                     */
                    function template(string, options, guard) {
                        // Based on John Resig's `tmpl` implementation
                        // (http://ejohn.org/blog/javascript-micro-templating/)
                        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                        var settings = lodash.templateSettings;

                        if (guard && isIterateeCall(string, options, guard)) {
                            options = undefined;
                        }
                        string = toString(string);
                        options = assignInWith({}, options, settings, customDefaultsAssignIn);

                        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                            importsKeys = keys(imports),
                            importsValues = baseValues(imports, importsKeys);

                        var isEscaping,
                            isEvaluating,
                            index = 0,
                            interpolate = options.interpolate || reNoMatch,
                            source = "__p += '";

                        // Compile the regexp to match each delimiter.
                        var reDelimiters = RegExp(
                            (options.escape || reNoMatch).source + '|' +
                            interpolate.source + '|' +
                            (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                            (options.evaluate || reNoMatch).source + '|$'
                            , 'g');

                        // Use a sourceURL for easier debugging.
                        var sourceURL = '//# sourceURL=' +
                            ('sourceURL' in options
                                    ? options.sourceURL
                                    : ('lodash.templateSources[' + (++templateCounter) + ']')
                            ) + '\n';

                        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                            interpolateValue || (interpolateValue = esTemplateValue);

                            // Escape characters that can't be included in string literals.
                            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                            // Replace delimiters with snippets.
                            if (escapeValue) {
                                isEscaping = true;
                                source += "' +\n__e(" + escapeValue + ") +\n'";
                            }
                            if (evaluateValue) {
                                isEvaluating = true;
                                source += "';\n" + evaluateValue + ";\n__p += '";
                            }
                            if (interpolateValue) {
                                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                            }
                            index = offset + match.length;

                            // The JS engine embedded in Adobe products needs `match` returned in
                            // order to produce the correct `offset` value.
                            return match;
                        });

                        source += "';\n";

                        // If `variable` is not specified wrap a with-statement around the generated
                        // code to add the data object to the top of the scope chain.
                        var variable = options.variable;
                        if (!variable) {
                            source = 'with (obj) {\n' + source + '\n}\n';
                        }
                        // Cleanup code by stripping empty strings.
                        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                            .replace(reEmptyStringMiddle, '$1')
                            .replace(reEmptyStringTrailing, '$1;');

                        // Frame code as the function body.
                        source = 'function(' + (variable || 'obj') + ') {\n' +
                            (variable
                                    ? ''
                                    : 'obj || (obj = {});\n'
                            ) +
                            "var __t, __p = ''" +
                            (isEscaping
                                    ? ', __e = _.escape'
                                    : ''
                            ) +
                            (isEvaluating
                                    ? ', __j = Array.prototype.join;\n' +
                                    "function print() { __p += __j.call(arguments, '') }\n"
                                    : ';\n'
                            ) +
                            source +
                            'return __p\n}';

                        var result = attempt(function () {
                            return Function(importsKeys, sourceURL + 'return ' + source)
                                .apply(undefined, importsValues);
                        });

                        // Provide the compiled function's source by its `toString` method or
                        // the `source` property as a convenience for inlining compiled templates.
                        result.source = source;
                        if (isError(result)) {
                            throw result;
                        }
                        return result;
                    }

                    /**
                     * Converts `string`, as a whole, to lower case just like
                     * [String#toLowerCase](https://mdn.io/toLowerCase).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the lower cased string.
                     * @example
                     *
                     * _.toLower('--Foo-Bar--');
                     * // => '--foo-bar--'
                     *
                     * _.toLower('fooBar');
                     * // => 'foobar'
                     *
                     * _.toLower('__FOO_BAR__');
                     * // => '__foo_bar__'
                     */
                    function toLower(value) {
                        return toString(value).toLowerCase();
                    }

                    /**
                     * Converts `string`, as a whole, to upper case just like
                     * [String#toUpperCase](https://mdn.io/toUpperCase).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the upper cased string.
                     * @example
                     *
                     * _.toUpper('--foo-bar--');
                     * // => '--FOO-BAR--'
                     *
                     * _.toUpper('fooBar');
                     * // => 'FOOBAR'
                     *
                     * _.toUpper('__foo_bar__');
                     * // => '__FOO_BAR__'
                     */
                    function toUpper(value) {
                        return toString(value).toUpperCase();
                    }

                    /**
                     * Removes leading and trailing whitespace or specified characters from `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to trim.
                     * @param {string} [chars=whitespace] The characters to trim.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the trimmed string.
                     * @example
                     *
                     * _.trim('  abc  ');
                     * // => 'abc'
                     *
                     * _.trim('-_-abc-_-', '_-');
                     * // => 'abc'
                     *
                     * _.map(['  foo  ', '  bar  '], _.trim);
                     * // => ['foo', 'bar']
                     */
                    function trim(string, chars, guard) {
                        string = toString(string);
                        if (string && (guard || chars === undefined)) {
                            return string.replace(reTrim, '');
                        }
                        if (!string || !(chars = baseToString(chars))) {
                            return string;
                        }
                        var strSymbols = stringToArray(string),
                            chrSymbols = stringToArray(chars),
                            start = charsStartIndex(strSymbols, chrSymbols),
                            end = charsEndIndex(strSymbols, chrSymbols) + 1;

                        return castSlice(strSymbols, start, end).join('');
                    }

                    /**
                     * Removes trailing whitespace or specified characters from `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to trim.
                     * @param {string} [chars=whitespace] The characters to trim.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the trimmed string.
                     * @example
                     *
                     * _.trimEnd('  abc  ');
                     * // => '  abc'
                     *
                     * _.trimEnd('-_-abc-_-', '_-');
                     * // => '-_-abc'
                     */
                    function trimEnd(string, chars, guard) {
                        string = toString(string);
                        if (string && (guard || chars === undefined)) {
                            return string.replace(reTrimEnd, '');
                        }
                        if (!string || !(chars = baseToString(chars))) {
                            return string;
                        }
                        var strSymbols = stringToArray(string),
                            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                        return castSlice(strSymbols, 0, end).join('');
                    }

                    /**
                     * Removes leading whitespace or specified characters from `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to trim.
                     * @param {string} [chars=whitespace] The characters to trim.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the trimmed string.
                     * @example
                     *
                     * _.trimStart('  abc  ');
                     * // => 'abc  '
                     *
                     * _.trimStart('-_-abc-_-', '_-');
                     * // => 'abc-_-'
                     */
                    function trimStart(string, chars, guard) {
                        string = toString(string);
                        if (string && (guard || chars === undefined)) {
                            return string.replace(reTrimStart, '');
                        }
                        if (!string || !(chars = baseToString(chars))) {
                            return string;
                        }
                        var strSymbols = stringToArray(string),
                            start = charsStartIndex(strSymbols, stringToArray(chars));

                        return castSlice(strSymbols, start).join('');
                    }

                    /**
                     * Truncates `string` if it's longer than the given maximum string length.
                     * The last characters of the truncated string are replaced with the omission
                     * string which defaults to "...".
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to truncate.
                     * @param {Object} [options={}] The options object.
                     * @param {number} [options.length=30] The maximum string length.
                     * @param {string} [options.omission='...'] The string to indicate text is omitted.
                     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                     * @returns {string} Returns the truncated string.
                     * @example
                     *
                     * _.truncate('hi-diddly-ho there, neighborino');
                     * // => 'hi-diddly-ho there, neighbo...'
                     *
                     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
                     * // => 'hi-diddly-ho there,...'
                     *
                     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
                     * // => 'hi-diddly-ho there...'
                     *
                     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
                     * // => 'hi-diddly-ho there, neig [...]'
                     */
                    function truncate(string, options) {
                        var length = DEFAULT_TRUNC_LENGTH,
                            omission = DEFAULT_TRUNC_OMISSION;

                        if (isObject(options)) {
                            var separator = 'separator' in options ? options.separator : separator;
                            length = 'length' in options ? toInteger(options.length) : length;
                            omission = 'omission' in options ? baseToString(options.omission) : omission;
                        }
                        string = toString(string);

                        var strLength = string.length;
                        if (hasUnicode(string)) {
                            var strSymbols = stringToArray(string);
                            strLength = strSymbols.length;
                        }
                        if (length >= strLength) {
                            return string;
                        }
                        var end = length - stringSize(omission);
                        if (end < 1) {
                            return omission;
                        }
                        var result = strSymbols
                            ? castSlice(strSymbols, 0, end).join('')
                            : string.slice(0, end);

                        if (separator === undefined) {
                            return result + omission;
                        }
                        if (strSymbols) {
                            end += (result.length - end);
                        }
                        if (isRegExp(separator)) {
                            if (string.slice(end).search(separator)) {
                                var match,
                                    substring = result;

                                if (!separator.global) {
                                    separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                                }
                                separator.lastIndex = 0;
                                while ((match = separator.exec(substring))) {
                                    var newEnd = match.index;
                                }
                                result = result.slice(0, newEnd === undefined ? end : newEnd);
                            }
                        } else if (string.indexOf(baseToString(separator), end) != end) {
                            var index = result.lastIndexOf(separator);
                            if (index > -1) {
                                result = result.slice(0, index);
                            }
                        }
                        return result + omission;
                    }

                    /**
                     * The inverse of `_.escape`; this method converts the HTML entities
                     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                     * their corresponding characters.
                     *
                     * **Note:** No other HTML entities are unescaped. To unescape additional
                     * HTML entities use a third-party library like [_he_](https://mths.be/he).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.6.0
                     * @category String
                     * @param {string} [string=''] The string to unescape.
                     * @returns {string} Returns the unescaped string.
                     * @example
                     *
                     * _.unescape('fred, barney, &amp; pebbles');
                     * // => 'fred, barney, & pebbles'
                     */
                    function unescape(string) {
                        string = toString(string);
                        return (string && reHasEscapedHtml.test(string))
                            ? string.replace(reEscapedHtml, unescapeHtmlChar)
                            : string;
                    }

                    /**
                     * Converts `string`, as space separated words, to upper case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the upper cased string.
                     * @example
                     *
                     * _.upperCase('--foo-bar');
                     * // => 'FOO BAR'
                     *
                     * _.upperCase('fooBar');
                     * // => 'FOO BAR'
                     *
                     * _.upperCase('__foo_bar__');
                     * // => 'FOO BAR'
                     */
                    var upperCase = createCompounder(function (result, word, index) {
                        return result + (index ? ' ' : '') + word.toUpperCase();
                    });

                    /**
                     * Converts the first character of `string` to upper case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the converted string.
                     * @example
                     *
                     * _.upperFirst('fred');
                     * // => 'Fred'
                     *
                     * _.upperFirst('FRED');
                     * // => 'FRED'
                     */
                    var upperFirst = createCaseFirst('toUpperCase');

                    /**
                     * Splits `string` into an array of its words.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to inspect.
                     * @param {RegExp|string} [pattern] The pattern to match words.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the words of `string`.
                     * @example
                     *
                     * _.words('fred, barney, & pebbles');
                     * // => ['fred', 'barney', 'pebbles']
                     *
                     * _.words('fred, barney, & pebbles', /[^, ]+/g);
                     * // => ['fred', 'barney', '&', 'pebbles']
                     */
                    function words(string, pattern, guard) {
                        string = toString(string);
                        pattern = guard ? undefined : pattern;

                        if (pattern === undefined) {
                            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                        }
                        return string.match(pattern) || [];
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Attempts to invoke `func`, returning either the result or the caught error
                     * object. Any additional arguments are provided to `func` when it's invoked.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {Function} func The function to attempt.
                     * @param {...*} [args] The arguments to invoke `func` with.
                     * @returns {*} Returns the `func` result or error object.
                     * @example
                     *
                     * // Avoid throwing errors for invalid selectors.
                     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
                     *
                     * if (_.isError(elements)) {
     *   elements = [];
     * }
                     */
                    var attempt = baseRest(function (func, args) {
                        try {
                            return apply(func, undefined, args);
                        } catch (e) {
                            return isError(e) ? e : new Error(e);
                        }
                    });

                    /**
                     * Binds methods of an object to the object itself, overwriting the existing
                     * method.
                     *
                     * **Note:** This method doesn't set the "length" property of bound functions.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {Object} object The object to bind and assign the bound methods to.
                     * @param {...(string|string[])} methodNames The object method names to bind.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
                     *
                     * _.bindAll(view, ['click']);
                     * jQuery(element).on('click', view.click);
                     * // => Logs 'clicked docs' when clicked.
                     */
                    var bindAll = flatRest(function (object, methodNames) {
                        arrayEach(methodNames, function (key) {
                            key = toKey(key);
                            baseAssignValue(object, key, bind(object[key], object));
                        });
                        return object;
                    });

                    /**
                     * Creates a function that iterates over `pairs` and invokes the corresponding
                     * function of the first predicate to return truthy. The predicate-function
                     * pairs are invoked with the `this` binding and arguments of the created
                     * function.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {Array} pairs The predicate-function pairs.
                     * @returns {Function} Returns the new composite function.
                     * @example
                     *
                     * var func = _.cond([
                     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                     *   [_.stubTrue,                      _.constant('no match')]
                     * ]);
                     *
                     * func({ 'a': 1, 'b': 2 });
                     * // => 'matches A'
                     *
                     * func({ 'a': 0, 'b': 1 });
                     * // => 'matches B'
                     *
                     * func({ 'a': '1', 'b': '2' });
                     * // => 'no match'
                     */
                    function cond(pairs) {
                        var length = pairs == null ? 0 : pairs.length,
                            toIteratee = getIteratee();

                        pairs = !length ? [] : arrayMap(pairs, function (pair) {
                            if (typeof pair[1] != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            return [toIteratee(pair[0]), pair[1]];
                        });

                        return baseRest(function (args) {
                            var index = -1;
                            while (++index < length) {
                                var pair = pairs[index];
                                if (apply(pair[0], this, args)) {
                                    return apply(pair[1], this, args);
                                }
                            }
                        });
                    }

                    /**
                     * Creates a function that invokes the predicate properties of `source` with
                     * the corresponding property values of a given object, returning `true` if
                     * all predicates return truthy, else `false`.
                     *
                     * **Note:** The created function is equivalent to `_.conformsTo` with
                     * `source` partially applied.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {Function} Returns the new spec function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': 2, 'b': 1 },
                     *   { 'a': 1, 'b': 2 }
                     * ];
                     *
                     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                     * // => [{ 'a': 1, 'b': 2 }]
                     */
                    function conforms(source) {
                        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that returns `value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Util
                     * @param {*} value The value to return from the new function.
                     * @returns {Function} Returns the new constant function.
                     * @example
                     *
                     * var objects = _.times(2, _.constant({ 'a': 1 }));
                     *
                     * console.log(objects);
                     * // => [{ 'a': 1 }, { 'a': 1 }]
                     *
                     * console.log(objects[0] === objects[1]);
                     * // => true
                     */
                    function constant(value) {
                        return function () {
                            return value;
                        };
                    }

                    /**
                     * Checks `value` to determine whether a default value should be returned in
                     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                     * or `undefined`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.14.0
                     * @category Util
                     * @param {*} value The value to check.
                     * @param {*} defaultValue The default value.
                     * @returns {*} Returns the resolved value.
                     * @example
                     *
                     * _.defaultTo(1, 10);
                     * // => 1
                     *
                     * _.defaultTo(undefined, 10);
                     * // => 10
                     */
                    function defaultTo(value, defaultValue) {
                        return (value == null || value !== value) ? defaultValue : value;
                    }

                    /**
                     * Creates a function that returns the result of invoking the given functions
                     * with the `this` binding of the created function, where each successive
                     * invocation is supplied the return value of the previous.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [funcs] The functions to invoke.
                     * @returns {Function} Returns the new composite function.
                     * @see _.flowRight
                     * @example
                     *
                     * function square(n) {
     *   return n * n;
     * }
                     *
                     * var addSquare = _.flow([_.add, square]);
                     * addSquare(1, 2);
                     * // => 9
                     */
                    var flow = createFlow();

                    /**
                     * This method is like `_.flow` except that it creates a function that
                     * invokes the given functions from right to left.
                     *
                     * @static
                     * @since 3.0.0
                     * @memberOf _
                     * @category Util
                     * @param {...(Function|Function[])} [funcs] The functions to invoke.
                     * @returns {Function} Returns the new composite function.
                     * @see _.flow
                     * @example
                     *
                     * function square(n) {
     *   return n * n;
     * }
                     *
                     * var addSquare = _.flowRight([square, _.add]);
                     * addSquare(1, 2);
                     * // => 9
                     */
                    var flowRight = createFlow(true);

                    /**
                     * This method returns the first argument it receives.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {*} value Any value.
                     * @returns {*} Returns `value`.
                     * @example
                     *
                     * var object = { 'a': 1 };
                     *
                     * console.log(_.identity(object) === object);
                     * // => true
                     */
                    function identity(value) {
                        return value;
                    }

                    /**
                     * Creates a function that invokes `func` with the arguments of the created
                     * function. If `func` is a property name, the created function returns the
                     * property value for a given element. If `func` is an array or object, the
                     * created function returns `true` for elements that contain the equivalent
                     * source properties, otherwise it returns `false`.
                     *
                     * @static
                     * @since 4.0.0
                     * @memberOf _
                     * @category Util
                     * @param {*} [func=_.identity] The value to convert to a callback.
                     * @returns {Function} Returns the callback.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': true },
                     *   { 'user': 'fred',   'age': 40, 'active': false }
                     * ];
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.filter(users, _.iteratee(['user', 'fred']));
                     * // => [{ 'user': 'fred', 'age': 40 }]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.map(users, _.iteratee('user'));
                     * // => ['barney', 'fred']
                     *
                     * // Create custom iteratee shorthands.
                     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
                     *
                     * _.filter(['abc', 'def'], /ef/);
                     * // => ['def']
                     */
                    function iteratee(func) {
                        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that performs a partial deep comparison between a given
                     * object and `source`, returning `true` if the given object has equivalent
                     * property values, else `false`.
                     *
                     * **Note:** The created function is equivalent to `_.isMatch` with `source`
                     * partially applied.
                     *
                     * Partial comparisons will match empty array and empty object `source`
                     * values against any array or object value, respectively. See `_.isEqual`
                     * for a list of supported value comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {Object} source The object of property values to match.
                     * @returns {Function} Returns the new spec function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': 1, 'b': 2, 'c': 3 },
                     *   { 'a': 4, 'b': 5, 'c': 6 }
                     * ];
                     *
                     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                     */
                    function matches(source) {
                        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that performs a partial deep comparison between the
                     * value at `path` of a given object to `srcValue`, returning `true` if the
                     * object value is equivalent, else `false`.
                     *
                     * **Note:** Partial comparisons will match empty array and empty object
                     * `srcValue` values against any array or object value, respectively. See
                     * `_.isEqual` for a list of supported value comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.2.0
                     * @category Util
                     * @param {Array|string} path The path of the property to get.
                     * @param {*} srcValue The value to match.
                     * @returns {Function} Returns the new spec function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': 1, 'b': 2, 'c': 3 },
                     *   { 'a': 4, 'b': 5, 'c': 6 }
                     * ];
                     *
                     * _.find(objects, _.matchesProperty('a', 4));
                     * // => { 'a': 4, 'b': 5, 'c': 6 }
                     */
                    function matchesProperty(path, srcValue) {
                        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that invokes the method at `path` of a given object.
                     * Any additional arguments are provided to the invoked method.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Util
                     * @param {Array|string} path The path of the method to invoke.
                     * @param {...*} [args] The arguments to invoke the method with.
                     * @returns {Function} Returns the new invoker function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': { 'b': _.constant(2) } },
                     *   { 'a': { 'b': _.constant(1) } }
                     * ];
                     *
                     * _.map(objects, _.method('a.b'));
                     * // => [2, 1]
                     *
                     * _.map(objects, _.method(['a', 'b']));
                     * // => [2, 1]
                     */
                    var method = baseRest(function (path, args) {
                        return function (object) {
                            return baseInvoke(object, path, args);
                        };
                    });

                    /**
                     * The opposite of `_.method`; this method creates a function that invokes
                     * the method at a given path of `object`. Any additional arguments are
                     * provided to the invoked method.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Util
                     * @param {Object} object The object to query.
                     * @param {...*} [args] The arguments to invoke the method with.
                     * @returns {Function} Returns the new invoker function.
                     * @example
                     *
                     * var array = _.times(3, _.constant),
                     *     object = { 'a': array, 'b': array, 'c': array };
                     *
                     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                     * // => [2, 0]
                     *
                     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                     * // => [2, 0]
                     */
                    var methodOf = baseRest(function (object, args) {
                        return function (path) {
                            return baseInvoke(object, path, args);
                        };
                    });

                    /**
                     * Adds all own enumerable string keyed function properties of a source
                     * object to the destination object. If `object` is a function, then methods
                     * are added to its prototype as well.
                     *
                     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                     * avoid conflicts caused by modifying the original.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {Function|Object} [object=lodash] The destination object.
                     * @param {Object} source The object of functions to add.
                     * @param {Object} [options={}] The options object.
                     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                     * @returns {Function|Object} Returns `object`.
                     * @example
                     *
                     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
                     *
                     * _.mixin({ 'vowels': vowels });
                     * _.vowels('fred');
                     * // => ['e']
                     *
                     * _('fred').vowels().value();
                     * // => ['e']
                     *
                     * _.mixin({ 'vowels': vowels }, { 'chain': false });
                     * _('fred').vowels();
                     * // => ['e']
                     */
                    function mixin(object, source, options) {
                        var props = keys(source),
                            methodNames = baseFunctions(source, props);

                        if (options == null &&
                            !(isObject(source) && (methodNames.length || !props.length))) {
                            options = source;
                            source = object;
                            object = this;
                            methodNames = baseFunctions(source, keys(source));
                        }
                        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                            isFunc = isFunction(object);

                        arrayEach(methodNames, function (methodName) {
                            var func = source[methodName];
                            object[methodName] = func;
                            if (isFunc) {
                                object.prototype[methodName] = function () {
                                    var chainAll = this.__chain__;
                                    if (chain || chainAll) {
                                        var result = object(this.__wrapped__),
                                            actions = result.__actions__ = copyArray(this.__actions__);

                                        actions.push({'func': func, 'args': arguments, 'thisArg': object});
                                        result.__chain__ = chainAll;
                                        return result;
                                    }
                                    return func.apply(object, arrayPush([this.value()], arguments));
                                };
                            }
                        });

                        return object;
                    }

                    /**
                     * Reverts the `_` variable to its previous value and returns a reference to
                     * the `lodash` function.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @returns {Function} Returns the `lodash` function.
                     * @example
                     *
                     * var lodash = _.noConflict();
                     */
                    function noConflict() {
                        if (root._ === this) {
                            root._ = oldDash;
                        }
                        return this;
                    }

                    /**
                     * This method returns `undefined`.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.3.0
                     * @category Util
                     * @example
                     *
                     * _.times(2, _.noop);
                     * // => [undefined, undefined]
                     */
                    function noop() {
                        // No operation performed.
                    }

                    /**
                     * Creates a function that gets the argument at index `n`. If `n` is negative,
                     * the nth argument from the end is returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {number} [n=0] The index of the argument to return.
                     * @returns {Function} Returns the new pass-thru function.
                     * @example
                     *
                     * var func = _.nthArg(1);
                     * func('a', 'b', 'c', 'd');
                     * // => 'b'
                     *
                     * var func = _.nthArg(-2);
                     * func('a', 'b', 'c', 'd');
                     * // => 'c'
                     */
                    function nthArg(n) {
                        n = toInteger(n);
                        return baseRest(function (args) {
                            return baseNth(args, n);
                        });
                    }

                    /**
                     * Creates a function that invokes `iteratees` with the arguments it receives
                     * and returns their results.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [iteratees=[_.identity]]
                     *  The iteratees to invoke.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var func = _.over([Math.max, Math.min]);
                     *
                     * func(1, 2, 3, 4);
                     * // => [4, 1]
                     */
                    var over = createOver(arrayMap);

                    /**
                     * Creates a function that checks if **all** of the `predicates` return
                     * truthy when invoked with the arguments it receives.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [predicates=[_.identity]]
                     *  The predicates to check.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var func = _.overEvery([Boolean, isFinite]);
                     *
                     * func('1');
                     * // => true
                     *
                     * func(null);
                     * // => false
                     *
                     * func(NaN);
                     * // => false
                     */
                    var overEvery = createOver(arrayEvery);

                    /**
                     * Creates a function that checks if **any** of the `predicates` return
                     * truthy when invoked with the arguments it receives.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [predicates=[_.identity]]
                     *  The predicates to check.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var func = _.overSome([Boolean, isFinite]);
                     *
                     * func('1');
                     * // => true
                     *
                     * func(null);
                     * // => true
                     *
                     * func(NaN);
                     * // => false
                     */
                    var overSome = createOver(arraySome);

                    /**
                     * Creates a function that returns the value at `path` of a given object.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Util
                     * @param {Array|string} path The path of the property to get.
                     * @returns {Function} Returns the new accessor function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': { 'b': 2 } },
                     *   { 'a': { 'b': 1 } }
                     * ];
                     *
                     * _.map(objects, _.property('a.b'));
                     * // => [2, 1]
                     *
                     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                     * // => [1, 2]
                     */
                    function property(path) {
                        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                    }

                    /**
                     * The opposite of `_.property`; this method creates a function that returns
                     * the value at a given path of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {Object} object The object to query.
                     * @returns {Function} Returns the new accessor function.
                     * @example
                     *
                     * var array = [0, 1, 2],
                     *     object = { 'a': array, 'b': array, 'c': array };
                     *
                     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                     * // => [2, 0]
                     *
                     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                     * // => [2, 0]
                     */
                    function propertyOf(object) {
                        return function (path) {
                            return object == null ? undefined : baseGet(object, path);
                        };
                    }

                    /**
                     * Creates an array of numbers (positive and/or negative) progressing from
                     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                     * `start` is specified without an `end` or `step`. If `end` is not specified,
                     * it's set to `start` with `start` then set to `0`.
                     *
                     * **Note:** JavaScript follows the IEEE-754 standard for resolving
                     * floating-point values which can produce unexpected results.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {number} [start=0] The start of the range.
                     * @param {number} end The end of the range.
                     * @param {number} [step=1] The value to increment or decrement by.
                     * @returns {Array} Returns the range of numbers.
                     * @see _.inRange, _.rangeRight
                     * @example
                     *
                     * _.range(4);
                     * // => [0, 1, 2, 3]
                     *
                     * _.range(-4);
                     * // => [0, -1, -2, -3]
                     *
                     * _.range(1, 5);
                     * // => [1, 2, 3, 4]
                     *
                     * _.range(0, 20, 5);
                     * // => [0, 5, 10, 15]
                     *
                     * _.range(0, -4, -1);
                     * // => [0, -1, -2, -3]
                     *
                     * _.range(1, 4, 0);
                     * // => [1, 1, 1]
                     *
                     * _.range(0);
                     * // => []
                     */
                    var range = createRange();

                    /**
                     * This method is like `_.range` except that it populates values in
                     * descending order.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {number} [start=0] The start of the range.
                     * @param {number} end The end of the range.
                     * @param {number} [step=1] The value to increment or decrement by.
                     * @returns {Array} Returns the range of numbers.
                     * @see _.inRange, _.range
                     * @example
                     *
                     * _.rangeRight(4);
                     * // => [3, 2, 1, 0]
                     *
                     * _.rangeRight(-4);
                     * // => [-3, -2, -1, 0]
                     *
                     * _.rangeRight(1, 5);
                     * // => [4, 3, 2, 1]
                     *
                     * _.rangeRight(0, 20, 5);
                     * // => [15, 10, 5, 0]
                     *
                     * _.rangeRight(0, -4, -1);
                     * // => [-3, -2, -1, 0]
                     *
                     * _.rangeRight(1, 4, 0);
                     * // => [1, 1, 1]
                     *
                     * _.rangeRight(0);
                     * // => []
                     */
                    var rangeRight = createRange(true);

                    /**
                     * This method returns a new empty array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {Array} Returns the new empty array.
                     * @example
                     *
                     * var arrays = _.times(2, _.stubArray);
                     *
                     * console.log(arrays);
                     * // => [[], []]
                     *
                     * console.log(arrays[0] === arrays[1]);
                     * // => false
                     */
                    function stubArray() {
                        return [];
                    }

                    /**
                     * This method returns `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {boolean} Returns `false`.
                     * @example
                     *
                     * _.times(2, _.stubFalse);
                     * // => [false, false]
                     */
                    function stubFalse() {
                        return false;
                    }

                    /**
                     * This method returns a new empty object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {Object} Returns the new empty object.
                     * @example
                     *
                     * var objects = _.times(2, _.stubObject);
                     *
                     * console.log(objects);
                     * // => [{}, {}]
                     *
                     * console.log(objects[0] === objects[1]);
                     * // => false
                     */
                    function stubObject() {
                        return {};
                    }

                    /**
                     * This method returns an empty string.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {string} Returns the empty string.
                     * @example
                     *
                     * _.times(2, _.stubString);
                     * // => ['', '']
                     */
                    function stubString() {
                        return '';
                    }

                    /**
                     * This method returns `true`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {boolean} Returns `true`.
                     * @example
                     *
                     * _.times(2, _.stubTrue);
                     * // => [true, true]
                     */
                    function stubTrue() {
                        return true;
                    }

                    /**
                     * Invokes the iteratee `n` times, returning an array of the results of
                     * each invocation. The iteratee is invoked with one argument; (index).
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {number} n The number of times to invoke `iteratee`.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the array of results.
                     * @example
                     *
                     * _.times(3, String);
                     * // => ['0', '1', '2']
                     *
                     *  _.times(4, _.constant(0));
                     * // => [0, 0, 0, 0]
                     */
                    function times(n, iteratee) {
                        n = toInteger(n);
                        if (n < 1 || n > MAX_SAFE_INTEGER) {
                            return [];
                        }
                        var index = MAX_ARRAY_LENGTH,
                            length = nativeMin(n, MAX_ARRAY_LENGTH);

                        iteratee = getIteratee(iteratee);
                        n -= MAX_ARRAY_LENGTH;

                        var result = baseTimes(length, iteratee);
                        while (++index < n) {
                            iteratee(index);
                        }
                        return result;
                    }

                    /**
                     * Converts `value` to a property path array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {*} value The value to convert.
                     * @returns {Array} Returns the new property path array.
                     * @example
                     *
                     * _.toPath('a.b.c');
                     * // => ['a', 'b', 'c']
                     *
                     * _.toPath('a[0].b.c');
                     * // => ['a', '0', 'b', 'c']
                     */
                    function toPath(value) {
                        if (isArray(value)) {
                            return arrayMap(value, toKey);
                        }
                        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
                    }

                    /**
                     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {string} [prefix=''] The value to prefix the ID with.
                     * @returns {string} Returns the unique ID.
                     * @example
                     *
                     * _.uniqueId('contact_');
                     * // => 'contact_104'
                     *
                     * _.uniqueId();
                     * // => '105'
                     */
                    function uniqueId(prefix) {
                        var id = ++idCounter;
                        return toString(prefix) + id;
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Adds two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.4.0
                     * @category Math
                     * @param {number} augend The first number in an addition.
                     * @param {number} addend The second number in an addition.
                     * @returns {number} Returns the total.
                     * @example
                     *
                     * _.add(6, 4);
                     * // => 10
                     */
                    var add = createMathOperation(function (augend, addend) {
                        return augend + addend;
                    }, 0);

                    /**
                     * Computes `number` rounded up to `precision`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Math
                     * @param {number} number The number to round up.
                     * @param {number} [precision=0] The precision to round up to.
                     * @returns {number} Returns the rounded up number.
                     * @example
                     *
                     * _.ceil(4.006);
                     * // => 5
                     *
                     * _.ceil(6.004, 2);
                     * // => 6.01
                     *
                     * _.ceil(6040, -2);
                     * // => 6100
                     */
                    var ceil = createRound('ceil');

                    /**
                     * Divide two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Math
                     * @param {number} dividend The first number in a division.
                     * @param {number} divisor The second number in a division.
                     * @returns {number} Returns the quotient.
                     * @example
                     *
                     * _.divide(6, 4);
                     * // => 1.5
                     */
                    var divide = createMathOperation(function (dividend, divisor) {
                        return dividend / divisor;
                    }, 1);

                    /**
                     * Computes `number` rounded down to `precision`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Math
                     * @param {number} number The number to round down.
                     * @param {number} [precision=0] The precision to round down to.
                     * @returns {number} Returns the rounded down number.
                     * @example
                     *
                     * _.floor(4.006);
                     * // => 4
                     *
                     * _.floor(0.046, 2);
                     * // => 0.04
                     *
                     * _.floor(4060, -2);
                     * // => 4000
                     */
                    var floor = createRound('floor');

                    /**
                     * Computes the maximum value of `array`. If `array` is empty or falsey,
                     * `undefined` is returned.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {*} Returns the maximum value.
                     * @example
                     *
                     * _.max([4, 2, 8, 6]);
                     * // => 8
                     *
                     * _.max([]);
                     * // => undefined
                     */
                    function max(array) {
                        return (array && array.length)
                            ? baseExtremum(array, identity, baseGt)
                            : undefined;
                    }

                    /**
                     * This method is like `_.max` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the criterion by which
                     * the value is ranked. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {*} Returns the maximum value.
                     * @example
                     *
                     * var objects = [{ 'n': 1 }, { 'n': 2 }];
                     *
                     * _.maxBy(objects, function(o) { return o.n; });
                     * // => { 'n': 2 }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.maxBy(objects, 'n');
                     * // => { 'n': 2 }
                     */
                    function maxBy(array, iteratee) {
                        return (array && array.length)
                            ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                            : undefined;
                    }

                    /**
                     * Computes the mean of the values in `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {number} Returns the mean.
                     * @example
                     *
                     * _.mean([4, 2, 8, 6]);
                     * // => 5
                     */
                    function mean(array) {
                        return baseMean(array, identity);
                    }

                    /**
                     * This method is like `_.mean` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the value to be averaged.
                     * The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the mean.
                     * @example
                     *
                     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                     *
                     * _.meanBy(objects, function(o) { return o.n; });
                     * // => 5
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.meanBy(objects, 'n');
                     * // => 5
                     */
                    function meanBy(array, iteratee) {
                        return baseMean(array, getIteratee(iteratee, 2));
                    }

                    /**
                     * Computes the minimum value of `array`. If `array` is empty or falsey,
                     * `undefined` is returned.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {*} Returns the minimum value.
                     * @example
                     *
                     * _.min([4, 2, 8, 6]);
                     * // => 2
                     *
                     * _.min([]);
                     * // => undefined
                     */
                    function min(array) {
                        return (array && array.length)
                            ? baseExtremum(array, identity, baseLt)
                            : undefined;
                    }

                    /**
                     * This method is like `_.min` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the criterion by which
                     * the value is ranked. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {*} Returns the minimum value.
                     * @example
                     *
                     * var objects = [{ 'n': 1 }, { 'n': 2 }];
                     *
                     * _.minBy(objects, function(o) { return o.n; });
                     * // => { 'n': 1 }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.minBy(objects, 'n');
                     * // => { 'n': 1 }
                     */
                    function minBy(array, iteratee) {
                        return (array && array.length)
                            ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                            : undefined;
                    }

                    /**
                     * Multiply two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Math
                     * @param {number} multiplier The first number in a multiplication.
                     * @param {number} multiplicand The second number in a multiplication.
                     * @returns {number} Returns the product.
                     * @example
                     *
                     * _.multiply(6, 4);
                     * // => 24
                     */
                    var multiply = createMathOperation(function (multiplier, multiplicand) {
                        return multiplier * multiplicand;
                    }, 1);

                    /**
                     * Computes `number` rounded to `precision`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Math
                     * @param {number} number The number to round.
                     * @param {number} [precision=0] The precision to round to.
                     * @returns {number} Returns the rounded number.
                     * @example
                     *
                     * _.round(4.006);
                     * // => 4
                     *
                     * _.round(4.006, 2);
                     * // => 4.01
                     *
                     * _.round(4060, -2);
                     * // => 4100
                     */
                    var round = createRound('round');

                    /**
                     * Subtract two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {number} minuend The first number in a subtraction.
                     * @param {number} subtrahend The second number in a subtraction.
                     * @returns {number} Returns the difference.
                     * @example
                     *
                     * _.subtract(6, 4);
                     * // => 2
                     */
                    var subtract = createMathOperation(function (minuend, subtrahend) {
                        return minuend - subtrahend;
                    }, 0);

                    /**
                     * Computes the sum of the values in `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.4.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {number} Returns the sum.
                     * @example
                     *
                     * _.sum([4, 2, 8, 6]);
                     * // => 20
                     */
                    function sum(array) {
                        return (array && array.length)
                            ? baseSum(array, identity)
                            : 0;
                    }

                    /**
                     * This method is like `_.sum` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the value to be summed.
                     * The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the sum.
                     * @example
                     *
                     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                     *
                     * _.sumBy(objects, function(o) { return o.n; });
                     * // => 20
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.sumBy(objects, 'n');
                     * // => 20
                     */
                    function sumBy(array, iteratee) {
                        return (array && array.length)
                            ? baseSum(array, getIteratee(iteratee, 2))
                            : 0;
                    }

                    /*------------------------------------------------------------------------*/

                    // Add methods that return wrapped values in chain sequences.
                    lodash.after = after;
                    lodash.ary = ary;
                    lodash.assign = assign;
                    lodash.assignIn = assignIn;
                    lodash.assignInWith = assignInWith;
                    lodash.assignWith = assignWith;
                    lodash.at = at;
                    lodash.before = before;
                    lodash.bind = bind;
                    lodash.bindAll = bindAll;
                    lodash.bindKey = bindKey;
                    lodash.castArray = castArray;
                    lodash.chain = chain;
                    lodash.chunk = chunk;
                    lodash.compact = compact;
                    lodash.concat = concat;
                    lodash.cond = cond;
                    lodash.conforms = conforms;
                    lodash.constant = constant;
                    lodash.countBy = countBy;
                    lodash.create = create;
                    lodash.curry = curry;
                    lodash.curryRight = curryRight;
                    lodash.debounce = debounce;
                    lodash.defaults = defaults;
                    lodash.defaultsDeep = defaultsDeep;
                    lodash.defer = defer;
                    lodash.delay = delay;
                    lodash.difference = difference;
                    lodash.differenceBy = differenceBy;
                    lodash.differenceWith = differenceWith;
                    lodash.drop = drop;
                    lodash.dropRight = dropRight;
                    lodash.dropRightWhile = dropRightWhile;
                    lodash.dropWhile = dropWhile;
                    lodash.fill = fill;
                    lodash.filter = filter;
                    lodash.flatMap = flatMap;
                    lodash.flatMapDeep = flatMapDeep;
                    lodash.flatMapDepth = flatMapDepth;
                    lodash.flatten = flatten;
                    lodash.flattenDeep = flattenDeep;
                    lodash.flattenDepth = flattenDepth;
                    lodash.flip = flip;
                    lodash.flow = flow;
                    lodash.flowRight = flowRight;
                    lodash.fromPairs = fromPairs;
                    lodash.functions = functions;
                    lodash.functionsIn = functionsIn;
                    lodash.groupBy = groupBy;
                    lodash.initial = initial;
                    lodash.intersection = intersection;
                    lodash.intersectionBy = intersectionBy;
                    lodash.intersectionWith = intersectionWith;
                    lodash.invert = invert;
                    lodash.invertBy = invertBy;
                    lodash.invokeMap = invokeMap;
                    lodash.iteratee = iteratee;
                    lodash.keyBy = keyBy;
                    lodash.keys = keys;
                    lodash.keysIn = keysIn;
                    lodash.map = map;
                    lodash.mapKeys = mapKeys;
                    lodash.mapValues = mapValues;
                    lodash.matches = matches;
                    lodash.matchesProperty = matchesProperty;
                    lodash.memoize = memoize;
                    lodash.merge = merge;
                    lodash.mergeWith = mergeWith;
                    lodash.method = method;
                    lodash.methodOf = methodOf;
                    lodash.mixin = mixin;
                    lodash.negate = negate;
                    lodash.nthArg = nthArg;
                    lodash.omit = omit;
                    lodash.omitBy = omitBy;
                    lodash.once = once;
                    lodash.orderBy = orderBy;
                    lodash.over = over;
                    lodash.overArgs = overArgs;
                    lodash.overEvery = overEvery;
                    lodash.overSome = overSome;
                    lodash.partial = partial;
                    lodash.partialRight = partialRight;
                    lodash.partition = partition;
                    lodash.pick = pick;
                    lodash.pickBy = pickBy;
                    lodash.property = property;
                    lodash.propertyOf = propertyOf;
                    lodash.pull = pull;
                    lodash.pullAll = pullAll;
                    lodash.pullAllBy = pullAllBy;
                    lodash.pullAllWith = pullAllWith;
                    lodash.pullAt = pullAt;
                    lodash.range = range;
                    lodash.rangeRight = rangeRight;
                    lodash.rearg = rearg;
                    lodash.reject = reject;
                    lodash.remove = remove;
                    lodash.rest = rest;
                    lodash.reverse = reverse;
                    lodash.sampleSize = sampleSize;
                    lodash.set = set;
                    lodash.setWith = setWith;
                    lodash.shuffle = shuffle;
                    lodash.slice = slice;
                    lodash.sortBy = sortBy;
                    lodash.sortedUniq = sortedUniq;
                    lodash.sortedUniqBy = sortedUniqBy;
                    lodash.split = split;
                    lodash.spread = spread;
                    lodash.tail = tail;
                    lodash.take = take;
                    lodash.takeRight = takeRight;
                    lodash.takeRightWhile = takeRightWhile;
                    lodash.takeWhile = takeWhile;
                    lodash.tap = tap;
                    lodash.throttle = throttle;
                    lodash.thru = thru;
                    lodash.toArray = toArray;
                    lodash.toPairs = toPairs;
                    lodash.toPairsIn = toPairsIn;
                    lodash.toPath = toPath;
                    lodash.toPlainObject = toPlainObject;
                    lodash.transform = transform;
                    lodash.unary = unary;
                    lodash.union = union;
                    lodash.unionBy = unionBy;
                    lodash.unionWith = unionWith;
                    lodash.uniq = uniq;
                    lodash.uniqBy = uniqBy;
                    lodash.uniqWith = uniqWith;
                    lodash.unset = unset;
                    lodash.unzip = unzip;
                    lodash.unzipWith = unzipWith;
                    lodash.update = update;
                    lodash.updateWith = updateWith;
                    lodash.values = values;
                    lodash.valuesIn = valuesIn;
                    lodash.without = without;
                    lodash.words = words;
                    lodash.wrap = wrap;
                    lodash.xor = xor;
                    lodash.xorBy = xorBy;
                    lodash.xorWith = xorWith;
                    lodash.zip = zip;
                    lodash.zipObject = zipObject;
                    lodash.zipObjectDeep = zipObjectDeep;
                    lodash.zipWith = zipWith;

                    // Add aliases.
                    lodash.entries = toPairs;
                    lodash.entriesIn = toPairsIn;
                    lodash.extend = assignIn;
                    lodash.extendWith = assignInWith;

                    // Add methods to `lodash.prototype`.
                    mixin(lodash, lodash);

                    /*------------------------------------------------------------------------*/

                    // Add methods that return unwrapped values in chain sequences.
                    lodash.add = add;
                    lodash.attempt = attempt;
                    lodash.camelCase = camelCase;
                    lodash.capitalize = capitalize;
                    lodash.ceil = ceil;
                    lodash.clamp = clamp;
                    lodash.clone = clone;
                    lodash.cloneDeep = cloneDeep;
                    lodash.cloneDeepWith = cloneDeepWith;
                    lodash.cloneWith = cloneWith;
                    lodash.conformsTo = conformsTo;
                    lodash.deburr = deburr;
                    lodash.defaultTo = defaultTo;
                    lodash.divide = divide;
                    lodash.endsWith = endsWith;
                    lodash.eq = eq;
                    lodash.escape = escape;
                    lodash.escapeRegExp = escapeRegExp;
                    lodash.every = every;
                    lodash.find = find;
                    lodash.findIndex = findIndex;
                    lodash.findKey = findKey;
                    lodash.findLast = findLast;
                    lodash.findLastIndex = findLastIndex;
                    lodash.findLastKey = findLastKey;
                    lodash.floor = floor;
                    lodash.forEach = forEach;
                    lodash.forEachRight = forEachRight;
                    lodash.forIn = forIn;
                    lodash.forInRight = forInRight;
                    lodash.forOwn = forOwn;
                    lodash.forOwnRight = forOwnRight;
                    lodash.get = get;
                    lodash.gt = gt;
                    lodash.gte = gte;
                    lodash.has = has;
                    lodash.hasIn = hasIn;
                    lodash.head = head;
                    lodash.identity = identity;
                    lodash.includes = includes;
                    lodash.indexOf = indexOf;
                    lodash.inRange = inRange;
                    lodash.invoke = invoke;
                    lodash.isArguments = isArguments;
                    lodash.isArray = isArray;
                    lodash.isArrayBuffer = isArrayBuffer;
                    lodash.isArrayLike = isArrayLike;
                    lodash.isArrayLikeObject = isArrayLikeObject;
                    lodash.isBoolean = isBoolean;
                    lodash.isBuffer = isBuffer;
                    lodash.isDate = isDate;
                    lodash.isElement = isElement;
                    lodash.isEmpty = isEmpty;
                    lodash.isEqual = isEqual;
                    lodash.isEqualWith = isEqualWith;
                    lodash.isError = isError;
                    lodash.isFinite = isFinite;
                    lodash.isFunction = isFunction;
                    lodash.isInteger = isInteger;
                    lodash.isLength = isLength;
                    lodash.isMap = isMap;
                    lodash.isMatch = isMatch;
                    lodash.isMatchWith = isMatchWith;
                    lodash.isNaN = isNaN;
                    lodash.isNative = isNative;
                    lodash.isNil = isNil;
                    lodash.isNull = isNull;
                    lodash.isNumber = isNumber;
                    lodash.isObject = isObject;
                    lodash.isObjectLike = isObjectLike;
                    lodash.isPlainObject = isPlainObject;
                    lodash.isRegExp = isRegExp;
                    lodash.isSafeInteger = isSafeInteger;
                    lodash.isSet = isSet;
                    lodash.isString = isString;
                    lodash.isSymbol = isSymbol;
                    lodash.isTypedArray = isTypedArray;
                    lodash.isUndefined = isUndefined;
                    lodash.isWeakMap = isWeakMap;
                    lodash.isWeakSet = isWeakSet;
                    lodash.join = join;
                    lodash.kebabCase = kebabCase;
                    lodash.last = last;
                    lodash.lastIndexOf = lastIndexOf;
                    lodash.lowerCase = lowerCase;
                    lodash.lowerFirst = lowerFirst;
                    lodash.lt = lt;
                    lodash.lte = lte;
                    lodash.max = max;
                    lodash.maxBy = maxBy;
                    lodash.mean = mean;
                    lodash.meanBy = meanBy;
                    lodash.min = min;
                    lodash.minBy = minBy;
                    lodash.stubArray = stubArray;
                    lodash.stubFalse = stubFalse;
                    lodash.stubObject = stubObject;
                    lodash.stubString = stubString;
                    lodash.stubTrue = stubTrue;
                    lodash.multiply = multiply;
                    lodash.nth = nth;
                    lodash.noConflict = noConflict;
                    lodash.noop = noop;
                    lodash.now = now;
                    lodash.pad = pad;
                    lodash.padEnd = padEnd;
                    lodash.padStart = padStart;
                    lodash.parseInt = parseInt;
                    lodash.random = random;
                    lodash.reduce = reduce;
                    lodash.reduceRight = reduceRight;
                    lodash.repeat = repeat;
                    lodash.replace = replace;
                    lodash.result = result;
                    lodash.round = round;
                    lodash.runInContext = runInContext;
                    lodash.sample = sample;
                    lodash.size = size;
                    lodash.snakeCase = snakeCase;
                    lodash.some = some;
                    lodash.sortedIndex = sortedIndex;
                    lodash.sortedIndexBy = sortedIndexBy;
                    lodash.sortedIndexOf = sortedIndexOf;
                    lodash.sortedLastIndex = sortedLastIndex;
                    lodash.sortedLastIndexBy = sortedLastIndexBy;
                    lodash.sortedLastIndexOf = sortedLastIndexOf;
                    lodash.startCase = startCase;
                    lodash.startsWith = startsWith;
                    lodash.subtract = subtract;
                    lodash.sum = sum;
                    lodash.sumBy = sumBy;
                    lodash.template = template;
                    lodash.times = times;
                    lodash.toFinite = toFinite;
                    lodash.toInteger = toInteger;
                    lodash.toLength = toLength;
                    lodash.toLower = toLower;
                    lodash.toNumber = toNumber;
                    lodash.toSafeInteger = toSafeInteger;
                    lodash.toString = toString;
                    lodash.toUpper = toUpper;
                    lodash.trim = trim;
                    lodash.trimEnd = trimEnd;
                    lodash.trimStart = trimStart;
                    lodash.truncate = truncate;
                    lodash.unescape = unescape;
                    lodash.uniqueId = uniqueId;
                    lodash.upperCase = upperCase;
                    lodash.upperFirst = upperFirst;

                    // Add aliases.
                    lodash.each = forEach;
                    lodash.eachRight = forEachRight;
                    lodash.first = head;

                    mixin(lodash, (function () {
                        var source = {};
                        baseForOwn(lodash, function (func, methodName) {
                            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                                source[methodName] = func;
                            }
                        });
                        return source;
                    }()), {'chain': false});

                    /*------------------------------------------------------------------------*/

                    /**
                     * The semantic version number.
                     *
                     * @static
                     * @memberOf _
                     * @type {string}
                     */
                    lodash.VERSION = VERSION;

                    // Assign default placeholders.
                    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
                        lodash[methodName].placeholder = lodash;
                    });

                    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                    arrayEach(['drop', 'take'], function (methodName, index) {
                        LazyWrapper.prototype[methodName] = function (n) {
                            n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                            var result = (this.__filtered__ && !index)
                                ? new LazyWrapper(this)
                                : this.clone();

                            if (result.__filtered__) {
                                result.__takeCount__ = nativeMin(n, result.__takeCount__);
                            } else {
                                result.__views__.push({
                                    'size': nativeMin(n, MAX_ARRAY_LENGTH),
                                    'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                                });
                            }
                            return result;
                        };

                        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                            return this.reverse()[methodName](n).reverse();
                        };
                    });

                    // Add `LazyWrapper` methods that accept an `iteratee` value.
                    arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
                        var type = index + 1,
                            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                        LazyWrapper.prototype[methodName] = function (iteratee) {
                            var result = this.clone();
                            result.__iteratees__.push({
                                'iteratee': getIteratee(iteratee, 3),
                                'type': type
                            });
                            result.__filtered__ = result.__filtered__ || isFilter;
                            return result;
                        };
                    });

                    // Add `LazyWrapper` methods for `_.head` and `_.last`.
                    arrayEach(['head', 'last'], function (methodName, index) {
                        var takeName = 'take' + (index ? 'Right' : '');

                        LazyWrapper.prototype[methodName] = function () {
                            return this[takeName](1).value()[0];
                        };
                    });

                    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                    arrayEach(['initial', 'tail'], function (methodName, index) {
                        var dropName = 'drop' + (index ? '' : 'Right');

                        LazyWrapper.prototype[methodName] = function () {
                            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                        };
                    });

                    LazyWrapper.prototype.compact = function () {
                        return this.filter(identity);
                    };

                    LazyWrapper.prototype.find = function (predicate) {
                        return this.filter(predicate).head();
                    };

                    LazyWrapper.prototype.findLast = function (predicate) {
                        return this.reverse().find(predicate);
                    };

                    LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
                        if (typeof path == 'function') {
                            return new LazyWrapper(this);
                        }
                        return this.map(function (value) {
                            return baseInvoke(value, path, args);
                        });
                    });

                    LazyWrapper.prototype.reject = function (predicate) {
                        return this.filter(negate(getIteratee(predicate)));
                    };

                    LazyWrapper.prototype.slice = function (start, end) {
                        start = toInteger(start);

                        var result = this;
                        if (result.__filtered__ && (start > 0 || end < 0)) {
                            return new LazyWrapper(result);
                        }
                        if (start < 0) {
                            result = result.takeRight(-start);
                        } else if (start) {
                            result = result.drop(start);
                        }
                        if (end !== undefined) {
                            end = toInteger(end);
                            result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                        }
                        return result;
                    };

                    LazyWrapper.prototype.takeRightWhile = function (predicate) {
                        return this.reverse().takeWhile(predicate).reverse();
                    };

                    LazyWrapper.prototype.toArray = function () {
                        return this.take(MAX_ARRAY_LENGTH);
                    };

                    // Add `LazyWrapper` methods to `lodash.prototype`.
                    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                            isTaker = /^(?:head|last)$/.test(methodName),
                            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
                            retUnwrapped = isTaker || /^find/.test(methodName);

                        if (!lodashFunc) {
                            return;
                        }
                        lodash.prototype[methodName] = function () {
                            var value = this.__wrapped__,
                                args = isTaker ? [1] : arguments,
                                isLazy = value instanceof LazyWrapper,
                                iteratee = args[0],
                                useLazy = isLazy || isArray(value);

                            var interceptor = function (value) {
                                var result = lodashFunc.apply(lodash, arrayPush([value], args));
                                return (isTaker && chainAll) ? result[0] : result;
                            };

                            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                                // Avoid lazy use if the iteratee has a "length" value other than `1`.
                                isLazy = useLazy = false;
                            }
                            var chainAll = this.__chain__,
                                isHybrid = !!this.__actions__.length,
                                isUnwrapped = retUnwrapped && !chainAll,
                                onlyLazy = isLazy && !isHybrid;

                            if (!retUnwrapped && useLazy) {
                                value = onlyLazy ? value : new LazyWrapper(this);
                                var result = func.apply(value, args);
                                result.__actions__.push({'func': thru, 'args': [interceptor], 'thisArg': undefined});
                                return new LodashWrapper(result, chainAll);
                            }
                            if (isUnwrapped && onlyLazy) {
                                return func.apply(this, args);
                            }
                            result = this.thru(interceptor);
                            return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                        };
                    });

                    // Add `Array` methods to `lodash.prototype`.
                    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
                        var func = arrayProto[methodName],
                            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                        lodash.prototype[methodName] = function () {
                            var args = arguments;
                            if (retUnwrapped && !this.__chain__) {
                                var value = this.value();
                                return func.apply(isArray(value) ? value : [], args);
                            }
                            return this[chainName](function (value) {
                                return func.apply(isArray(value) ? value : [], args);
                            });
                        };
                    });

                    // Map minified method names to their real names.
                    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                        var lodashFunc = lodash[methodName];
                        if (lodashFunc) {
                            var key = (lodashFunc.name + ''),
                                names = realNames[key] || (realNames[key] = []);

                            names.push({'name': methodName, 'func': lodashFunc});
                        }
                    });

                    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                        'name': 'wrapper',
                        'func': undefined
                    }];

                    // Add methods to `LazyWrapper`.
                    LazyWrapper.prototype.clone = lazyClone;
                    LazyWrapper.prototype.reverse = lazyReverse;
                    LazyWrapper.prototype.value = lazyValue;

                    // Add chain sequence methods to the `lodash` wrapper.
                    lodash.prototype.at = wrapperAt;
                    lodash.prototype.chain = wrapperChain;
                    lodash.prototype.commit = wrapperCommit;
                    lodash.prototype.next = wrapperNext;
                    lodash.prototype.plant = wrapperPlant;
                    lodash.prototype.reverse = wrapperReverse;
                    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

                    // Add lazy aliases.
                    lodash.prototype.first = lodash.prototype.head;

                    if (symIterator) {
                        lodash.prototype[symIterator] = wrapperToIterator;
                    }
                    return lodash;
                });

                /*--------------------------------------------------------------------------*/

                // Export lodash.
                var _ = runInContext();

                // Some AMD build optimizers, like r.js, check for condition patterns like:
                if (true) {
                    // Expose Lodash on the global object to prevent errors when Lodash is
                    // loaded by a script tag in the presence of an AMD loader.
                    // See http://requirejs.org/docs/errors.html#mismatch for more details.
                    // Use `_.noConflict` to remove Lodash from the global object.
                    root._ = _;

                    // Define as an anonymous module so, through path mapping, it can be
                    // referenced as the "underscore" module.
                    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                        return _;
                    }.call(exports, __webpack_require__, exports, module),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                }
                // Check for `exports` after `define` in case a build optimizer adds it.
                else if (freeModule) {
                    // Export for Node.js.
                    (freeModule.exports = _)._ = _;
                    // Export for CommonJS support.
                    freeExports._ = _;
                }
                else {
                    // Export to the global object.
                    root._ = _;
                }
            }.call(this));

            /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(4), __webpack_require__(5)(module)))

        /***/
    }),
    /* 4 */
    /***/ (function (module, exports) {

        var g;

// This works in non-strict mode
        g = (function () {
            return this;
        })();

        try {
            // This works if eval is allowed (see CSP)
            g = g || Function("return this")() || (1, eval)("this");
        } catch (e) {
            // This works if the window reference is available
            if (typeof window === "object")
                g = window;
        }

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

        module.exports = g;


        /***/
    }),
    /* 5 */
    /***/ (function (module, exports) {

        module.exports = function (module) {
            if (!module.webpackPolyfill) {
                module.deprecate = function () {
                };
                module.paths = [];
                // module.parent = undefined by default
                if (!module.children) module.children = [];
                Object.defineProperty(module, "loaded", {
                    enumerable: true,
                    get: function () {
                        return module.l;
                    }
                });
                Object.defineProperty(module, "id", {
                    enumerable: true,
                    get: function () {
                        return module.i;
                    }
                });
                module.webpackPolyfill = 1;
            }
            return module;
        };

    })
]);